
RF_Power_Meter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800100  000023ee  00002482  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000023ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800156  00800156  000024d8  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000024d8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000730  00000000  00000000  000024f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000adae  00000000  00000000  00002c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002c5f  00000000  00000000  0000d9ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00006357  00000000  00000000  0001062d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000ff0  00000000  00000000  00016984  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00003f68  00000000  00000000  00017974  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00006abd  00000000  00000000  0001b8dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000758  00000000  00000000  00022399  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	5f c1       	rjmp	.+702    	; 0x2c0 <__ctors_end>
       2:	00 00       	nop
       4:	79 c1       	rjmp	.+754    	; 0x2f8 <__bad_interrupt>
       6:	00 00       	nop
       8:	77 c1       	rjmp	.+750    	; 0x2f8 <__bad_interrupt>
       a:	00 00       	nop
       c:	75 c1       	rjmp	.+746    	; 0x2f8 <__bad_interrupt>
       e:	00 00       	nop
      10:	73 c1       	rjmp	.+742    	; 0x2f8 <__bad_interrupt>
      12:	00 00       	nop
      14:	71 c1       	rjmp	.+738    	; 0x2f8 <__bad_interrupt>
      16:	00 00       	nop
      18:	6f c1       	rjmp	.+734    	; 0x2f8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6d c1       	rjmp	.+730    	; 0x2f8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	6b c1       	rjmp	.+726    	; 0x2f8 <__bad_interrupt>
      22:	00 00       	nop
      24:	69 c1       	rjmp	.+722    	; 0x2f8 <__bad_interrupt>
      26:	00 00       	nop
      28:	5f c5       	rjmp	.+2750   	; 0xae8 <__vector_10>
      2a:	00 00       	nop
      2c:	28 c6       	rjmp	.+3152   	; 0xc7e <__vector_11>
      2e:	00 00       	nop
      30:	63 c1       	rjmp	.+710    	; 0x2f8 <__bad_interrupt>
      32:	00 00       	nop
      34:	61 c1       	rjmp	.+706    	; 0x2f8 <__bad_interrupt>
      36:	00 00       	nop
      38:	5f c1       	rjmp	.+702    	; 0x2f8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5d c1       	rjmp	.+698    	; 0x2f8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	5b c1       	rjmp	.+694    	; 0x2f8 <__bad_interrupt>
      42:	00 00       	nop
      44:	88 c1       	rjmp	.+784    	; 0x356 <__vector_17>
      46:	00 00       	nop
      48:	57 c1       	rjmp	.+686    	; 0x2f8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	55 c1       	rjmp	.+682    	; 0x2f8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	53 c1       	rjmp	.+678    	; 0x2f8 <__bad_interrupt>
      52:	00 00       	nop
      54:	51 c1       	rjmp	.+674    	; 0x2f8 <__bad_interrupt>
      56:	00 00       	nop
      58:	4f c1       	rjmp	.+670    	; 0x2f8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	4d c1       	rjmp	.+666    	; 0x2f8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	4b c1       	rjmp	.+662    	; 0x2f8 <__bad_interrupt>
      62:	00 00       	nop
      64:	49 c1       	rjmp	.+658    	; 0x2f8 <__bad_interrupt>
      66:	00 00       	nop
      68:	47 c1       	rjmp	.+654    	; 0x2f8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	45 c1       	rjmp	.+650    	; 0x2f8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	43 c1       	rjmp	.+646    	; 0x2f8 <__bad_interrupt>
      72:	00 00       	nop
      74:	41 c1       	rjmp	.+642    	; 0x2f8 <__bad_interrupt>
      76:	00 00       	nop
      78:	3f c1       	rjmp	.+638    	; 0x2f8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	3d c1       	rjmp	.+634    	; 0x2f8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	3b c1       	rjmp	.+630    	; 0x2f8 <__bad_interrupt>
      82:	00 00       	nop
      84:	39 c1       	rjmp	.+626    	; 0x2f8 <__bad_interrupt>
      86:	00 00       	nop
      88:	37 c1       	rjmp	.+622    	; 0x2f8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	35 c1       	rjmp	.+618    	; 0x2f8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	33 c1       	rjmp	.+614    	; 0x2f8 <__bad_interrupt>
      92:	00 00       	nop
      94:	31 c1       	rjmp	.+610    	; 0x2f8 <__bad_interrupt>
      96:	00 00       	nop
      98:	2f c1       	rjmp	.+606    	; 0x2f8 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	2d c1       	rjmp	.+602    	; 0x2f8 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	2b c1       	rjmp	.+598    	; 0x2f8 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	29 c1       	rjmp	.+594    	; 0x2f8 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	27 c1       	rjmp	.+590    	; 0x2f8 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <__trampolines_end>:
      ac:	0d 0a       	sbc	r0, r29
      ae:	45 52       	subi	r20, 0x25	; 37
      b0:	44 20       	and	r4, r4
      b2:	52 46       	sbci	r21, 0x62	; 98
      b4:	20 50       	subi	r18, 0x00	; 0
      b6:	6f 77       	andi	r22, 0x7F	; 127
      b8:	65 72       	andi	r22, 0x25	; 37
      ba:	20 4d       	sbci	r18, 0xD0	; 208
      bc:	65 74       	andi	r22, 0x45	; 69
      be:	65 72       	andi	r22, 0x25	; 37
      c0:	00 44       	sbci	r16, 0x40	; 64

000000c1 <STR_Command_DEBUG>:
      c1:	44 45 42 55 47 00                                   DEBUG.

000000c7 <STR_Command_HELP>:
      c7:	48 45 4c 50 00                                      HELP.

000000cc <STR_Backspace>:
      cc:	1b 5b 44 20 1b 5b 44 00                             .[D .[D.

000000d4 <STR_Unrecognized>:
      d4:	0d 0a 1b 5b 33 31 6d 49 4e 56 41 4c 49 44 20 43     ...[31mINVALID C
      e4:	4f 4d 4d 41 4e 44 1b 5b 30 6d 00                    OMMAND.[0m.

000000ef <STR_Help_Info>:
      ef:	0d 0a 56 69 73 69 74 20 4c 49 4e 4b 5f 48 45 52     ..Visit LINK_HER
      ff:	45 20 66 6f 72 20 66 75 6c 6c 20 64 6f 63 73 2e     E for full docs.
     10f:	00                                                  .

00000110 <ProductString>:
     110:	28 03 52 00 46 00 20 00 50 00 6f 00 77 00 65 00     (.R.F. .P.o.w.e.
     120:	72 00 20 00 4d 00 65 00 74 00 65 00 72 00 20 00     r. .M.e.t.e.r. .
     130:	56 00 31 00 2e 00 32 00 00 00                       V.1...2...

0000013a <ManufacturerString>:
     13a:	2e 03 45 00 6e 00 68 00 61 00 6e 00 63 00 65 00     ..E.n.h.a.n.c.e.
     14a:	64 00 20 00 52 00 61 00 64 00 69 00 6f 00 20 00     d. .R.a.d.i.o. .
     15a:	44 00 65 00 76 00 69 00 63 00 65 00 73 00 00 00     D.e.v.i.c.e.s...

0000016a <LanguageString>:
     16a:	04 03 09 04                                         ....

0000016e <ConfigurationDescriptor>:
     16e:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
     17e:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
     18e:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     19e:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

000001ac <DeviceDescriptor>:
     1ac:	12 01 10 01 02 00 00 08 eb 03 44 20 02 00 01 02     ..........D ....
     1bc:	dc 01                                               ..

000001be <__c.2130>:
     1be:	6e 61 6e 00                                         nan.

000001c2 <__c.2128>:
     1c2:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1d2:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1e2:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1f2:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     202:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     212:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     222:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     232:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     242:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     252:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     262:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     272:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     282:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     292:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2a2:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2b2:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002c0 <__ctors_end>:
     2c0:	11 24       	eor	r1, r1
     2c2:	1f be       	out	0x3f, r1	; 63
     2c4:	cf ef       	ldi	r28, 0xFF	; 255
     2c6:	da e0       	ldi	r29, 0x0A	; 10
     2c8:	de bf       	out	0x3e, r29	; 62
     2ca:	cd bf       	out	0x3d, r28	; 61

000002cc <__do_copy_data>:
     2cc:	11 e0       	ldi	r17, 0x01	; 1
     2ce:	a0 e0       	ldi	r26, 0x00	; 0
     2d0:	b1 e0       	ldi	r27, 0x01	; 1
     2d2:	ee ee       	ldi	r30, 0xEE	; 238
     2d4:	f3 e2       	ldi	r31, 0x23	; 35
     2d6:	02 c0       	rjmp	.+4      	; 0x2dc <__do_copy_data+0x10>
     2d8:	05 90       	lpm	r0, Z+
     2da:	0d 92       	st	X+, r0
     2dc:	a6 35       	cpi	r26, 0x56	; 86
     2de:	b1 07       	cpc	r27, r17
     2e0:	d9 f7       	brne	.-10     	; 0x2d8 <__do_copy_data+0xc>

000002e2 <__do_clear_bss>:
     2e2:	21 e0       	ldi	r18, 0x01	; 1
     2e4:	a6 e5       	ldi	r26, 0x56	; 86
     2e6:	b1 e0       	ldi	r27, 0x01	; 1
     2e8:	01 c0       	rjmp	.+2      	; 0x2ec <.do_clear_bss_start>

000002ea <.do_clear_bss_loop>:
     2ea:	1d 92       	st	X+, r1

000002ec <.do_clear_bss_start>:
     2ec:	ae 37       	cpi	r26, 0x7E	; 126
     2ee:	b2 07       	cpc	r27, r18
     2f0:	e1 f7       	brne	.-8      	; 0x2ea <.do_clear_bss_loop>
     2f2:	69 d0       	rcall	.+210    	; 0x3c6 <main>
     2f4:	0c 94 f5 11 	jmp	0x23ea	; 0x23ea <_exit>

000002f8 <__bad_interrupt>:
     2f8:	83 ce       	rjmp	.-762    	; 0x0 <__vectors>

000002fa <Watchdog_Disable>:
// ~~ Watchdog Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// Disables the watchdog timer
static inline void Watchdog_Disable(void) {
	cli();
     2fa:	f8 94       	cli
	wdt_reset();
     2fc:	a8 95       	wdr
	MCUSR &= ~(1 << WDRF);
     2fe:	84 b7       	in	r24, 0x34	; 52
     300:	87 7f       	andi	r24, 0xF7	; 247
     302:	84 bf       	out	0x34, r24	; 52
	WDTCSR |= (1 << WDCE) | (1 << WDE);
     304:	e0 e6       	ldi	r30, 0x60	; 96
     306:	f0 e0       	ldi	r31, 0x00	; 0
     308:	80 81       	ld	r24, Z
     30a:	88 61       	ori	r24, 0x18	; 24
     30c:	80 83       	st	Z, r24
	WDTCSR = 0x00;
     30e:	10 82       	st	Z, r1
	sei();
     310:	78 94       	sei
     312:	08 95       	ret

00000314 <printPGMStr>:
static inline void PRINT_Help(void) {
	printPGMStr(STR_Help_Info);
}

// Print a PGM stored string
static inline void printPGMStr(PGM_P s) {
     314:	cf 93       	push	r28
     316:	df 93       	push	r29
	char c;
	while((c = pgm_read_byte(s++)) != 0) fputc(c, &USBSerialStream);
     318:	fc 01       	movw	r30, r24
     31a:	24 91       	lpm	r18, Z
     31c:	ec 01       	movw	r28, r24
     31e:	21 96       	adiw	r28, 0x01	; 1
     320:	22 23       	and	r18, r18
     322:	41 f0       	breq	.+16     	; 0x334 <printPGMStr+0x20>
     324:	6d e5       	ldi	r22, 0x5D	; 93
     326:	71 e0       	ldi	r23, 0x01	; 1
     328:	82 2f       	mov	r24, r18
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	0e 94 2b 11 	call	0x2256	; 0x2256 <fputc>
     330:	ce 01       	movw	r24, r28
     332:	f2 cf       	rjmp	.-28     	; 0x318 <printPGMStr+0x4>
}
     334:	df 91       	pop	r29
     336:	cf 91       	pop	r28
     338:	08 95       	ret

0000033a <INPUT_Clear>:
// ~~ Command Parsing Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// Flush out our data input buffer, reset our position variable, and print a new prompt.
static inline void INPUT_Clear(void) {
	memset(&DATA_IN[0], 0, sizeof(DATA_IN));
     33a:	e0 91 6b 01 	lds	r30, 0x016B
     33e:	f0 91 6c 01 	lds	r31, 0x016C
     342:	11 82       	std	Z+1, r1	; 0x01
     344:	10 82       	st	Z, r1
	DATA_IN_POS = 0;
     346:	10 92 57 01 	sts	0x0157, r1
	
#ifdef ENABLECOLORS
	fprintf(&USBSerialStream, "\r\n\r\n# \x1b[36m>\x1b[0m ");
     34a:	6d e5       	ldi	r22, 0x5D	; 93
     34c:	71 e0       	ldi	r23, 0x01	; 1
     34e:	83 e2       	ldi	r24, 0x23	; 35
     350:	91 e0       	ldi	r25, 0x01	; 1
     352:	0c 94 5d 11 	jmp	0x22ba	; 0x22ba <fputs>

00000356 <__vector_17>:
// ...

#include "RF_Power_Meter.h"

// Main Scheduling Interrupt
ISR(TIMER1_COMPA_vect){
     356:	1f 92       	push	r1
     358:	0f 92       	push	r0
     35a:	0f b6       	in	r0, 0x3f	; 63
     35c:	0f 92       	push	r0
     35e:	11 24       	eor	r1, r1
     360:	8f 93       	push	r24
     362:	9f 93       	push	r25
     364:	af 93       	push	r26
     366:	bf 93       	push	r27
	timer++;
     368:	80 91 59 01 	lds	r24, 0x0159
     36c:	90 91 5a 01 	lds	r25, 0x015A
     370:	a0 91 5b 01 	lds	r26, 0x015B
     374:	b0 91 5c 01 	lds	r27, 0x015C
     378:	01 96       	adiw	r24, 0x01	; 1
     37a:	a1 1d       	adc	r26, r1
     37c:	b1 1d       	adc	r27, r1
     37e:	80 93 59 01 	sts	0x0159, r24
     382:	90 93 5a 01 	sts	0x015A, r25
     386:	a0 93 5b 01 	sts	0x015B, r26
     38a:	b0 93 5c 01 	sts	0x015C, r27

	if ((timer) % READ_RF_DELAY == 0){ schedule_read_rf = 1; }
     38e:	80 91 59 01 	lds	r24, 0x0159
     392:	90 91 5a 01 	lds	r25, 0x015A
     396:	a0 91 5b 01 	lds	r26, 0x015B
     39a:	b0 91 5c 01 	lds	r27, 0x015C
     39e:	83 70       	andi	r24, 0x03	; 3
     3a0:	99 27       	eor	r25, r25
     3a2:	aa 27       	eor	r26, r26
     3a4:	bb 27       	eor	r27, r27
     3a6:	89 2b       	or	r24, r25
     3a8:	8a 2b       	or	r24, r26
     3aa:	8b 2b       	or	r24, r27
     3ac:	19 f4       	brne	.+6      	; 0x3b4 <__vector_17+0x5e>
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	80 93 58 01 	sts	0x0158, r24

}
     3b4:	bf 91       	pop	r27
     3b6:	af 91       	pop	r26
     3b8:	9f 91       	pop	r25
     3ba:	8f 91       	pop	r24
     3bc:	0f 90       	pop	r0
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	0f 90       	pop	r0
     3c2:	1f 90       	pop	r1
     3c4:	18 95       	reti

000003c6 <main>:

// Main program entry point.
int main(void) {
	// Store our reset vector for reference
	// See ATmega32u4 Datasheet p.59 for values
	BOOT_RESET_VECTOR = MCUSR;
     3c6:	84 b7       	in	r24, 0x34	; 52
     3c8:	80 93 56 01 	sts	0x0156, r24
	MCUSR = 0;
     3cc:	14 be       	out	0x34, r1	; 52

	// Initialize some variables
	int16_t BYTE_IN = -1;
	DATA_IN = malloc(DATA_BUFF_LEN);
     3ce:	80 e2       	ldi	r24, 0x20	; 32
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <malloc>
     3d6:	90 93 6c 01 	sts	0x016C, r25
     3da:	80 93 6b 01 	sts	0x016B, r24

	// Set up timer 1 for 0.25s interrupts
	TCCR1A = 0b00000000; // No pin changes on compare match
     3de:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0b00001010; // Clear timer on compare match, clock /8
     3e2:	8a e0       	ldi	r24, 0x0A	; 10
     3e4:	80 93 81 00 	sts	0x0081, r24
	TCCR1C = 0b00000000; // No forced output compare
     3e8:	10 92 82 00 	sts	0x0082, r1
	OCR1A = 31250; // Set timer clear at this count value
     3ec:	82 e1       	ldi	r24, 0x12	; 18
     3ee:	9a e7       	ldi	r25, 0x7A	; 122
     3f0:	90 93 89 00 	sts	0x0089, r25
     3f4:	80 93 88 00 	sts	0x0088, r24
	TCNT1 = 0;
     3f8:	10 92 85 00 	sts	0x0085, r1
     3fc:	10 92 84 00 	sts	0x0084, r1
	TIMSK1 = 0b00000010; // Enable interrupts on the A compare match
     400:	82 e0       	ldi	r24, 0x02	; 2
     402:	80 93 6f 00 	sts	0x006F, r24

	Watchdog_Disable();
     406:	79 df       	rcall	.-270    	; 0x2fa <Watchdog_Disable>
	wdt_reset();
     408:	a8 95       	wdr
	sei();
}

// Enables the watchdog timer
static inline void Watchdog_Enable(void) {
	cli();
     40a:	f8 94       	cli
	wdt_reset();
     40c:	a8 95       	wdr
	WDTCSR |= (1 << WDCE) | (1 << WDE);
     40e:	80 91 60 00 	lds	r24, 0x0060
     412:	88 61       	ori	r24, 0x18	; 24
     414:	80 93 60 00 	sts	0x0060, r24
	WDTCSR = (1 << WDE) | (1 << WDP3) | (1 << WDP0);
     418:	89 e2       	ldi	r24, 0x29	; 41
     41a:	80 93 60 00 	sts	0x0060, r24
	sei();
     41e:	78 94       	sei
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     420:	94 e0       	ldi	r25, 0x04	; 4
     422:	80 e8       	ldi	r24, 0x80	; 128
     424:	0f b6       	in	r0, 0x3f	; 63
     426:	f8 94       	cli
     428:	80 93 61 00 	sts	0x0061, r24
     42c:	90 93 61 00 	sts	0x0061, r25
     430:	0f be       	out	0x3f, r0	; 63
	// Divide 16MHz crystal down to 1MHz for CPU clock.
	clock_prescale_set(clock_div_16);

	// Init USB hardware and create a regular character stream for the
	// USB interface so that it can be used with the stdio.h functions
	USB_Init();
     432:	3d d3       	rcall	.+1658   	; 0xaae <USB_Init>
	CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
     434:	6d e5       	ldi	r22, 0x5D	; 93
     436:	71 e0       	ldi	r23, 0x01	; 1
     438:	82 e0       	ldi	r24, 0x02	; 2
     43a:	91 e0       	ldi	r25, 0x01	; 1
     43c:	a7 d6       	rcall	.+3406   	; 0x118c <CDC_Device_CreateStream>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     43e:	78 94       	sei

	// Enable interrupts
	GlobalInterruptEnable();

	// Print startup message
	printPGMStr(PSTR(SOFTWARE_STR));
     440:	8c ea       	ldi	r24, 0xAC	; 172
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	67 df       	rcall	.-306    	; 0x314 <printPGMStr>
	fprintf(&USBSerialStream, " V%s,%s", HARDWARE_VERS, SOFTWARE_VERS);
     446:	85 e3       	ldi	r24, 0x35	; 53
     448:	91 e0       	ldi	r25, 0x01	; 1
     44a:	9f 93       	push	r25
     44c:	8f 93       	push	r24
     44e:	89 e3       	ldi	r24, 0x39	; 57
     450:	91 e0       	ldi	r25, 0x01	; 1
     452:	9f 93       	push	r25
     454:	8f 93       	push	r24
     456:	8d e3       	ldi	r24, 0x3D	; 61
     458:	91 e0       	ldi	r25, 0x01	; 1
     45a:	9f 93       	push	r25
     45c:	8f 93       	push	r24
     45e:	8d e5       	ldi	r24, 0x5D	; 93
     460:	91 e0       	ldi	r25, 0x01	; 1
     462:	9f 93       	push	r25
     464:	8f 93       	push	r24
     466:	0e 94 1c 11 	call	0x2238	; 0x2238 <fprintf>
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// Run the LUFA USB tasks (except reading)
static inline void run_lufa(void) {
	//CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
	CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     46a:	82 e0       	ldi	r24, 0x02	; 2
     46c:	91 e0       	ldi	r25, 0x01	; 1
     46e:	3a d6       	rcall	.+3188   	; 0x10e4 <CDC_Device_USBTask>
	USB_USBTask();
     470:	93 d5       	rcall	.+2854   	; 0xf98 <USB_USBTask>
	printPGMStr(PSTR(SOFTWARE_STR));
	fprintf(&USBSerialStream, " V%s,%s", HARDWARE_VERS, SOFTWARE_VERS);
	run_lufa();

	// Configure LED Pin
	DDRF |= (1 << LED);
     472:	86 9a       	sbi	0x10, 6	; 16
// Set the output LED state
static inline void Set_LED(int8_t state) {
	if (state == 1) {
		PORTF |= (1 << LED);
	} else {
		PORTF &= ~(1 << LED);
     474:	8e 98       	cbi	0x11, 6	; 17
	// Configure LED Pin
	DDRF |= (1 << LED);
	Set_LED(0);

	// Enable the ADC
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); // Enable ADC, clocked by /128 divider
     476:	87 e8       	ldi	r24, 0x87	; 135
     478:	80 93 7a 00 	sts	0x007A, r24
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// Run the LUFA USB tasks (except reading)
static inline void run_lufa(void) {
	//CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
	CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     47c:	82 e0       	ldi	r24, 0x02	; 2
     47e:	91 e0       	ldi	r25, 0x01	; 1
     480:	31 d6       	rcall	.+3170   	; 0x10e4 <CDC_Device_USBTask>
	USB_USBTask();
     482:	8a d5       	rcall	.+2836   	; 0xf98 <USB_USBTask>
	// Enable the ADC
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); // Enable ADC, clocked by /128 divider
	
	run_lufa();

	INPUT_Clear();
     484:	5a df       	rcall	.-332    	; 0x33a <INPUT_Clear>
     486:	8d b7       	in	r24, 0x3d	; 61
     488:	9e b7       	in	r25, 0x3e	; 62
     48a:	08 96       	adiw	r24, 0x08	; 8
     48c:	0f b6       	in	r0, 0x3f	; 63
     48e:	f8 94       	cli
     490:	9e bf       	out	0x3e, r25	; 62
     492:	0f be       	out	0x3f, r0	; 63
     494:	8d bf       	out	0x3d, r24	; 61
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// Dump debugging data
static inline void DEBUG_Dump(void) {
	// Print hardware and software versions
	fprintf(&USBSerialStream, "\r\nV%s,%s", HARDWARE_VERS, SOFTWARE_VERS);
     496:	c5 e3       	ldi	r28, 0x35	; 53
     498:	d1 e0       	ldi	r29, 0x01	; 1
     49a:	09 e3       	ldi	r16, 0x39	; 57
     49c:	11 e0       	ldi	r17, 0x01	; 1
     49e:	85 e4       	ldi	r24, 0x45	; 69
     4a0:	e8 2e       	mov	r14, r24
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	f8 2e       	mov	r15, r24
			// Collect ADC_AVG_POINTS samples and average them
			uint16_t average = 0;
			for (uint8_t i = 0; i < ADC_AVG_POINTS; i++) {
				average += ADC_Read_RF();
			}
			average = average / ADC_AVG_POINTS;
     4a6:	95 e0       	ldi	r25, 0x05	; 5
     4a8:	a9 2e       	mov	r10, r25
     4aa:	b1 2c       	mov	r11, r1
			float temp = (average * (ADC_V_REF / 1024.0));
			
			// Convert the voltage value into a dBm reading
			temp = (temp / 0.0173) - 68 + 19.95;
			
			fprintf(&USBSerialStream, "\r\n%.2f", temp);
     4ac:	2e e4       	ldi	r18, 0x4E	; 78
     4ae:	c2 2e       	mov	r12, r18
     4b0:	21 e0       	ldi	r18, 0x01	; 1
     4b2:	d2 2e       	mov	r13, r18
// ~~ Main system loop
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	for (;;) {
		// Read a byte from the USB serial stream
		BYTE_IN = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     4b4:	82 e0       	ldi	r24, 0x02	; 2
     4b6:	91 e0       	ldi	r25, 0x01	; 1
     4b8:	2b d6       	rcall	.+3158   	; 0x1110 <CDC_Device_ReceiveByte>
     4ba:	4c 01       	movw	r8, r24

		// USB Serial stream will return <0 if no bytes are available.
		if (BYTE_IN >= 0) {
     4bc:	97 fd       	sbrc	r25, 7
     4be:	9b c0       	rjmp	.+310    	; 0x5f6 <main+0x230>
			// Echo the char we just received back out the serial stream so the user's 
			// console will display it.
			fputc(BYTE_IN, &USBSerialStream);
     4c0:	6d e5       	ldi	r22, 0x5D	; 93
     4c2:	71 e0       	ldi	r23, 0x01	; 1
     4c4:	0e 94 2b 11 	call	0x2256	; 0x2256 <fputc>
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// Set the output LED state
static inline void Set_LED(int8_t state) {
	if (state == 1) {
		PORTF |= (1 << LED);
     4c8:	8e 9a       	sbi	0x11, 6	; 17
			fputc(BYTE_IN, &USBSerialStream);

			Set_LED(1);

			// Switch on the input byte to determine what is is and what to do.
			switch (BYTE_IN) {
     4ca:	9d e0       	ldi	r25, 0x0D	; 13
     4cc:	89 16       	cp	r8, r25
     4ce:	91 04       	cpc	r9, r1
     4d0:	99 f1       	breq	.+102    	; 0x538 <main+0x172>
     4d2:	74 f4       	brge	.+28     	; 0x4f0 <main+0x12a>
     4d4:	98 e0       	ldi	r25, 0x08	; 8
     4d6:	89 16       	cp	r8, r25
     4d8:	91 04       	cpc	r9, r1
     4da:	d9 f0       	breq	.+54     	; 0x512 <main+0x14c>
     4dc:	8a e0       	ldi	r24, 0x0A	; 10
     4de:	88 16       	cp	r8, r24
     4e0:	91 04       	cpc	r9, r1
     4e2:	51 f1       	breq	.+84     	; 0x538 <main+0x172>
     4e4:	93 e0       	ldi	r25, 0x03	; 3
     4e6:	89 16       	cp	r8, r25
     4e8:	91 04       	cpc	r9, r1
     4ea:	09 f4       	brne	.+2      	; 0x4ee <main+0x128>
     4ec:	82 c0       	rjmp	.+260    	; 0x5f2 <main+0x22c>
     4ee:	66 c0       	rjmp	.+204    	; 0x5bc <main+0x1f6>
     4f0:	8e e1       	ldi	r24, 0x1E	; 30
     4f2:	88 16       	cp	r8, r24
     4f4:	91 04       	cpc	r9, r1
     4f6:	09 f4       	brne	.+2      	; 0x4fa <main+0x134>
     4f8:	5a c0       	rjmp	.+180    	; 0x5ae <main+0x1e8>
     4fa:	9f e7       	ldi	r25, 0x7F	; 127
     4fc:	89 16       	cp	r8, r25
     4fe:	91 04       	cpc	r9, r1
     500:	41 f0       	breq	.+16     	; 0x512 <main+0x14c>
     502:	8d e1       	ldi	r24, 0x1D	; 29
     504:	88 16       	cp	r8, r24
     506:	91 04       	cpc	r9, r1
     508:	09 f0       	breq	.+2      	; 0x50c <main+0x146>
     50a:	58 c0       	rjmp	.+176    	; 0x5bc <main+0x1f6>
     50c:	81 2c       	mov	r8, r1
     50e:	91 2c       	mov	r9, r1
     510:	42 c0       	rjmp	.+132    	; 0x596 <main+0x1d0>
				case 8:
				case 127:
					// Handle Backspace chars.
					if (DATA_IN_POS > 0){
     512:	80 91 57 01 	lds	r24, 0x0157
     516:	88 23       	and	r24, r24
     518:	09 f4       	brne	.+2      	; 0x51c <main+0x156>
     51a:	6c c0       	rjmp	.+216    	; 0x5f4 <main+0x22e>
						DATA_IN_POS--;
     51c:	81 50       	subi	r24, 0x01	; 1
     51e:	80 93 57 01 	sts	0x0157, r24
						DATA_IN[DATA_IN_POS] = 0;
     522:	e0 91 6b 01 	lds	r30, 0x016B
     526:	f0 91 6c 01 	lds	r31, 0x016C
     52a:	e8 0f       	add	r30, r24
     52c:	f1 1d       	adc	r31, r1
     52e:	10 82       	st	Z, r1
						printPGMStr(STR_Backspace);
     530:	8c ec       	ldi	r24, 0xCC	; 204
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	ef de       	rcall	.-546    	; 0x314 <printPGMStr>
     536:	5e c0       	rjmp	.+188    	; 0x5f4 <main+0x22e>
}

// We've gotten a new command, parse out what they want.
static inline void INPUT_Parse(void) {
	// HELP - Print a basic help menu
	if (strncasecmp_P(DATA_IN, STR_Command_HELP, 4) == 0) {
     538:	80 90 6b 01 	lds	r8, 0x016B
     53c:	90 90 6c 01 	lds	r9, 0x016C
     540:	44 e0       	ldi	r20, 0x04	; 4
     542:	50 e0       	ldi	r21, 0x00	; 0
     544:	67 ec       	ldi	r22, 0xC7	; 199
     546:	70 e0       	ldi	r23, 0x00	; 0
     548:	c4 01       	movw	r24, r8
     54a:	0e 94 ee 10 	call	0x21dc	; 0x21dc <strncasecmp_P>
     54e:	89 2b       	or	r24, r25
     550:	19 f4       	brne	.+6      	; 0x558 <main+0x192>

}

// Print a quick help command
static inline void PRINT_Help(void) {
	printPGMStr(STR_Help_Info);
     552:	8f ee       	ldi	r24, 0xEF	; 239
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	4c c0       	rjmp	.+152    	; 0x5f0 <main+0x22a>
	if (strncasecmp_P(DATA_IN, STR_Command_HELP, 4) == 0) {
		PRINT_Help();
		return;
	}
	// DEBUG - Print a report of debugging information, including EEPROM variables
	if (strncasecmp_P(DATA_IN, STR_Command_DEBUG, 10) == 0) {
     558:	4a e0       	ldi	r20, 0x0A	; 10
     55a:	50 e0       	ldi	r21, 0x00	; 0
     55c:	61 ec       	ldi	r22, 0xC1	; 193
     55e:	70 e0       	ldi	r23, 0x00	; 0
     560:	c4 01       	movw	r24, r8
     562:	0e 94 ee 10 	call	0x21dc	; 0x21dc <strncasecmp_P>
     566:	89 2b       	or	r24, r25
     568:	09 f0       	breq	.+2      	; 0x56c <main+0x1a6>
     56a:	40 c0       	rjmp	.+128    	; 0x5ec <main+0x226>
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// Dump debugging data
static inline void DEBUG_Dump(void) {
	// Print hardware and software versions
	fprintf(&USBSerialStream, "\r\nV%s,%s", HARDWARE_VERS, SOFTWARE_VERS);
     56c:	df 93       	push	r29
     56e:	cf 93       	push	r28
     570:	1f 93       	push	r17
     572:	0f 93       	push	r16
     574:	ff 92       	push	r15
     576:	ef 92       	push	r14
     578:	8d e5       	ldi	r24, 0x5D	; 93
     57a:	91 e0       	ldi	r25, 0x01	; 1
     57c:	9f 93       	push	r25
     57e:	8f 93       	push	r24
     580:	0e 94 1c 11 	call	0x2238	; 0x2238 <fprintf>
     584:	8d b7       	in	r24, 0x3d	; 61
     586:	9e b7       	in	r25, 0x3e	; 62
     588:	08 96       	adiw	r24, 0x08	; 8
     58a:	0f b6       	in	r0, 0x3f	; 63
     58c:	f8 94       	cli
     58e:	9e bf       	out	0x3e, r25	; 62
     590:	0f be       	out	0x3f, r0	; 63
     592:	8d bf       	out	0x3d, r24	; 61
     594:	2e c0       	rjmp	.+92     	; 0x5f2 <main+0x22c>
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

// Reset all EEPROM values to 255
static inline void EEPROM_Reset(void) {
	for (uint16_t i = 0; i < 512; i++) {
		eeprom_update_byte((uint8_t*)(i), 255);
     596:	6f ef       	ldi	r22, 0xFF	; 255
     598:	c4 01       	movw	r24, r8
     59a:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__eeupd_byte_m32u4>
// ~~ EEPROM Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

// Reset all EEPROM values to 255
static inline void EEPROM_Reset(void) {
	for (uint16_t i = 0; i < 512; i++) {
     59e:	9f ef       	ldi	r25, 0xFF	; 255
     5a0:	89 1a       	sub	r8, r25
     5a2:	99 0a       	sbc	r9, r25
     5a4:	81 14       	cp	r8, r1
     5a6:	82 e0       	ldi	r24, 0x02	; 2
     5a8:	98 06       	cpc	r9, r24
     5aa:	a9 f7       	brne	.-22     	; 0x596 <main+0x1d0>
     5ac:	22 c0       	rjmp	.+68     	; 0x5f2 <main+0x22c>
					break;
					
				case 30:
					// Ctrl-^ jump into the bootloader
					// Disable the watchdog timer
					Watchdog_Disable();
     5ae:	a5 de       	rcall	.-694    	; 0x2fa <Watchdog_Disable>
					
					bootloader();
     5b0:	e0 91 00 01 	lds	r30, 0x0100
     5b4:	f0 91 01 01 	lds	r31, 0x0101
     5b8:	09 95       	icall
					break; // We should never get here...
     5ba:	1c c0       	rjmp	.+56     	; 0x5f4 <main+0x22e>

				default:
					// Normal char buffering
					if (DATA_IN_POS < (DATA_BUFF_LEN - 1)) {
     5bc:	80 91 57 01 	lds	r24, 0x0157
     5c0:	8f 31       	cpi	r24, 0x1F	; 31
     5c2:	a0 f4       	brcc	.+40     	; 0x5ec <main+0x226>
						DATA_IN[DATA_IN_POS] = BYTE_IN;
     5c4:	e0 91 6b 01 	lds	r30, 0x016B
     5c8:	f0 91 6c 01 	lds	r31, 0x016C
     5cc:	e8 0f       	add	r30, r24
     5ce:	f1 1d       	adc	r31, r1
     5d0:	80 82       	st	Z, r8
						DATA_IN_POS++;
     5d2:	80 91 57 01 	lds	r24, 0x0157
     5d6:	8f 5f       	subi	r24, 0xFF	; 255
     5d8:	80 93 57 01 	sts	0x0157, r24
						DATA_IN[DATA_IN_POS] = 0;
     5dc:	e0 91 6b 01 	lds	r30, 0x016B
     5e0:	f0 91 6c 01 	lds	r31, 0x016C
     5e4:	e8 0f       	add	r30, r24
     5e6:	f1 1d       	adc	r31, r1
     5e8:	10 82       	st	Z, r1
     5ea:	04 c0       	rjmp	.+8      	; 0x5f4 <main+0x22e>
					} else {
						// Input is too long.
						printPGMStr(STR_Unrecognized);
     5ec:	84 ed       	ldi	r24, 0xD4	; 212
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	91 de       	rcall	.-734    	; 0x314 <printPGMStr>
						INPUT_Clear();
     5f2:	a3 de       	rcall	.-698    	; 0x33a <INPUT_Clear>
// Set the output LED state
static inline void Set_LED(int8_t state) {
	if (state == 1) {
		PORTF |= (1 << LED);
	} else {
		PORTF &= ~(1 << LED);
     5f4:	8e 98       	cbi	0x11, 6	; 17
			
			Set_LED(0);
		}
		
		// Check for above threshold current usage
		if (schedule_read_rf) {
     5f6:	80 91 58 01 	lds	r24, 0x0158
     5fa:	88 23       	and	r24, r24
     5fc:	09 f4       	brne	.+2      	; 0x600 <main+0x23a>
     5fe:	51 c0       	rjmp	.+162    	; 0x6a2 <main+0x2dc>
     600:	45 e0       	ldi	r20, 0x05	; 5
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	90 e0       	ldi	r25, 0x00	; 0
// ~~ ADC Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// Read RF Power Value
static inline int16_t ADC_Read_RF(void) {
	ADMUX = 0b00000000;
     606:	10 92 7c 00 	sts	0x007C, r1
	ADCSRB = 0b00000000;
     60a:	10 92 7b 00 	sts	0x007B, r1
	ADCSRA |= (1<<ADSC); // Start first conversion (throw away)
     60e:	20 91 7a 00 	lds	r18, 0x007A
     612:	20 64       	ori	r18, 0x40	; 64
     614:	20 93 7a 00 	sts	0x007A, r18
	while (ADCSRA & (1<<ADSC)); // Wait for conversion to complete
     618:	20 91 7a 00 	lds	r18, 0x007A
     61c:	26 fd       	sbrc	r18, 6
     61e:	fc cf       	rjmp	.-8      	; 0x618 <main+0x252>
	ADCSRA |= (1<<ADSC); // Start second conversion (valid)
     620:	20 91 7a 00 	lds	r18, 0x007A
     624:	20 64       	ori	r18, 0x40	; 64
     626:	20 93 7a 00 	sts	0x007A, r18
	while (ADCSRA & (1<<ADSC)); // Wait for conversion to complete
     62a:	20 91 7a 00 	lds	r18, 0x007A
     62e:	26 fd       	sbrc	r18, 6
     630:	fc cf       	rjmp	.-8      	; 0x62a <main+0x264>
	return ADCW;
     632:	20 91 78 00 	lds	r18, 0x0078
     636:	30 91 79 00 	lds	r19, 0x0079
		// Check for above threshold current usage
		if (schedule_read_rf) {
			// Collect ADC_AVG_POINTS samples and average them
			uint16_t average = 0;
			for (uint8_t i = 0; i < ADC_AVG_POINTS; i++) {
				average += ADC_Read_RF();
     63a:	82 0f       	add	r24, r18
     63c:	93 1f       	adc	r25, r19
     63e:	41 50       	subi	r20, 0x01	; 1
		
		// Check for above threshold current usage
		if (schedule_read_rf) {
			// Collect ADC_AVG_POINTS samples and average them
			uint16_t average = 0;
			for (uint8_t i = 0; i < ADC_AVG_POINTS; i++) {
     640:	11 f7       	brne	.-60     	; 0x606 <main+0x240>
				average += ADC_Read_RF();
			}
			average = average / ADC_AVG_POINTS;
     642:	b5 01       	movw	r22, r10
     644:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <__udivmodhi4>
			
			// Convert the average reading into a voltage value referenced on ADC_V_REF
			float temp = (average * (ADC_V_REF / 1024.0));
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	30 d7       	rcall	.+3680   	; 0x14ae <__floatunsisf>
     64e:	2a e9       	ldi	r18, 0x9A	; 154
     650:	39 e9       	ldi	r19, 0x99	; 153
     652:	49 e9       	ldi	r20, 0x99	; 153
     654:	5a e3       	ldi	r21, 0x3A	; 58
     656:	b9 d7       	rcall	.+3954   	; 0x15ca <__mulsf3>
			
			// Convert the voltage value into a dBm reading
			temp = (temp / 0.0173) - 68 + 19.95;
     658:	2b eb       	ldi	r18, 0xBB	; 187
     65a:	38 eb       	ldi	r19, 0xB8	; 184
     65c:	4d e8       	ldi	r20, 0x8D	; 141
     65e:	5c e3       	ldi	r21, 0x3C	; 60
     660:	be d6       	rcall	.+3452   	; 0x13de <__divsf3>
     662:	20 e0       	ldi	r18, 0x00	; 0
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	48 e8       	ldi	r20, 0x88	; 136
     668:	52 e4       	ldi	r21, 0x42	; 66
     66a:	54 d6       	rcall	.+3240   	; 0x1314 <__subsf3>
     66c:	2a e9       	ldi	r18, 0x9A	; 154
     66e:	39 e9       	ldi	r19, 0x99	; 153
     670:	4f e9       	ldi	r20, 0x9F	; 159
     672:	51 e4       	ldi	r21, 0x41	; 65
     674:	50 d6       	rcall	.+3232   	; 0x1316 <__addsf3>
			
			fprintf(&USBSerialStream, "\r\n%.2f", temp);
     676:	9f 93       	push	r25
     678:	8f 93       	push	r24
     67a:	7f 93       	push	r23
     67c:	6f 93       	push	r22
     67e:	df 92       	push	r13
     680:	cf 92       	push	r12
     682:	8d e5       	ldi	r24, 0x5D	; 93
     684:	91 e0       	ldi	r25, 0x01	; 1
     686:	9f 93       	push	r25
     688:	8f 93       	push	r24
     68a:	0e 94 1c 11 	call	0x2238	; 0x2238 <fprintf>
			schedule_read_rf = 0;
     68e:	10 92 58 01 	sts	0x0158, r1
     692:	8d b7       	in	r24, 0x3d	; 61
     694:	9e b7       	in	r25, 0x3e	; 62
     696:	08 96       	adiw	r24, 0x08	; 8
     698:	0f b6       	in	r0, 0x3f	; 63
     69a:	f8 94       	cli
     69c:	9e bf       	out	0x3e, r25	; 62
     69e:	0f be       	out	0x3f, r0	; 63
     6a0:	8d bf       	out	0x3d, r24	; 61
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// Run the LUFA USB tasks (except reading)
static inline void run_lufa(void) {
	//CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
	CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     6a2:	82 e0       	ldi	r24, 0x02	; 2
     6a4:	91 e0       	ldi	r25, 0x01	; 1
     6a6:	1e d5       	rcall	.+2620   	; 0x10e4 <CDC_Device_USBTask>
	USB_USBTask();
     6a8:	77 d4       	rcall	.+2286   	; 0xf98 <USB_USBTask>
		
		// Keep the LUFA USB stuff fed regularly.
		run_lufa();
		
		// Reset the watchdog
		wdt_reset();
     6aa:	a8 95       	wdr
	}
     6ac:	03 cf       	rjmp	.-506    	; 0x4b4 <main+0xee>

000006ae <EVENT_USB_Device_Connect>:
	CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
	USB_USBTask();
}

// Event handler for the library USB Connection event.
void EVENT_USB_Device_Connect(void) {
     6ae:	08 95       	ret

000006b0 <EVENT_USB_Device_Disconnect>:
	// We're enumerated. Act on that as desired.
}

// Event handler for the library USB Disconnection event.
void EVENT_USB_Device_Disconnect(void) {
     6b0:	08 95       	ret

000006b2 <EVENT_USB_Device_ConfigurationChanged>:
}

// Event handler for the library USB Configuration Changed event.
void EVENT_USB_Device_ConfigurationChanged(void) {
	bool ConfigSuccess = true;
	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     6b2:	82 e0       	ldi	r24, 0x02	; 2
     6b4:	91 e0       	ldi	r25, 0x01	; 1
     6b6:	8c c4       	rjmp	.+2328   	; 0xfd0 <CDC_Device_ConfigureEndpoints>

000006b8 <EVENT_USB_Device_ControlRequest>:
	// USB is ready. Act on that as desired.
}

// Event handler for the library USB Control Request reception event.
void EVENT_USB_Device_ControlRequest(void) {
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     6b8:	82 e0       	ldi	r24, 0x02	; 2
     6ba:	91 e0       	ldi	r25, 0x01	; 1
     6bc:	7b c5       	rjmp	.+2806   	; 0x11b4 <CDC_Device_ProcessControlRequest>

000006be <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
     6be:	29 2f       	mov	r18, r25
     6c0:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     6c2:	22 30       	cpi	r18, 0x02	; 2
     6c4:	31 05       	cpc	r19, r1
     6c6:	59 f0       	breq	.+22     	; 0x6de <CALLBACK_USB_GetDescriptor+0x20>
     6c8:	23 30       	cpi	r18, 0x03	; 3
     6ca:	31 05       	cpc	r19, r1
     6cc:	69 f0       	breq	.+26     	; 0x6e8 <CALLBACK_USB_GetDescriptor+0x2a>
     6ce:	21 30       	cpi	r18, 0x01	; 1
     6d0:	31 05       	cpc	r19, r1
     6d2:	f9 f4       	brne	.+62     	; 0x712 <CALLBACK_USB_GetDescriptor+0x54>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     6d4:	82 e1       	ldi	r24, 0x12	; 18
     6d6:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     6d8:	2c ea       	ldi	r18, 0xAC	; 172
     6da:	31 e0       	ldi	r19, 0x01	; 1
     6dc:	1e c0       	rjmp	.+60     	; 0x71a <CALLBACK_USB_GetDescriptor+0x5c>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     6de:	8e e3       	ldi	r24, 0x3E	; 62
     6e0:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     6e2:	2e e6       	ldi	r18, 0x6E	; 110
     6e4:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     6e6:	19 c0       	rjmp	.+50     	; 0x71a <CALLBACK_USB_GetDescriptor+0x5c>
     6e8:	99 27       	eor	r25, r25
		case DTYPE_String:
			switch (DescriptorNumber)
     6ea:	81 30       	cpi	r24, 0x01	; 1
     6ec:	91 05       	cpc	r25, r1
     6ee:	41 f0       	breq	.+16     	; 0x700 <CALLBACK_USB_GetDescriptor+0x42>
     6f0:	82 30       	cpi	r24, 0x02	; 2
     6f2:	91 05       	cpc	r25, r1
     6f4:	41 f0       	breq	.+16     	; 0x706 <CALLBACK_USB_GetDescriptor+0x48>
     6f6:	89 2b       	or	r24, r25
     6f8:	61 f4       	brne	.+24     	; 0x712 <CALLBACK_USB_GetDescriptor+0x54>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     6fa:	ea e6       	ldi	r30, 0x6A	; 106
     6fc:	f1 e0       	ldi	r31, 0x01	; 1
     6fe:	05 c0       	rjmp	.+10     	; 0x70a <CALLBACK_USB_GetDescriptor+0x4c>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     700:	ea e3       	ldi	r30, 0x3A	; 58
     702:	f1 e0       	ldi	r31, 0x01	; 1
     704:	02 c0       	rjmp	.+4      	; 0x70a <CALLBACK_USB_GetDescriptor+0x4c>
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     706:	e0 e1       	ldi	r30, 0x10	; 16
     708:	f1 e0       	ldi	r31, 0x01	; 1
     70a:	84 91       	lpm	r24, Z
     70c:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     70e:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     710:	04 c0       	rjmp	.+8      	; 0x71a <CALLBACK_USB_GetDescriptor+0x5c>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     716:	20 e0       	ldi	r18, 0x00	; 0
     718:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     71a:	fa 01       	movw	r30, r20
     71c:	31 83       	std	Z+1, r19	; 0x01
     71e:	20 83       	st	Z, r18
	return Size;
}
     720:	08 95       	ret

00000722 <Endpoint_Write_Control_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     722:	20 91 78 01 	lds	r18, 0x0178
     726:	30 91 79 01 	lds	r19, 0x0179
     72a:	26 17       	cp	r18, r22
     72c:	37 07       	cpc	r19, r23
     72e:	48 f0       	brcs	.+18     	; 0x742 <Endpoint_Write_Control_Stream_LE+0x20>
     730:	61 15       	cp	r22, r1
     732:	71 05       	cpc	r23, r1
     734:	39 f4       	brne	.+14     	; 0x744 <Endpoint_Write_Control_Stream_LE+0x22>
     736:	20 91 e8 00 	lds	r18, 0x00E8
     73a:	2e 77       	andi	r18, 0x7E	; 126
     73c:	20 93 e8 00 	sts	0x00E8, r18
     740:	01 c0       	rjmp	.+2      	; 0x744 <Endpoint_Write_Control_Stream_LE+0x22>
     742:	b9 01       	movw	r22, r18
     744:	fc 01       	movw	r30, r24
     746:	20 e0       	ldi	r18, 0x00	; 0
     748:	61 15       	cp	r22, r1
     74a:	71 05       	cpc	r23, r1
     74c:	b9 f1       	breq	.+110    	; 0x7bc <Endpoint_Write_Control_Stream_LE+0x9a>
     74e:	80 91 71 01 	lds	r24, 0x0171
     752:	88 23       	and	r24, r24
     754:	09 f4       	brne	.+2      	; 0x758 <Endpoint_Write_Control_Stream_LE+0x36>
     756:	40 c0       	rjmp	.+128    	; 0x7d8 <Endpoint_Write_Control_Stream_LE+0xb6>
     758:	85 30       	cpi	r24, 0x05	; 5
     75a:	09 f4       	brne	.+2      	; 0x75e <Endpoint_Write_Control_Stream_LE+0x3c>
     75c:	3f c0       	rjmp	.+126    	; 0x7dc <Endpoint_Write_Control_Stream_LE+0xba>
     75e:	80 91 e8 00 	lds	r24, 0x00E8
     762:	83 fd       	sbrc	r24, 3
     764:	3d c0       	rjmp	.+122    	; 0x7e0 <Endpoint_Write_Control_Stream_LE+0xbe>
     766:	80 91 e8 00 	lds	r24, 0x00E8
     76a:	82 ff       	sbrs	r24, 2
     76c:	06 c0       	rjmp	.+12     	; 0x77a <Endpoint_Write_Control_Stream_LE+0x58>
     76e:	80 91 e8 00 	lds	r24, 0x00E8
     772:	82 ff       	sbrs	r24, 2
     774:	26 c0       	rjmp	.+76     	; 0x7c2 <Endpoint_Write_Control_Stream_LE+0xa0>
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	08 95       	ret
     77a:	80 91 e8 00 	lds	r24, 0x00E8
     77e:	80 ff       	sbrs	r24, 0
     780:	e3 cf       	rjmp	.-58     	; 0x748 <Endpoint_Write_Control_Stream_LE+0x26>
     782:	20 91 f3 00 	lds	r18, 0x00F3
     786:	80 91 f2 00 	lds	r24, 0x00F2
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	92 2b       	or	r25, r18
     78e:	61 15       	cp	r22, r1
     790:	71 05       	cpc	r23, r1
     792:	51 f0       	breq	.+20     	; 0x7a8 <Endpoint_Write_Control_Stream_LE+0x86>
     794:	88 30       	cpi	r24, 0x08	; 8
     796:	91 05       	cpc	r25, r1
     798:	38 f4       	brcc	.+14     	; 0x7a8 <Endpoint_Write_Control_Stream_LE+0x86>
     79a:	21 91       	ld	r18, Z+
     79c:	20 93 f1 00 	sts	0x00F1, r18
     7a0:	61 50       	subi	r22, 0x01	; 1
     7a2:	71 09       	sbc	r23, r1
     7a4:	01 96       	adiw	r24, 0x01	; 1
     7a6:	f3 cf       	rjmp	.-26     	; 0x78e <Endpoint_Write_Control_Stream_LE+0x6c>
     7a8:	21 e0       	ldi	r18, 0x01	; 1
     7aa:	08 97       	sbiw	r24, 0x08	; 8
     7ac:	09 f0       	breq	.+2      	; 0x7b0 <Endpoint_Write_Control_Stream_LE+0x8e>
     7ae:	20 e0       	ldi	r18, 0x00	; 0
     7b0:	80 91 e8 00 	lds	r24, 0x00E8
     7b4:	8e 77       	andi	r24, 0x7E	; 126
     7b6:	80 93 e8 00 	sts	0x00E8, r24
     7ba:	c6 cf       	rjmp	.-116    	; 0x748 <Endpoint_Write_Control_Stream_LE+0x26>
     7bc:	21 11       	cpse	r18, r1
     7be:	c7 cf       	rjmp	.-114    	; 0x74e <Endpoint_Write_Control_Stream_LE+0x2c>
     7c0:	d6 cf       	rjmp	.-84     	; 0x76e <Endpoint_Write_Control_Stream_LE+0x4c>
     7c2:	80 91 71 01 	lds	r24, 0x0171
     7c6:	88 23       	and	r24, r24
     7c8:	39 f0       	breq	.+14     	; 0x7d8 <Endpoint_Write_Control_Stream_LE+0xb6>
     7ca:	85 30       	cpi	r24, 0x05	; 5
     7cc:	39 f0       	breq	.+14     	; 0x7dc <Endpoint_Write_Control_Stream_LE+0xba>
     7ce:	80 91 e8 00 	lds	r24, 0x00E8
     7d2:	83 ff       	sbrs	r24, 3
     7d4:	cc cf       	rjmp	.-104    	; 0x76e <Endpoint_Write_Control_Stream_LE+0x4c>
     7d6:	04 c0       	rjmp	.+8      	; 0x7e0 <Endpoint_Write_Control_Stream_LE+0xbe>
     7d8:	82 e0       	ldi	r24, 0x02	; 2
     7da:	08 95       	ret
     7dc:	83 e0       	ldi	r24, 0x03	; 3
     7de:	08 95       	ret
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	08 95       	ret

000007e4 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     7e4:	20 91 78 01 	lds	r18, 0x0178
     7e8:	30 91 79 01 	lds	r19, 0x0179
     7ec:	26 17       	cp	r18, r22
     7ee:	37 07       	cpc	r19, r23
     7f0:	48 f0       	brcs	.+18     	; 0x804 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     7f2:	61 15       	cp	r22, r1
     7f4:	71 05       	cpc	r23, r1
     7f6:	39 f4       	brne	.+14     	; 0x806 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     7f8:	20 91 e8 00 	lds	r18, 0x00E8
     7fc:	2e 77       	andi	r18, 0x7E	; 126
     7fe:	20 93 e8 00 	sts	0x00E8, r18
     802:	01 c0       	rjmp	.+2      	; 0x806 <Endpoint_Write_Control_PStream_LE+0x22>
     804:	b9 01       	movw	r22, r18
     806:	fc 01       	movw	r30, r24
     808:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	c1 f1       	breq	.+112    	; 0x880 <Endpoint_Write_Control_PStream_LE+0x9c>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     810:	80 91 71 01 	lds	r24, 0x0171

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     814:	88 23       	and	r24, r24
     816:	09 f4       	brne	.+2      	; 0x81a <Endpoint_Write_Control_PStream_LE+0x36>
     818:	41 c0       	rjmp	.+130    	; 0x89c <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     81a:	85 30       	cpi	r24, 0x05	; 5
     81c:	09 f4       	brne	.+2      	; 0x820 <Endpoint_Write_Control_PStream_LE+0x3c>
     81e:	40 c0       	rjmp	.+128    	; 0x8a0 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     820:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     824:	83 fd       	sbrc	r24, 3
     826:	3e c0       	rjmp	.+124    	; 0x8a4 <Endpoint_Write_Control_PStream_LE+0xc0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     828:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     82c:	82 ff       	sbrs	r24, 2
     82e:	06 c0       	rjmp	.+12     	; 0x83c <Endpoint_Write_Control_PStream_LE+0x58>
     830:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     834:	82 ff       	sbrs	r24, 2
     836:	27 c0       	rjmp	.+78     	; 0x886 <Endpoint_Write_Control_PStream_LE+0xa2>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     83c:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
     840:	80 ff       	sbrs	r24, 0
     842:	e3 cf       	rjmp	.-58     	; 0x80a <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     844:	20 91 f3 00 	lds	r18, 0x00F3
     848:	80 91 f2 00 	lds	r24, 0x00F2
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     850:	61 15       	cp	r22, r1
     852:	71 05       	cpc	r23, r1
     854:	59 f0       	breq	.+22     	; 0x86c <Endpoint_Write_Control_PStream_LE+0x88>
     856:	88 30       	cpi	r24, 0x08	; 8
     858:	91 05       	cpc	r25, r1
     85a:	40 f4       	brcc	.+16     	; 0x86c <Endpoint_Write_Control_PStream_LE+0x88>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     85c:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     85e:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     862:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     864:	61 50       	subi	r22, 0x01	; 1
     866:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     868:	01 96       	adiw	r24, 0x01	; 1
     86a:	f2 cf       	rjmp	.-28     	; 0x850 <Endpoint_Write_Control_PStream_LE+0x6c>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     86c:	21 e0       	ldi	r18, 0x01	; 1
     86e:	08 97       	sbiw	r24, 0x08	; 8
     870:	09 f0       	breq	.+2      	; 0x874 <Endpoint_Write_Control_PStream_LE+0x90>
     872:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     874:	80 91 e8 00 	lds	r24, 0x00E8
     878:	8e 77       	andi	r24, 0x7E	; 126
     87a:	80 93 e8 00 	sts	0x00E8, r24
     87e:	c5 cf       	rjmp	.-118    	; 0x80a <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     880:	21 11       	cpse	r18, r1
     882:	c6 cf       	rjmp	.-116    	; 0x810 <Endpoint_Write_Control_PStream_LE+0x2c>
     884:	d5 cf       	rjmp	.-86     	; 0x830 <Endpoint_Write_Control_PStream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     886:	80 91 71 01 	lds	r24, 0x0171

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     88a:	88 23       	and	r24, r24
     88c:	39 f0       	breq	.+14     	; 0x89c <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     88e:	85 30       	cpi	r24, 0x05	; 5
     890:	39 f0       	breq	.+14     	; 0x8a0 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     892:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     896:	83 ff       	sbrs	r24, 3
     898:	cb cf       	rjmp	.-106    	; 0x830 <Endpoint_Write_Control_PStream_LE+0x4c>
     89a:	04 c0       	rjmp	.+8      	; 0x8a4 <Endpoint_Write_Control_PStream_LE+0xc0>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     89c:	82 e0       	ldi	r24, 0x02	; 2
     89e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     8a0:	83 e0       	ldi	r24, 0x03	; 3
     8a2:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     8a4:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     8a6:	08 95       	ret

000008a8 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     8a8:	98 2f       	mov	r25, r24
     8aa:	97 30       	cpi	r25, 0x07	; 7
     8ac:	58 f5       	brcc	.+86     	; 0x904 <Endpoint_ConfigureEndpoint_Prv+0x5c>
     8ae:	90 93 e9 00 	sts	0x00E9, r25
     8b2:	98 17       	cp	r25, r24
     8b4:	39 f0       	breq	.+14     	; 0x8c4 <Endpoint_ConfigureEndpoint_Prv+0x1c>
     8b6:	70 91 ec 00 	lds	r23, 0x00EC
     8ba:	20 91 ed 00 	lds	r18, 0x00ED
     8be:	50 91 f0 00 	lds	r21, 0x00F0
     8c2:	03 c0       	rjmp	.+6      	; 0x8ca <Endpoint_ConfigureEndpoint_Prv+0x22>
     8c4:	24 2f       	mov	r18, r20
     8c6:	76 2f       	mov	r23, r22
     8c8:	50 e0       	ldi	r21, 0x00	; 0
     8ca:	21 ff       	sbrs	r18, 1
     8cc:	19 c0       	rjmp	.+50     	; 0x900 <Endpoint_ConfigureEndpoint_Prv+0x58>
     8ce:	30 91 eb 00 	lds	r19, 0x00EB
     8d2:	3e 7f       	andi	r19, 0xFE	; 254
     8d4:	30 93 eb 00 	sts	0x00EB, r19
     8d8:	30 91 ed 00 	lds	r19, 0x00ED
     8dc:	3d 7f       	andi	r19, 0xFD	; 253
     8de:	30 93 ed 00 	sts	0x00ED, r19
     8e2:	30 91 eb 00 	lds	r19, 0x00EB
     8e6:	31 60       	ori	r19, 0x01	; 1
     8e8:	30 93 eb 00 	sts	0x00EB, r19
     8ec:	70 93 ec 00 	sts	0x00EC, r23
     8f0:	20 93 ed 00 	sts	0x00ED, r18
     8f4:	50 93 f0 00 	sts	0x00F0, r21
     8f8:	20 91 ee 00 	lds	r18, 0x00EE
     8fc:	27 ff       	sbrs	r18, 7
     8fe:	07 c0       	rjmp	.+14     	; 0x90e <Endpoint_ConfigureEndpoint_Prv+0x66>
     900:	9f 5f       	subi	r25, 0xFF	; 255
     902:	d3 cf       	rjmp	.-90     	; 0x8aa <Endpoint_ConfigureEndpoint_Prv+0x2>
     904:	8f 70       	andi	r24, 0x0F	; 15
     906:	80 93 e9 00 	sts	0x00E9, r24
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	08 95       	ret
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	08 95       	ret

00000912 <Endpoint_ConfigureEndpointTable>:
     912:	0f 93       	push	r16
     914:	1f 93       	push	r17
     916:	cf 93       	push	r28
     918:	df 93       	push	r29
     91a:	06 2f       	mov	r16, r22
     91c:	ec 01       	movw	r28, r24
     91e:	10 e0       	ldi	r17, 0x00	; 0
     920:	10 17       	cp	r17, r16
     922:	71 f1       	breq	.+92     	; 0x980 <Endpoint_ConfigureEndpointTable+0x6e>
     924:	98 81       	ld	r25, Y
     926:	99 23       	and	r25, r25
     928:	41 f1       	breq	.+80     	; 0x97a <Endpoint_ConfigureEndpointTable+0x68>
     92a:	2c 81       	ldd	r18, Y+4	; 0x04
     92c:	e9 81       	ldd	r30, Y+1	; 0x01
     92e:	fa 81       	ldd	r31, Y+2	; 0x02
     930:	7b 81       	ldd	r23, Y+3	; 0x03
     932:	89 2f       	mov	r24, r25
     934:	8f 70       	andi	r24, 0x0F	; 15
     936:	87 30       	cpi	r24, 0x07	; 7
     938:	10 f0       	brcs	.+4      	; 0x93e <Endpoint_ConfigureEndpointTable+0x2c>
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	22 c0       	rjmp	.+68     	; 0x982 <Endpoint_ConfigureEndpointTable+0x70>
     93e:	22 30       	cpi	r18, 0x02	; 2
     940:	10 f0       	brcs	.+4      	; 0x946 <Endpoint_ConfigureEndpointTable+0x34>
     942:	56 e0       	ldi	r21, 0x06	; 6
     944:	01 c0       	rjmp	.+2      	; 0x948 <Endpoint_ConfigureEndpointTable+0x36>
     946:	52 e0       	ldi	r21, 0x02	; 2
     948:	28 e0       	ldi	r18, 0x08	; 8
     94a:	30 e0       	ldi	r19, 0x00	; 0
     94c:	40 e0       	ldi	r20, 0x00	; 0
     94e:	2e 17       	cp	r18, r30
     950:	3f 07       	cpc	r19, r31
     952:	20 f4       	brcc	.+8      	; 0x95c <Endpoint_ConfigureEndpointTable+0x4a>
     954:	4f 5f       	subi	r20, 0xFF	; 255
     956:	22 0f       	add	r18, r18
     958:	33 1f       	adc	r19, r19
     95a:	f9 cf       	rjmp	.-14     	; 0x94e <Endpoint_ConfigureEndpointTable+0x3c>
     95c:	42 95       	swap	r20
     95e:	40 7f       	andi	r20, 0xF0	; 240
     960:	45 2b       	or	r20, r21
     962:	69 2f       	mov	r22, r25
     964:	66 1f       	adc	r22, r22
     966:	66 27       	eor	r22, r22
     968:	66 1f       	adc	r22, r22
     96a:	90 e4       	ldi	r25, 0x40	; 64
     96c:	79 9f       	mul	r23, r25
     96e:	90 01       	movw	r18, r0
     970:	11 24       	eor	r1, r1
     972:	62 2b       	or	r22, r18
     974:	99 df       	rcall	.-206    	; 0x8a8 <Endpoint_ConfigureEndpoint_Prv>
     976:	88 23       	and	r24, r24
     978:	01 f3       	breq	.-64     	; 0x93a <Endpoint_ConfigureEndpointTable+0x28>
     97a:	1f 5f       	subi	r17, 0xFF	; 255
     97c:	25 96       	adiw	r28, 0x05	; 5
     97e:	d0 cf       	rjmp	.-96     	; 0x920 <Endpoint_ConfigureEndpointTable+0xe>
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
     986:	1f 91       	pop	r17
     988:	0f 91       	pop	r16
     98a:	08 95       	ret

0000098c <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     98c:	80 91 72 01 	lds	r24, 0x0172
     990:	87 fd       	sbrc	r24, 7
     992:	05 c0       	rjmp	.+10     	; 0x99e <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     994:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     998:	80 ff       	sbrs	r24, 0
     99a:	0e c0       	rjmp	.+28     	; 0x9b8 <Endpoint_ClearStatusStage+0x2c>
     99c:	12 c0       	rjmp	.+36     	; 0x9c2 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     99e:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     9a2:	82 fd       	sbrc	r24, 2
     9a4:	05 c0       	rjmp	.+10     	; 0x9b0 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     9a6:	80 91 71 01 	lds	r24, 0x0171
     9aa:	81 11       	cpse	r24, r1
     9ac:	f8 cf       	rjmp	.-16     	; 0x99e <Endpoint_ClearStatusStage+0x12>
     9ae:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     9b0:	80 91 e8 00 	lds	r24, 0x00E8
     9b4:	8b 77       	andi	r24, 0x7B	; 123
     9b6:	08 c0       	rjmp	.+16     	; 0x9c8 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     9b8:	80 91 71 01 	lds	r24, 0x0171
     9bc:	81 11       	cpse	r24, r1
     9be:	ea cf       	rjmp	.-44     	; 0x994 <Endpoint_ClearStatusStage+0x8>
     9c0:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     9c2:	80 91 e8 00 	lds	r24, 0x00E8
     9c6:	8e 77       	andi	r24, 0x7E	; 126
     9c8:	80 93 e8 00 	sts	0x00E8, r24
     9cc:	08 95       	ret

000009ce <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     9ce:	80 91 e4 00 	lds	r24, 0x00E4
     9d2:	90 91 e5 00 	lds	r25, 0x00E5
     9d6:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     9d8:	20 91 ec 00 	lds	r18, 0x00EC
     9dc:	20 ff       	sbrs	r18, 0
     9de:	21 c0       	rjmp	.+66     	; 0xa22 <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     9e0:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     9e4:	20 fd       	sbrc	r18, 0
     9e6:	21 c0       	rjmp	.+66     	; 0xa2a <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     9e8:	20 91 71 01 	lds	r18, 0x0171

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     9ec:	22 23       	and	r18, r18
     9ee:	89 f0       	breq	.+34     	; 0xa12 <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     9f0:	25 30       	cpi	r18, 0x05	; 5
     9f2:	89 f0       	breq	.+34     	; 0xa16 <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     9f4:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     9f8:	25 fd       	sbrc	r18, 5
     9fa:	0f c0       	rjmp	.+30     	; 0xa1a <Endpoint_WaitUntilReady+0x4c>
     9fc:	20 91 e4 00 	lds	r18, 0x00E4
     a00:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     a04:	28 17       	cp	r18, r24
     a06:	39 07       	cpc	r19, r25
     a08:	39 f3       	breq	.-50     	; 0x9d8 <Endpoint_WaitUntilReady+0xa>
     a0a:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     a0c:	41 f0       	breq	.+16     	; 0xa1e <Endpoint_WaitUntilReady+0x50>
     a0e:	c9 01       	movw	r24, r18
     a10:	e3 cf       	rjmp	.-58     	; 0x9d8 <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     a12:	82 e0       	ldi	r24, 0x02	; 2
     a14:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     a16:	83 e0       	ldi	r24, 0x03	; 3
     a18:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     a1a:	81 e0       	ldi	r24, 0x01	; 1
     a1c:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
     a1e:	84 e0       	ldi	r24, 0x04	; 4
     a20:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     a22:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     a26:	22 ff       	sbrs	r18, 2
     a28:	df cf       	rjmp	.-66     	; 0x9e8 <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	08 95       	ret

00000a2e <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     a2e:	0f 93       	push	r16
     a30:	1f 93       	push	r17
     a32:	cf 93       	push	r28
     a34:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     a36:	4b d0       	rcall	.+150    	; 0xace <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     a38:	52 d0       	rcall	.+164    	; 0xade <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     a3a:	c8 ed       	ldi	r28, 0xD8	; 216
     a3c:	d0 e0       	ldi	r29, 0x00	; 0
     a3e:	88 81       	ld	r24, Y
     a40:	8f 77       	andi	r24, 0x7F	; 127
     a42:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
     a44:	88 81       	ld	r24, Y
     a46:	80 68       	ori	r24, 0x80	; 128
     a48:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     a4a:	88 81       	ld	r24, Y
     a4c:	8f 7d       	andi	r24, 0xDF	; 223
     a4e:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     a50:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     a52:	10 92 71 01 	sts	0x0171, r1
	USB_Device_ConfigurationNumber  = 0;
     a56:	10 92 6d 01 	sts	0x016D, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     a5a:	10 92 6f 01 	sts	0x016F, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     a5e:	10 92 6e 01 	sts	0x016E, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     a62:	00 ee       	ldi	r16, 0xE0	; 224
     a64:	10 e0       	ldi	r17, 0x00	; 0
     a66:	f8 01       	movw	r30, r16
     a68:	80 81       	ld	r24, Z
     a6a:	8b 7f       	andi	r24, 0xFB	; 251
     a6c:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     a6e:	88 81       	ld	r24, Y
     a70:	81 60       	ori	r24, 0x01	; 1
     a72:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     a74:	42 e0       	ldi	r20, 0x02	; 2
     a76:	60 e0       	ldi	r22, 0x00	; 0
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	16 df       	rcall	.-468    	; 0x8a8 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     a7c:	e1 ee       	ldi	r30, 0xE1	; 225
     a7e:	f0 e0       	ldi	r31, 0x00	; 0
     a80:	80 81       	ld	r24, Z
     a82:	8e 7f       	andi	r24, 0xFE	; 254
     a84:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     a86:	e2 ee       	ldi	r30, 0xE2	; 226
     a88:	f0 e0       	ldi	r31, 0x00	; 0
     a8a:	80 81       	ld	r24, Z
     a8c:	81 60       	ori	r24, 0x01	; 1
     a8e:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     a90:	80 81       	ld	r24, Z
     a92:	88 60       	ori	r24, 0x08	; 8
     a94:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     a96:	f8 01       	movw	r30, r16
     a98:	80 81       	ld	r24, Z
     a9a:	8e 7f       	andi	r24, 0xFE	; 254
     a9c:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     a9e:	88 81       	ld	r24, Y
     aa0:	80 61       	ori	r24, 0x10	; 16
     aa2:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     aa4:	df 91       	pop	r29
     aa6:	cf 91       	pop	r28
     aa8:	1f 91       	pop	r17
     aaa:	0f 91       	pop	r16
     aac:	08 95       	ret

00000aae <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     aae:	e8 ed       	ldi	r30, 0xD8	; 216
     ab0:	f0 e0       	ldi	r31, 0x00	; 0
     ab2:	80 81       	ld	r24, Z
     ab4:	8f 7e       	andi	r24, 0xEF	; 239
     ab6:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     ab8:	e7 ed       	ldi	r30, 0xD7	; 215
     aba:	f0 e0       	ldi	r31, 0x00	; 0
     abc:	80 81       	ld	r24, Z
     abe:	81 60       	ori	r24, 0x01	; 1
     ac0:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
     ac2:	84 e0       	ldi	r24, 0x04	; 4
     ac4:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	80 93 70 01 	sts	0x0170, r24

	USB_ResetInterface();
     acc:	b0 cf       	rjmp	.-160    	; 0xa2e <USB_ResetInterface>

00000ace <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
     ace:	e8 ed       	ldi	r30, 0xD8	; 216
     ad0:	f0 e0       	ldi	r31, 0x00	; 0
     ad2:	80 81       	ld	r24, Z
     ad4:	8e 7f       	andi	r24, 0xFE	; 254
     ad6:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     ad8:	10 92 e2 00 	sts	0x00E2, r1
     adc:	08 95       	ret

00000ade <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     ade:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     ae2:	10 92 e1 00 	sts	0x00E1, r1
     ae6:	08 95       	ret

00000ae8 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     ae8:	1f 92       	push	r1
     aea:	0f 92       	push	r0
     aec:	0f b6       	in	r0, 0x3f	; 63
     aee:	0f 92       	push	r0
     af0:	11 24       	eor	r1, r1
     af2:	2f 93       	push	r18
     af4:	3f 93       	push	r19
     af6:	4f 93       	push	r20
     af8:	5f 93       	push	r21
     afa:	6f 93       	push	r22
     afc:	7f 93       	push	r23
     afe:	8f 93       	push	r24
     b00:	9f 93       	push	r25
     b02:	af 93       	push	r26
     b04:	bf 93       	push	r27
     b06:	ef 93       	push	r30
     b08:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     b0a:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     b0e:	82 ff       	sbrs	r24, 2
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__stack+0x27>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     b12:	80 91 e2 00 	lds	r24, 0x00E2
     b16:	82 ff       	sbrs	r24, 2
     b18:	06 c0       	rjmp	.+12     	; 0xb26 <__stack+0x27>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     b1a:	80 91 e1 00 	lds	r24, 0x00E1
     b1e:	8b 7f       	andi	r24, 0xFB	; 251
     b20:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     b24:	38 d2       	rcall	.+1136   	; 0xf96 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     b26:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     b2a:	80 ff       	sbrs	r24, 0
     b2c:	1d c0       	rjmp	.+58     	; 0xb68 <__stack+0x69>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     b2e:	80 91 d8 00 	lds	r24, 0x00D8
     b32:	80 ff       	sbrs	r24, 0
     b34:	19 c0       	rjmp	.+50     	; 0xb68 <__stack+0x69>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     b36:	80 91 da 00 	lds	r24, 0x00DA
     b3a:	8e 7f       	andi	r24, 0xFE	; 254
     b3c:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     b40:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     b44:	80 ff       	sbrs	r24, 0
     b46:	0c c0       	rjmp	.+24     	; 0xb60 <__stack+0x61>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     b48:	80 e1       	ldi	r24, 0x10	; 16
     b4a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     b4c:	82 e1       	ldi	r24, 0x12	; 18
     b4e:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     b50:	09 b4       	in	r0, 0x29	; 41
     b52:	00 fe       	sbrs	r0, 0
     b54:	fd cf       	rjmp	.-6      	; 0xb50 <__stack+0x51>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	80 93 71 01 	sts	0x0171, r24
			EVENT_USB_Device_Connect();
     b5c:	a8 dd       	rcall	.-1200   	; 0x6ae <EVENT_USB_Device_Connect>
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__stack+0x69>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     b60:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     b62:	10 92 71 01 	sts	0x0171, r1
			EVENT_USB_Device_Disconnect();
     b66:	a4 dd       	rcall	.-1208   	; 0x6b0 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     b68:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     b6c:	80 ff       	sbrs	r24, 0
     b6e:	18 c0       	rjmp	.+48     	; 0xba0 <__stack+0xa1>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     b70:	80 91 e2 00 	lds	r24, 0x00E2
     b74:	80 ff       	sbrs	r24, 0
     b76:	14 c0       	rjmp	.+40     	; 0xba0 <__stack+0xa1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     b78:	80 91 e2 00 	lds	r24, 0x00E2
     b7c:	8e 7f       	andi	r24, 0xFE	; 254
     b7e:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     b82:	80 91 e2 00 	lds	r24, 0x00E2
     b86:	80 61       	ori	r24, 0x10	; 16
     b88:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     b8c:	80 91 d8 00 	lds	r24, 0x00D8
     b90:	80 62       	ori	r24, 0x20	; 32
     b92:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     b96:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     b98:	85 e0       	ldi	r24, 0x05	; 5
     b9a:	80 93 71 01 	sts	0x0171, r24
		EVENT_USB_Device_Suspend();
     b9e:	fb d1       	rcall	.+1014   	; 0xf96 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     ba0:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     ba4:	84 ff       	sbrs	r24, 4
     ba6:	2f c0       	rjmp	.+94     	; 0xc06 <__stack+0x107>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     ba8:	80 91 e2 00 	lds	r24, 0x00E2
     bac:	84 ff       	sbrs	r24, 4
     bae:	2b c0       	rjmp	.+86     	; 0xc06 <__stack+0x107>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     bb0:	80 e1       	ldi	r24, 0x10	; 16
     bb2:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     bb4:	82 e1       	ldi	r24, 0x12	; 18
     bb6:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     bb8:	09 b4       	in	r0, 0x29	; 41
     bba:	00 fe       	sbrs	r0, 0
     bbc:	fd cf       	rjmp	.-6      	; 0xbb8 <__stack+0xb9>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     bbe:	80 91 d8 00 	lds	r24, 0x00D8
     bc2:	8f 7d       	andi	r24, 0xDF	; 223
     bc4:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     bc8:	80 91 e1 00 	lds	r24, 0x00E1
     bcc:	8f 7e       	andi	r24, 0xEF	; 239
     bce:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     bd2:	80 91 e2 00 	lds	r24, 0x00E2
     bd6:	8f 7e       	andi	r24, 0xEF	; 239
     bd8:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     bdc:	80 91 e2 00 	lds	r24, 0x00E2
     be0:	81 60       	ori	r24, 0x01	; 1
     be2:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     be6:	80 91 6d 01 	lds	r24, 0x016D
     bea:	88 23       	and	r24, r24
     bec:	11 f0       	breq	.+4      	; 0xbf2 <__stack+0xf3>
		  USB_DeviceState = DEVICE_STATE_Configured;
     bee:	84 e0       	ldi	r24, 0x04	; 4
     bf0:	07 c0       	rjmp	.+14     	; 0xc00 <__stack+0x101>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     bf2:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     bf6:	87 ff       	sbrs	r24, 7
     bf8:	02 c0       	rjmp	.+4      	; 0xbfe <__stack+0xff>
     bfa:	83 e0       	ldi	r24, 0x03	; 3
     bfc:	01 c0       	rjmp	.+2      	; 0xc00 <__stack+0x101>
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	80 93 71 01 	sts	0x0171, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     c04:	c8 d1       	rcall	.+912    	; 0xf96 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     c06:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     c0a:	83 ff       	sbrs	r24, 3
     c0c:	27 c0       	rjmp	.+78     	; 0xc5c <__stack+0x15d>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     c0e:	80 91 e2 00 	lds	r24, 0x00E2
     c12:	83 ff       	sbrs	r24, 3
     c14:	23 c0       	rjmp	.+70     	; 0xc5c <__stack+0x15d>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     c16:	80 91 e1 00 	lds	r24, 0x00E1
     c1a:	87 7f       	andi	r24, 0xF7	; 247
     c1c:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     c20:	82 e0       	ldi	r24, 0x02	; 2
     c22:	80 93 71 01 	sts	0x0171, r24
		USB_Device_ConfigurationNumber = 0;
     c26:	10 92 6d 01 	sts	0x016D, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     c2a:	80 91 e1 00 	lds	r24, 0x00E1
     c2e:	8e 7f       	andi	r24, 0xFE	; 254
     c30:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     c34:	80 91 e2 00 	lds	r24, 0x00E2
     c38:	8e 7f       	andi	r24, 0xFE	; 254
     c3a:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     c3e:	80 91 e2 00 	lds	r24, 0x00E2
     c42:	80 61       	ori	r24, 0x10	; 16
     c44:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     c48:	42 e0       	ldi	r20, 0x02	; 2
     c4a:	60 e0       	ldi	r22, 0x00	; 0
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	2c de       	rcall	.-936    	; 0x8a8 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     c50:	80 91 f0 00 	lds	r24, 0x00F0
     c54:	88 60       	ori	r24, 0x08	; 8
     c56:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     c5a:	9d d1       	rcall	.+826    	; 0xf96 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     c5c:	ff 91       	pop	r31
     c5e:	ef 91       	pop	r30
     c60:	bf 91       	pop	r27
     c62:	af 91       	pop	r26
     c64:	9f 91       	pop	r25
     c66:	8f 91       	pop	r24
     c68:	7f 91       	pop	r23
     c6a:	6f 91       	pop	r22
     c6c:	5f 91       	pop	r21
     c6e:	4f 91       	pop	r20
     c70:	3f 91       	pop	r19
     c72:	2f 91       	pop	r18
     c74:	0f 90       	pop	r0
     c76:	0f be       	out	0x3f, r0	; 63
     c78:	0f 90       	pop	r0
     c7a:	1f 90       	pop	r1
     c7c:	18 95       	reti

00000c7e <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     c7e:	1f 92       	push	r1
     c80:	0f 92       	push	r0
     c82:	0f b6       	in	r0, 0x3f	; 63
     c84:	0f 92       	push	r0
     c86:	11 24       	eor	r1, r1
     c88:	2f 93       	push	r18
     c8a:	3f 93       	push	r19
     c8c:	4f 93       	push	r20
     c8e:	5f 93       	push	r21
     c90:	6f 93       	push	r22
     c92:	7f 93       	push	r23
     c94:	8f 93       	push	r24
     c96:	9f 93       	push	r25
     c98:	af 93       	push	r26
     c9a:	bf 93       	push	r27
     c9c:	cf 93       	push	r28
     c9e:	ef 93       	push	r30
     ca0:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     ca2:	c0 91 e9 00 	lds	r28, 0x00E9
     ca6:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     ca8:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     cac:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     cb0:	80 91 f0 00 	lds	r24, 0x00F0
     cb4:	87 7f       	andi	r24, 0xF7	; 247
     cb6:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     cba:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     cbc:	1b d0       	rcall	.+54     	; 0xcf4 <USB_Device_ProcessControlRequest>
     cbe:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     cc2:	80 91 f0 00 	lds	r24, 0x00F0
     cc6:	88 60       	ori	r24, 0x08	; 8
     cc8:	80 93 f0 00 	sts	0x00F0, r24
     ccc:	c0 93 e9 00 	sts	0x00E9, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     cd0:	ff 91       	pop	r31
     cd2:	ef 91       	pop	r30
     cd4:	cf 91       	pop	r28
     cd6:	bf 91       	pop	r27
     cd8:	af 91       	pop	r26
     cda:	9f 91       	pop	r25
     cdc:	8f 91       	pop	r24
     cde:	7f 91       	pop	r23
     ce0:	6f 91       	pop	r22
     ce2:	5f 91       	pop	r21
     ce4:	4f 91       	pop	r20
     ce6:	3f 91       	pop	r19
     ce8:	2f 91       	pop	r18
     cea:	0f 90       	pop	r0
     cec:	0f be       	out	0x3f, r0	; 63
     cee:	0f 90       	pop	r0
     cf0:	1f 90       	pop	r1
     cf2:	18 95       	reti

00000cf4 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     cf4:	1f 93       	push	r17
     cf6:	cf 93       	push	r28
     cf8:	df 93       	push	r29
     cfa:	cd b7       	in	r28, 0x3d	; 61
     cfc:	de b7       	in	r29, 0x3e	; 62
     cfe:	aa 97       	sbiw	r28, 0x2a	; 42
     d00:	0f b6       	in	r0, 0x3f	; 63
     d02:	f8 94       	cli
     d04:	de bf       	out	0x3e, r29	; 62
     d06:	0f be       	out	0x3f, r0	; 63
     d08:	cd bf       	out	0x3d, r28	; 61
     d0a:	e2 e7       	ldi	r30, 0x72	; 114
     d0c:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     d0e:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     d12:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     d14:	21 e0       	ldi	r18, 0x01	; 1
     d16:	ea 37       	cpi	r30, 0x7A	; 122
     d18:	f2 07       	cpc	r31, r18
     d1a:	c9 f7       	brne	.-14     	; 0xd0e <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     d1c:	cd dc       	rcall	.-1638   	; 0x6b8 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d1e:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     d22:	83 ff       	sbrs	r24, 3
     d24:	20 c1       	rjmp	.+576    	; 0xf66 <USB_Device_ProcessControlRequest+0x272>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     d26:	90 91 72 01 	lds	r25, 0x0172

		switch (USB_ControlRequest.bRequest)
     d2a:	80 91 73 01 	lds	r24, 0x0173
     d2e:	85 30       	cpi	r24, 0x05	; 5
     d30:	09 f4       	brne	.+2      	; 0xd34 <USB_Device_ProcessControlRequest+0x40>
     d32:	77 c0       	rjmp	.+238    	; 0xe22 <USB_Device_ProcessControlRequest+0x12e>
     d34:	30 f4       	brcc	.+12     	; 0xd42 <USB_Device_ProcessControlRequest+0x4e>
     d36:	81 30       	cpi	r24, 0x01	; 1
     d38:	81 f1       	breq	.+96     	; 0xd9a <USB_Device_ProcessControlRequest+0xa6>
     d3a:	68 f0       	brcs	.+26     	; 0xd56 <USB_Device_ProcessControlRequest+0x62>
     d3c:	83 30       	cpi	r24, 0x03	; 3
     d3e:	69 f1       	breq	.+90     	; 0xd9a <USB_Device_ProcessControlRequest+0xa6>
     d40:	12 c1       	rjmp	.+548    	; 0xf66 <USB_Device_ProcessControlRequest+0x272>
     d42:	88 30       	cpi	r24, 0x08	; 8
     d44:	09 f4       	brne	.+2      	; 0xd48 <USB_Device_ProcessControlRequest+0x54>
     d46:	e1 c0       	rjmp	.+450    	; 0xf0a <USB_Device_ProcessControlRequest+0x216>
     d48:	89 30       	cpi	r24, 0x09	; 9
     d4a:	09 f4       	brne	.+2      	; 0xd4e <USB_Device_ProcessControlRequest+0x5a>
     d4c:	f0 c0       	rjmp	.+480    	; 0xf2e <USB_Device_ProcessControlRequest+0x23a>
     d4e:	86 30       	cpi	r24, 0x06	; 6
     d50:	09 f0       	breq	.+2      	; 0xd54 <USB_Device_ProcessControlRequest+0x60>
     d52:	09 c1       	rjmp	.+530    	; 0xf66 <USB_Device_ProcessControlRequest+0x272>
     d54:	88 c0       	rjmp	.+272    	; 0xe66 <USB_Device_ProcessControlRequest+0x172>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     d56:	90 38       	cpi	r25, 0x80	; 128
     d58:	81 f0       	breq	.+32     	; 0xd7a <USB_Device_ProcessControlRequest+0x86>
     d5a:	92 38       	cpi	r25, 0x82	; 130
     d5c:	09 f0       	breq	.+2      	; 0xd60 <USB_Device_ProcessControlRequest+0x6c>
     d5e:	03 c1       	rjmp	.+518    	; 0xf66 <USB_Device_ProcessControlRequest+0x272>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d60:	80 91 76 01 	lds	r24, 0x0176
     d64:	8f 70       	andi	r24, 0x0F	; 15
     d66:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     d6a:	80 91 eb 00 	lds	r24, 0x00EB
     d6e:	85 fb       	bst	r24, 5
     d70:	88 27       	eor	r24, r24
     d72:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d74:	10 92 e9 00 	sts	0x00E9, r1
     d78:	06 c0       	rjmp	.+12     	; 0xd86 <USB_Device_ProcessControlRequest+0x92>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     d7a:	80 91 6e 01 	lds	r24, 0x016E
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     d7e:	90 91 6f 01 	lds	r25, 0x016F
     d82:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     d84:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d86:	90 91 e8 00 	lds	r25, 0x00E8
     d8a:	97 7f       	andi	r25, 0xF7	; 247
     d8c:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     d90:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
     d94:	10 92 f1 00 	sts	0x00F1, r1
     d98:	c3 c0       	rjmp	.+390    	; 0xf20 <USB_Device_ProcessControlRequest+0x22c>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     d9a:	29 2f       	mov	r18, r25
     d9c:	2d 7f       	andi	r18, 0xFD	; 253
     d9e:	09 f0       	breq	.+2      	; 0xda2 <USB_Device_ProcessControlRequest+0xae>
     da0:	e2 c0       	rjmp	.+452    	; 0xf66 <USB_Device_ProcessControlRequest+0x272>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     da2:	99 23       	and	r25, r25
     da4:	19 f0       	breq	.+6      	; 0xdac <USB_Device_ProcessControlRequest+0xb8>
     da6:	92 30       	cpi	r25, 0x02	; 2
     da8:	61 f0       	breq	.+24     	; 0xdc2 <USB_Device_ProcessControlRequest+0xce>
     daa:	dd c0       	rjmp	.+442    	; 0xf66 <USB_Device_ProcessControlRequest+0x272>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     dac:	90 91 74 01 	lds	r25, 0x0174
     db0:	91 30       	cpi	r25, 0x01	; 1
     db2:	09 f0       	breq	.+2      	; 0xdb6 <USB_Device_ProcessControlRequest+0xc2>
     db4:	d8 c0       	rjmp	.+432    	; 0xf66 <USB_Device_ProcessControlRequest+0x272>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     db6:	83 30       	cpi	r24, 0x03	; 3
     db8:	09 f0       	breq	.+2      	; 0xdbc <USB_Device_ProcessControlRequest+0xc8>
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	90 93 6f 01 	sts	0x016F, r25
     dc0:	2a c0       	rjmp	.+84     	; 0xe16 <USB_Device_ProcessControlRequest+0x122>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     dc2:	90 91 74 01 	lds	r25, 0x0174
     dc6:	91 11       	cpse	r25, r1
     dc8:	26 c0       	rjmp	.+76     	; 0xe16 <USB_Device_ProcessControlRequest+0x122>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     dca:	20 91 76 01 	lds	r18, 0x0176
     dce:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     dd0:	09 f4       	brne	.+2      	; 0xdd4 <USB_Device_ProcessControlRequest+0xe0>
     dd2:	c9 c0       	rjmp	.+402    	; 0xf66 <USB_Device_ProcessControlRequest+0x272>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     dd4:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     dd8:	90 91 eb 00 	lds	r25, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     ddc:	90 ff       	sbrs	r25, 0
     dde:	1b c0       	rjmp	.+54     	; 0xe16 <USB_Device_ProcessControlRequest+0x122>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     de0:	83 30       	cpi	r24, 0x03	; 3
     de2:	21 f4       	brne	.+8      	; 0xdec <USB_Device_ProcessControlRequest+0xf8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     de4:	80 91 eb 00 	lds	r24, 0x00EB
     de8:	80 62       	ori	r24, 0x20	; 32
     dea:	13 c0       	rjmp	.+38     	; 0xe12 <USB_Device_ProcessControlRequest+0x11e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     dec:	80 91 eb 00 	lds	r24, 0x00EB
     df0:	80 61       	ori	r24, 0x10	; 16
     df2:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	02 2e       	mov	r0, r18
     dfc:	01 c0       	rjmp	.+2      	; 0xe00 <USB_Device_ProcessControlRequest+0x10c>
     dfe:	88 0f       	add	r24, r24
     e00:	0a 94       	dec	r0
     e02:	ea f7       	brpl	.-6      	; 0xdfe <USB_Device_ProcessControlRequest+0x10a>
     e04:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
     e08:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     e0c:	80 91 eb 00 	lds	r24, 0x00EB
     e10:	88 60       	ori	r24, 0x08	; 8
     e12:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e16:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e1a:	80 91 e8 00 	lds	r24, 0x00E8
     e1e:	87 7f       	andi	r24, 0xF7	; 247
     e20:	82 c0       	rjmp	.+260    	; 0xf26 <USB_Device_ProcessControlRequest+0x232>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     e22:	91 11       	cpse	r25, r1
     e24:	a0 c0       	rjmp	.+320    	; 0xf66 <USB_Device_ProcessControlRequest+0x272>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     e26:	10 91 74 01 	lds	r17, 0x0174
     e2a:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     e2c:	80 91 e3 00 	lds	r24, 0x00E3
     e30:	80 78       	andi	r24, 0x80	; 128
     e32:	81 2b       	or	r24, r17
     e34:	80 93 e3 00 	sts	0x00E3, r24
     e38:	80 91 e8 00 	lds	r24, 0x00E8
     e3c:	87 7f       	andi	r24, 0xF7	; 247
     e3e:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     e42:	a4 dd       	rcall	.-1208   	; 0x98c <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e44:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
     e48:	80 ff       	sbrs	r24, 0
     e4a:	fc cf       	rjmp	.-8      	; 0xe44 <USB_Device_ProcessControlRequest+0x150>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
     e4c:	80 91 e3 00 	lds	r24, 0x00E3
     e50:	80 68       	ori	r24, 0x80	; 128
     e52:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     e56:	11 23       	and	r17, r17
     e58:	11 f0       	breq	.+4      	; 0xe5e <USB_Device_ProcessControlRequest+0x16a>
     e5a:	83 e0       	ldi	r24, 0x03	; 3
     e5c:	01 c0       	rjmp	.+2      	; 0xe60 <USB_Device_ProcessControlRequest+0x16c>
     e5e:	82 e0       	ldi	r24, 0x02	; 2
     e60:	80 93 71 01 	sts	0x0171, r24
     e64:	80 c0       	rjmp	.+256    	; 0xf66 <USB_Device_ProcessControlRequest+0x272>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     e66:	90 58       	subi	r25, 0x80	; 128
     e68:	92 30       	cpi	r25, 0x02	; 2
     e6a:	08 f0       	brcs	.+2      	; 0xe6e <USB_Device_ProcessControlRequest+0x17a>
     e6c:	7c c0       	rjmp	.+248    	; 0xf66 <USB_Device_ProcessControlRequest+0x272>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     e6e:	80 91 74 01 	lds	r24, 0x0174
     e72:	90 91 75 01 	lds	r25, 0x0175
     e76:	8c 3d       	cpi	r24, 0xDC	; 220
     e78:	23 e0       	ldi	r18, 0x03	; 3
     e7a:	92 07       	cpc	r25, r18
     e7c:	71 f5       	brne	.+92     	; 0xeda <USB_Device_ProcessControlRequest+0x1e6>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     e7e:	83 e0       	ldi	r24, 0x03	; 3
     e80:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     e82:	8a e2       	ldi	r24, 0x2A	; 42
     e84:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     e86:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     e88:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     e8a:	de 01       	movw	r26, r28
     e8c:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     e8e:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     e90:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     e92:	51 e2       	ldi	r21, 0x21	; 33
     e94:	e3 2f       	mov	r30, r19
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	50 93 57 00 	sts	0x0057, r21
     e9c:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
     e9e:	20 ff       	sbrs	r18, 0
     ea0:	03 c0       	rjmp	.+6      	; 0xea8 <USB_Device_ProcessControlRequest+0x1b4>
					{
						SerialByte >>= 4;
     ea2:	e2 95       	swap	r30
     ea4:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     ea6:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     ea8:	ef 70       	andi	r30, 0x0F	; 15
     eaa:	8e 2f       	mov	r24, r30
     eac:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     eae:	ea 30       	cpi	r30, 0x0A	; 10
     eb0:	10 f0       	brcs	.+4      	; 0xeb6 <USB_Device_ProcessControlRequest+0x1c2>
     eb2:	c7 96       	adiw	r24, 0x37	; 55
     eb4:	01 c0       	rjmp	.+2      	; 0xeb8 <USB_Device_ProcessControlRequest+0x1c4>
     eb6:	c0 96       	adiw	r24, 0x30	; 48
     eb8:	8d 93       	st	X+, r24
     eba:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     ebc:	2f 5f       	subi	r18, 0xFF	; 255
     ebe:	24 31       	cpi	r18, 0x14	; 20
     ec0:	49 f7       	brne	.-46     	; 0xe94 <USB_Device_ProcessControlRequest+0x1a0>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     ec2:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ec4:	80 91 e8 00 	lds	r24, 0x00E8
     ec8:	87 7f       	andi	r24, 0xF7	; 247
     eca:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     ece:	6a e2       	ldi	r22, 0x2A	; 42
     ed0:	70 e0       	ldi	r23, 0x00	; 0
     ed2:	ce 01       	movw	r24, r28
     ed4:	01 96       	adiw	r24, 0x01	; 1
     ed6:	25 dc       	rcall	.-1974   	; 0x722 <Endpoint_Write_Control_Stream_LE>
     ed8:	12 c0       	rjmp	.+36     	; 0xefe <USB_Device_ProcessControlRequest+0x20a>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     eda:	ae 01       	movw	r20, r28
     edc:	4f 5f       	subi	r20, 0xFF	; 255
     ede:	5f 4f       	sbci	r21, 0xFF	; 255
     ee0:	60 91 76 01 	lds	r22, 0x0176
     ee4:	ec db       	rcall	.-2088   	; 0x6be <CALLBACK_USB_GetDescriptor>
     ee6:	00 97       	sbiw	r24, 0x00	; 0
     ee8:	09 f4       	brne	.+2      	; 0xeec <USB_Device_ProcessControlRequest+0x1f8>
     eea:	3d c0       	rjmp	.+122    	; 0xf66 <USB_Device_ProcessControlRequest+0x272>
     eec:	20 91 e8 00 	lds	r18, 0x00E8
     ef0:	27 7f       	andi	r18, 0xF7	; 247
     ef2:	20 93 e8 00 	sts	0x00E8, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     ef6:	bc 01       	movw	r22, r24
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	9a 81       	ldd	r25, Y+2	; 0x02
     efc:	73 dc       	rcall	.-1818   	; 0x7e4 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     efe:	80 91 e8 00 	lds	r24, 0x00E8
     f02:	8b 77       	andi	r24, 0x7B	; 123
     f04:	80 93 e8 00 	sts	0x00E8, r24
     f08:	2e c0       	rjmp	.+92     	; 0xf66 <USB_Device_ProcessControlRequest+0x272>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     f0a:	90 38       	cpi	r25, 0x80	; 128
     f0c:	61 f5       	brne	.+88     	; 0xf66 <USB_Device_ProcessControlRequest+0x272>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f0e:	80 91 e8 00 	lds	r24, 0x00E8
     f12:	87 7f       	andi	r24, 0xF7	; 247
     f14:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     f18:	80 91 6d 01 	lds	r24, 0x016D
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     f1c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f20:	80 91 e8 00 	lds	r24, 0x00E8
     f24:	8e 77       	andi	r24, 0x7E	; 126
     f26:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     f2a:	30 dd       	rcall	.-1440   	; 0x98c <Endpoint_ClearStatusStage>
     f2c:	1c c0       	rjmp	.+56     	; 0xf66 <USB_Device_ProcessControlRequest+0x272>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     f2e:	91 11       	cpse	r25, r1
     f30:	1a c0       	rjmp	.+52     	; 0xf66 <USB_Device_ProcessControlRequest+0x272>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     f32:	90 91 74 01 	lds	r25, 0x0174
     f36:	92 30       	cpi	r25, 0x02	; 2
     f38:	b0 f4       	brcc	.+44     	; 0xf66 <USB_Device_ProcessControlRequest+0x272>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f3a:	80 91 e8 00 	lds	r24, 0x00E8
     f3e:	87 7f       	andi	r24, 0xF7	; 247
     f40:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     f44:	90 93 6d 01 	sts	0x016D, r25

	Endpoint_ClearStatusStage();
     f48:	21 dd       	rcall	.-1470   	; 0x98c <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     f4a:	80 91 6d 01 	lds	r24, 0x016D
     f4e:	81 11       	cpse	r24, r1
     f50:	04 c0       	rjmp	.+8      	; 0xf5a <USB_Device_ProcessControlRequest+0x266>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     f52:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     f56:	87 ff       	sbrs	r24, 7
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <USB_Device_ProcessControlRequest+0x26a>
     f5a:	84 e0       	ldi	r24, 0x04	; 4
     f5c:	01 c0       	rjmp	.+2      	; 0xf60 <USB_Device_ProcessControlRequest+0x26c>
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	80 93 71 01 	sts	0x0171, r24

	EVENT_USB_Device_ConfigurationChanged();
     f64:	a6 db       	rcall	.-2228   	; 0x6b2 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     f66:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     f6a:	83 ff       	sbrs	r24, 3
     f6c:	0a c0       	rjmp	.+20     	; 0xf82 <USB_Device_ProcessControlRequest+0x28e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f6e:	80 91 e8 00 	lds	r24, 0x00E8
     f72:	87 7f       	andi	r24, 0xF7	; 247
     f74:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     f78:	80 91 eb 00 	lds	r24, 0x00EB
     f7c:	80 62       	ori	r24, 0x20	; 32
     f7e:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     f82:	aa 96       	adiw	r28, 0x2a	; 42
     f84:	0f b6       	in	r0, 0x3f	; 63
     f86:	f8 94       	cli
     f88:	de bf       	out	0x3e, r29	; 62
     f8a:	0f be       	out	0x3f, r0	; 63
     f8c:	cd bf       	out	0x3d, r28	; 61
     f8e:	df 91       	pop	r29
     f90:	cf 91       	pop	r28
     f92:	1f 91       	pop	r17
     f94:	08 95       	ret

00000f96 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
     f96:	08 95       	ret

00000f98 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     f98:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     f9a:	80 91 71 01 	lds	r24, 0x0171
     f9e:	88 23       	and	r24, r24
     fa0:	a9 f0       	breq	.+42     	; 0xfcc <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     fa2:	80 91 e9 00 	lds	r24, 0x00E9
     fa6:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     fa8:	90 91 ec 00 	lds	r25, 0x00EC
     fac:	90 ff       	sbrs	r25, 0
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <USB_USBTask+0x1c>
     fb0:	90 e8       	ldi	r25, 0x80	; 128
     fb2:	01 c0       	rjmp	.+2      	; 0xfb6 <USB_USBTask+0x1e>
     fb4:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     fb6:	c9 2f       	mov	r28, r25
     fb8:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fba:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     fbe:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     fc2:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
     fc4:	97 de       	rcall	.-722    	; 0xcf4 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fc6:	cf 70       	andi	r28, 0x0F	; 15
     fc8:	c0 93 e9 00 	sts	0x00E9, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     fcc:	cf 91       	pop	r28
     fce:	08 95       	ret

00000fd0 <CDC_Device_ConfigureEndpoints>:

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
     fd0:	cf 93       	push	r28
     fd2:	df 93       	push	r29
     fd4:	ec 01       	movw	r28, r24
     fd6:	fc 01       	movw	r30, r24
     fd8:	70 96       	adiw	r30, 0x10	; 16
     fda:	8b e0       	ldi	r24, 0x0B	; 11
     fdc:	df 01       	movw	r26, r30
     fde:	1d 92       	st	X+, r1
     fe0:	8a 95       	dec	r24
     fe2:	e9 f7       	brne	.-6      	; 0xfde <CDC_Device_ConfigureEndpoints+0xe>
     fe4:	82 e0       	ldi	r24, 0x02	; 2
     fe6:	8c 83       	std	Y+4, r24	; 0x04
     fe8:	89 87       	std	Y+9, r24	; 0x09
     fea:	83 e0       	ldi	r24, 0x03	; 3
     fec:	8e 87       	std	Y+14, r24	; 0x0e
     fee:	61 e0       	ldi	r22, 0x01	; 1
     ff0:	ce 01       	movw	r24, r28
     ff2:	01 96       	adiw	r24, 0x01	; 1
     ff4:	8e dc       	rcall	.-1764   	; 0x912 <Endpoint_ConfigureEndpointTable>
     ff6:	88 23       	and	r24, r24
     ff8:	61 f0       	breq	.+24     	; 0x1012 <CDC_Device_ConfigureEndpoints+0x42>
     ffa:	61 e0       	ldi	r22, 0x01	; 1
     ffc:	ce 01       	movw	r24, r28
     ffe:	06 96       	adiw	r24, 0x06	; 6
    1000:	88 dc       	rcall	.-1776   	; 0x912 <Endpoint_ConfigureEndpointTable>
    1002:	88 23       	and	r24, r24
    1004:	31 f0       	breq	.+12     	; 0x1012 <CDC_Device_ConfigureEndpoints+0x42>
    1006:	61 e0       	ldi	r22, 0x01	; 1
    1008:	ce 01       	movw	r24, r28
    100a:	0b 96       	adiw	r24, 0x0b	; 11
    100c:	df 91       	pop	r29
    100e:	cf 91       	pop	r28
    1010:	80 cc       	rjmp	.-1792   	; 0x912 <Endpoint_ConfigureEndpointTable>
    1012:	80 e0       	ldi	r24, 0x00	; 0
    1014:	df 91       	pop	r29
    1016:	cf 91       	pop	r28
    1018:	08 95       	ret

0000101a <CDC_Device_SendByte>:
    101a:	cf 93       	push	r28
    101c:	c6 2f       	mov	r28, r22
    101e:	20 91 71 01 	lds	r18, 0x0171
    1022:	24 30       	cpi	r18, 0x04	; 4
    1024:	f1 f4       	brne	.+60     	; 0x1062 <CDC_Device_SendByte+0x48>
    1026:	fc 01       	movw	r30, r24
    1028:	44 89       	ldd	r20, Z+20	; 0x14
    102a:	55 89       	ldd	r21, Z+21	; 0x15
    102c:	66 89       	ldd	r22, Z+22	; 0x16
    102e:	77 89       	ldd	r23, Z+23	; 0x17
    1030:	45 2b       	or	r20, r21
    1032:	46 2b       	or	r20, r22
    1034:	47 2b       	or	r20, r23
    1036:	a9 f0       	breq	.+42     	; 0x1062 <CDC_Device_SendByte+0x48>
    1038:	81 81       	ldd	r24, Z+1	; 0x01
    103a:	8f 70       	andi	r24, 0x0F	; 15
    103c:	80 93 e9 00 	sts	0x00E9, r24
    1040:	80 91 e8 00 	lds	r24, 0x00E8
    1044:	85 ff       	sbrs	r24, 5
    1046:	04 c0       	rjmp	.+8      	; 0x1050 <CDC_Device_SendByte+0x36>
    1048:	c0 93 f1 00 	sts	0x00F1, r28
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	0a c0       	rjmp	.+20     	; 0x1064 <CDC_Device_SendByte+0x4a>
    1050:	80 91 e8 00 	lds	r24, 0x00E8
    1054:	8e 77       	andi	r24, 0x7E	; 126
    1056:	80 93 e8 00 	sts	0x00E8, r24
    105a:	b9 dc       	rcall	.-1678   	; 0x9ce <Endpoint_WaitUntilReady>
    105c:	88 23       	and	r24, r24
    105e:	a1 f3       	breq	.-24     	; 0x1048 <CDC_Device_SendByte+0x2e>
    1060:	01 c0       	rjmp	.+2      	; 0x1064 <CDC_Device_SendByte+0x4a>
    1062:	82 e0       	ldi	r24, 0x02	; 2
    1064:	cf 91       	pop	r28
    1066:	08 95       	ret

00001068 <CDC_Device_putchar>:
    1068:	fb 01       	movw	r30, r22
    106a:	68 2f       	mov	r22, r24
    106c:	84 85       	ldd	r24, Z+12	; 0x0c
    106e:	95 85       	ldd	r25, Z+13	; 0x0d
    1070:	d4 df       	rcall	.-88     	; 0x101a <CDC_Device_SendByte>
    1072:	21 e0       	ldi	r18, 0x01	; 1
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	81 11       	cpse	r24, r1
    1078:	02 c0       	rjmp	.+4      	; 0x107e <CDC_Device_putchar+0x16>
    107a:	20 e0       	ldi	r18, 0x00	; 0
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	88 27       	eor	r24, r24
    1080:	99 27       	eor	r25, r25
    1082:	82 1b       	sub	r24, r18
    1084:	93 0b       	sbc	r25, r19
    1086:	08 95       	ret

00001088 <CDC_Device_Flush>:
    1088:	20 91 71 01 	lds	r18, 0x0171
    108c:	24 30       	cpi	r18, 0x04	; 4
    108e:	41 f5       	brne	.+80     	; 0x10e0 <CDC_Device_Flush+0x58>
    1090:	fc 01       	movw	r30, r24
    1092:	44 89       	ldd	r20, Z+20	; 0x14
    1094:	55 89       	ldd	r21, Z+21	; 0x15
    1096:	66 89       	ldd	r22, Z+22	; 0x16
    1098:	77 89       	ldd	r23, Z+23	; 0x17
    109a:	45 2b       	or	r20, r21
    109c:	46 2b       	or	r20, r22
    109e:	47 2b       	or	r20, r23
    10a0:	f9 f0       	breq	.+62     	; 0x10e0 <CDC_Device_Flush+0x58>
    10a2:	81 81       	ldd	r24, Z+1	; 0x01
    10a4:	8f 70       	andi	r24, 0x0F	; 15
    10a6:	80 93 e9 00 	sts	0x00E9, r24
    10aa:	20 91 f3 00 	lds	r18, 0x00F3
    10ae:	80 91 f2 00 	lds	r24, 0x00F2
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	92 2b       	or	r25, r18
    10b6:	89 2b       	or	r24, r25
    10b8:	89 f0       	breq	.+34     	; 0x10dc <CDC_Device_Flush+0x54>
    10ba:	90 91 e8 00 	lds	r25, 0x00E8
    10be:	80 91 e8 00 	lds	r24, 0x00E8
    10c2:	8e 77       	andi	r24, 0x7E	; 126
    10c4:	80 93 e8 00 	sts	0x00E8, r24
    10c8:	95 fd       	sbrc	r25, 5
    10ca:	08 c0       	rjmp	.+16     	; 0x10dc <CDC_Device_Flush+0x54>
    10cc:	80 dc       	rcall	.-1792   	; 0x9ce <Endpoint_WaitUntilReady>
    10ce:	81 11       	cpse	r24, r1
    10d0:	08 c0       	rjmp	.+16     	; 0x10e2 <CDC_Device_Flush+0x5a>
    10d2:	80 91 e8 00 	lds	r24, 0x00E8
    10d6:	8e 77       	andi	r24, 0x7E	; 126
    10d8:	80 93 e8 00 	sts	0x00E8, r24
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	08 95       	ret
    10e0:	82 e0       	ldi	r24, 0x02	; 2
    10e2:	08 95       	ret

000010e4 <CDC_Device_USBTask>:
    10e4:	20 91 71 01 	lds	r18, 0x0171
    10e8:	24 30       	cpi	r18, 0x04	; 4
    10ea:	89 f4       	brne	.+34     	; 0x110e <CDC_Device_USBTask+0x2a>
    10ec:	fc 01       	movw	r30, r24
    10ee:	44 89       	ldd	r20, Z+20	; 0x14
    10f0:	55 89       	ldd	r21, Z+21	; 0x15
    10f2:	66 89       	ldd	r22, Z+22	; 0x16
    10f4:	77 89       	ldd	r23, Z+23	; 0x17
    10f6:	45 2b       	or	r20, r21
    10f8:	46 2b       	or	r20, r22
    10fa:	47 2b       	or	r20, r23
    10fc:	41 f0       	breq	.+16     	; 0x110e <CDC_Device_USBTask+0x2a>
    10fe:	21 81       	ldd	r18, Z+1	; 0x01
    1100:	2f 70       	andi	r18, 0x0F	; 15
    1102:	20 93 e9 00 	sts	0x00E9, r18
    1106:	20 91 e8 00 	lds	r18, 0x00E8
    110a:	20 fd       	sbrc	r18, 0
    110c:	bd cf       	rjmp	.-134    	; 0x1088 <CDC_Device_Flush>
    110e:	08 95       	ret

00001110 <CDC_Device_ReceiveByte>:
    1110:	20 91 71 01 	lds	r18, 0x0171
    1114:	24 30       	cpi	r18, 0x04	; 4
    1116:	19 f0       	breq	.+6      	; 0x111e <CDC_Device_ReceiveByte+0xe>
    1118:	8f ef       	ldi	r24, 0xFF	; 255
    111a:	9f ef       	ldi	r25, 0xFF	; 255
    111c:	08 95       	ret
    111e:	fc 01       	movw	r30, r24
    1120:	44 89       	ldd	r20, Z+20	; 0x14
    1122:	55 89       	ldd	r21, Z+21	; 0x15
    1124:	66 89       	ldd	r22, Z+22	; 0x16
    1126:	77 89       	ldd	r23, Z+23	; 0x17
    1128:	45 2b       	or	r20, r21
    112a:	46 2b       	or	r20, r22
    112c:	47 2b       	or	r20, r23
    112e:	a1 f3       	breq	.-24     	; 0x1118 <CDC_Device_ReceiveByte+0x8>
    1130:	86 81       	ldd	r24, Z+6	; 0x06
    1132:	8f 70       	andi	r24, 0x0F	; 15
    1134:	80 93 e9 00 	sts	0x00E9, r24
    1138:	80 91 e8 00 	lds	r24, 0x00E8
    113c:	82 ff       	sbrs	r24, 2
    113e:	ec cf       	rjmp	.-40     	; 0x1118 <CDC_Device_ReceiveByte+0x8>
    1140:	20 91 f3 00 	lds	r18, 0x00F3
    1144:	80 91 f2 00 	lds	r24, 0x00F2
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	92 2b       	or	r25, r18
    114c:	89 2b       	or	r24, r25
    114e:	21 f0       	breq	.+8      	; 0x1158 <CDC_Device_ReceiveByte+0x48>
    1150:	20 91 f1 00 	lds	r18, 0x00F1
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	02 c0       	rjmp	.+4      	; 0x115c <CDC_Device_ReceiveByte+0x4c>
    1158:	2f ef       	ldi	r18, 0xFF	; 255
    115a:	3f ef       	ldi	r19, 0xFF	; 255
    115c:	40 91 f3 00 	lds	r20, 0x00F3
    1160:	80 91 f2 00 	lds	r24, 0x00F2
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	94 2b       	or	r25, r20
    1168:	89 2b       	or	r24, r25
    116a:	29 f4       	brne	.+10     	; 0x1176 <CDC_Device_ReceiveByte+0x66>
    116c:	80 91 e8 00 	lds	r24, 0x00E8
    1170:	8b 77       	andi	r24, 0x7B	; 123
    1172:	80 93 e8 00 	sts	0x00E8, r24
    1176:	c9 01       	movw	r24, r18
    1178:	08 95       	ret

0000117a <CDC_Device_getchar>:
    117a:	fc 01       	movw	r30, r24
    117c:	84 85       	ldd	r24, Z+12	; 0x0c
    117e:	95 85       	ldd	r25, Z+13	; 0x0d
    1180:	c7 df       	rcall	.-114    	; 0x1110 <CDC_Device_ReceiveByte>
    1182:	97 ff       	sbrs	r25, 7
    1184:	02 c0       	rjmp	.+4      	; 0x118a <CDC_Device_getchar+0x10>
    1186:	8e ef       	ldi	r24, 0xFE	; 254
    1188:	9f ef       	ldi	r25, 0xFF	; 255
    118a:	08 95       	ret

0000118c <CDC_Device_CreateStream>:
    118c:	fb 01       	movw	r30, r22
    118e:	2e e0       	ldi	r18, 0x0E	; 14
    1190:	db 01       	movw	r26, r22
    1192:	1d 92       	st	X+, r1
    1194:	2a 95       	dec	r18
    1196:	e9 f7       	brne	.-6      	; 0x1192 <CDC_Device_CreateStream+0x6>
    1198:	23 e0       	ldi	r18, 0x03	; 3
    119a:	23 83       	std	Z+3, r18	; 0x03
    119c:	24 e3       	ldi	r18, 0x34	; 52
    119e:	38 e0       	ldi	r19, 0x08	; 8
    11a0:	31 87       	std	Z+9, r19	; 0x09
    11a2:	20 87       	std	Z+8, r18	; 0x08
    11a4:	2d eb       	ldi	r18, 0xBD	; 189
    11a6:	38 e0       	ldi	r19, 0x08	; 8
    11a8:	33 87       	std	Z+11, r19	; 0x0b
    11aa:	22 87       	std	Z+10, r18	; 0x0a
    11ac:	95 87       	std	Z+13, r25	; 0x0d
    11ae:	84 87       	std	Z+12, r24	; 0x0c
    11b0:	08 95       	ret

000011b2 <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
    11b2:	08 95       	ret

000011b4 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    11b4:	cf 93       	push	r28
    11b6:	df 93       	push	r29
    11b8:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    11ba:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    11be:	83 ff       	sbrs	r24, 3
    11c0:	a6 c0       	rjmp	.+332    	; 0x130e <CDC_Device_ProcessControlRequest+0x15a>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    11c2:	88 81       	ld	r24, Y
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	20 91 76 01 	lds	r18, 0x0176
    11ca:	30 91 77 01 	lds	r19, 0x0177
    11ce:	28 17       	cp	r18, r24
    11d0:	39 07       	cpc	r19, r25
    11d2:	09 f0       	breq	.+2      	; 0x11d6 <CDC_Device_ProcessControlRequest+0x22>
    11d4:	9c c0       	rjmp	.+312    	; 0x130e <CDC_Device_ProcessControlRequest+0x15a>
	  return;

	switch (USB_ControlRequest.bRequest)
    11d6:	80 91 73 01 	lds	r24, 0x0173
    11da:	81 32       	cpi	r24, 0x21	; 33
    11dc:	61 f0       	breq	.+24     	; 0x11f6 <CDC_Device_ProcessControlRequest+0x42>
    11de:	20 f4       	brcc	.+8      	; 0x11e8 <CDC_Device_ProcessControlRequest+0x34>
    11e0:	80 32       	cpi	r24, 0x20	; 32
    11e2:	09 f4       	brne	.+2      	; 0x11e6 <CDC_Device_ProcessControlRequest+0x32>
    11e4:	3e c0       	rjmp	.+124    	; 0x1262 <CDC_Device_ProcessControlRequest+0xae>
    11e6:	93 c0       	rjmp	.+294    	; 0x130e <CDC_Device_ProcessControlRequest+0x15a>
    11e8:	82 32       	cpi	r24, 0x22	; 34
    11ea:	09 f4       	brne	.+2      	; 0x11ee <CDC_Device_ProcessControlRequest+0x3a>
    11ec:	6c c0       	rjmp	.+216    	; 0x12c6 <CDC_Device_ProcessControlRequest+0x112>
    11ee:	83 32       	cpi	r24, 0x23	; 35
    11f0:	09 f4       	brne	.+2      	; 0x11f4 <CDC_Device_ProcessControlRequest+0x40>
    11f2:	7d c0       	rjmp	.+250    	; 0x12ee <CDC_Device_ProcessControlRequest+0x13a>
    11f4:	8c c0       	rjmp	.+280    	; 0x130e <CDC_Device_ProcessControlRequest+0x15a>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    11f6:	80 91 72 01 	lds	r24, 0x0172
    11fa:	81 3a       	cpi	r24, 0xA1	; 161
    11fc:	09 f0       	breq	.+2      	; 0x1200 <CDC_Device_ProcessControlRequest+0x4c>
    11fe:	87 c0       	rjmp	.+270    	; 0x130e <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1200:	80 91 e8 00 	lds	r24, 0x00E8
    1204:	87 7f       	andi	r24, 0xF7	; 247
    1206:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    120a:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
    120e:	80 ff       	sbrs	r24, 0
    1210:	fc cf       	rjmp	.-8      	; 0x120a <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    1212:	4c 89       	ldd	r20, Y+20	; 0x14
    1214:	5d 89       	ldd	r21, Y+21	; 0x15
    1216:	6e 89       	ldd	r22, Y+22	; 0x16
    1218:	7f 89       	ldd	r23, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    121a:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 8);
    121e:	bb 27       	eor	r27, r27
    1220:	a7 2f       	mov	r26, r23
    1222:	96 2f       	mov	r25, r22
    1224:	85 2f       	mov	r24, r21
    1226:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 16);
    122a:	cb 01       	movw	r24, r22
    122c:	aa 27       	eor	r26, r26
    122e:	bb 27       	eor	r27, r27
    1230:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 24);
    1234:	47 2f       	mov	r20, r23
    1236:	55 27       	eor	r21, r21
    1238:	66 27       	eor	r22, r22
    123a:	77 27       	eor	r23, r23
    123c:	40 93 f1 00 	sts	0x00F1, r20
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    1240:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1242:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    1246:	89 8d       	ldd	r24, Y+25	; 0x19
    1248:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    124c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    124e:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1252:	80 91 e8 00 	lds	r24, 0x00E8
    1256:	8e 77       	andi	r24, 0x7E	; 126
    1258:	80 93 e8 00 	sts	0x00E8, r24
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    125c:	df 91       	pop	r29
    125e:	cf 91       	pop	r28
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1260:	95 cb       	rjmp	.-2262   	; 0x98c <Endpoint_ClearStatusStage>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1262:	80 91 72 01 	lds	r24, 0x0172
    1266:	81 32       	cpi	r24, 0x21	; 33
    1268:	09 f0       	breq	.+2      	; 0x126c <CDC_Device_ProcessControlRequest+0xb8>
    126a:	51 c0       	rjmp	.+162    	; 0x130e <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    126c:	80 91 e8 00 	lds	r24, 0x00E8
    1270:	87 7f       	andi	r24, 0xF7	; 247
    1272:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1276:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    127a:	82 fd       	sbrc	r24, 2
    127c:	05 c0       	rjmp	.+10     	; 0x1288 <CDC_Device_ProcessControlRequest+0xd4>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    127e:	80 91 71 01 	lds	r24, 0x0171
    1282:	81 11       	cpse	r24, r1
    1284:	f8 cf       	rjmp	.-16     	; 0x1276 <CDC_Device_ProcessControlRequest+0xc2>
    1286:	43 c0       	rjmp	.+134    	; 0x130e <CDC_Device_ProcessControlRequest+0x15a>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    1288:	30 91 f1 00 	lds	r19, 0x00F1
				Data.Bytes[1] = UEDATX;
    128c:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[2] = UEDATX;
    1290:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[3] = UEDATX;
    1294:	80 91 f1 00 	lds	r24, 0x00F1
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    1298:	3c 8b       	std	Y+20, r19	; 0x14
    129a:	2d 8b       	std	Y+21, r18	; 0x15
    129c:	9e 8b       	std	Y+22, r25	; 0x16
    129e:	8f 8b       	std	Y+23, r24	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    12a0:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    12a4:	88 8f       	std	Y+24, r24	; 0x18
    12a6:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    12aa:	89 8f       	std	Y+25, r24	; 0x19
    12ac:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    12b0:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    12b2:	80 91 e8 00 	lds	r24, 0x00E8
    12b6:	8b 77       	andi	r24, 0x7B	; 123
    12b8:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    12bc:	67 db       	rcall	.-2354   	; 0x98c <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    12be:	ce 01       	movw	r24, r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    12c0:	df 91       	pop	r29
    12c2:	cf 91       	pop	r28
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    12c4:	76 cf       	rjmp	.-276    	; 0x11b2 <CDC_Device_Event_Stub>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    12c6:	80 91 72 01 	lds	r24, 0x0172
    12ca:	81 32       	cpi	r24, 0x21	; 33
    12cc:	01 f5       	brne	.+64     	; 0x130e <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    12ce:	80 91 e8 00 	lds	r24, 0x00E8
    12d2:	87 7f       	andi	r24, 0xF7	; 247
    12d4:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    12d8:	59 db       	rcall	.-2382   	; 0x98c <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    12da:	80 91 74 01 	lds	r24, 0x0174
    12de:	90 91 75 01 	lds	r25, 0x0175
    12e2:	99 8b       	std	Y+17, r25	; 0x11
    12e4:	88 8b       	std	Y+16, r24	; 0x10

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    12e6:	ce 01       	movw	r24, r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    12e8:	df 91       	pop	r29
    12ea:	cf 91       	pop	r28
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    12ec:	62 cf       	rjmp	.-316    	; 0x11b2 <CDC_Device_Event_Stub>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    12ee:	80 91 72 01 	lds	r24, 0x0172
    12f2:	81 32       	cpi	r24, 0x21	; 33
    12f4:	61 f4       	brne	.+24     	; 0x130e <CDC_Device_ProcessControlRequest+0x15a>
    12f6:	80 91 e8 00 	lds	r24, 0x00E8
    12fa:	87 7f       	andi	r24, 0xF7	; 247
    12fc:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1300:	45 db       	rcall	.-2422   	; 0x98c <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    1302:	60 91 74 01 	lds	r22, 0x0174
    1306:	ce 01       	movw	r24, r28
			}

			break;
	}
}
    1308:	df 91       	pop	r29
    130a:	cf 91       	pop	r28
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    130c:	52 cf       	rjmp	.-348    	; 0x11b2 <CDC_Device_Event_Stub>
			}

			break;
	}
}
    130e:	df 91       	pop	r29
    1310:	cf 91       	pop	r28
    1312:	08 95       	ret

00001314 <__subsf3>:
    1314:	50 58       	subi	r21, 0x80	; 128

00001316 <__addsf3>:
    1316:	bb 27       	eor	r27, r27
    1318:	aa 27       	eor	r26, r26
    131a:	0e d0       	rcall	.+28     	; 0x1338 <__addsf3x>
    131c:	1c c1       	rjmp	.+568    	; 0x1556 <__fp_round>
    131e:	0d d1       	rcall	.+538    	; 0x153a <__fp_pscA>
    1320:	30 f0       	brcs	.+12     	; 0x132e <__addsf3+0x18>
    1322:	12 d1       	rcall	.+548    	; 0x1548 <__fp_pscB>
    1324:	20 f0       	brcs	.+8      	; 0x132e <__addsf3+0x18>
    1326:	31 f4       	brne	.+12     	; 0x1334 <__addsf3+0x1e>
    1328:	9f 3f       	cpi	r25, 0xFF	; 255
    132a:	11 f4       	brne	.+4      	; 0x1330 <__addsf3+0x1a>
    132c:	1e f4       	brtc	.+6      	; 0x1334 <__addsf3+0x1e>
    132e:	02 c1       	rjmp	.+516    	; 0x1534 <__fp_nan>
    1330:	0e f4       	brtc	.+2      	; 0x1334 <__addsf3+0x1e>
    1332:	e0 95       	com	r30
    1334:	e7 fb       	bst	r30, 7
    1336:	f8 c0       	rjmp	.+496    	; 0x1528 <__fp_inf>

00001338 <__addsf3x>:
    1338:	e9 2f       	mov	r30, r25
    133a:	1e d1       	rcall	.+572    	; 0x1578 <__fp_split3>
    133c:	80 f3       	brcs	.-32     	; 0x131e <__addsf3+0x8>
    133e:	ba 17       	cp	r27, r26
    1340:	62 07       	cpc	r22, r18
    1342:	73 07       	cpc	r23, r19
    1344:	84 07       	cpc	r24, r20
    1346:	95 07       	cpc	r25, r21
    1348:	18 f0       	brcs	.+6      	; 0x1350 <__addsf3x+0x18>
    134a:	71 f4       	brne	.+28     	; 0x1368 <__addsf3x+0x30>
    134c:	9e f5       	brtc	.+102    	; 0x13b4 <__addsf3x+0x7c>
    134e:	36 c1       	rjmp	.+620    	; 0x15bc <__fp_zero>
    1350:	0e f4       	brtc	.+2      	; 0x1354 <__addsf3x+0x1c>
    1352:	e0 95       	com	r30
    1354:	0b 2e       	mov	r0, r27
    1356:	ba 2f       	mov	r27, r26
    1358:	a0 2d       	mov	r26, r0
    135a:	0b 01       	movw	r0, r22
    135c:	b9 01       	movw	r22, r18
    135e:	90 01       	movw	r18, r0
    1360:	0c 01       	movw	r0, r24
    1362:	ca 01       	movw	r24, r20
    1364:	a0 01       	movw	r20, r0
    1366:	11 24       	eor	r1, r1
    1368:	ff 27       	eor	r31, r31
    136a:	59 1b       	sub	r21, r25
    136c:	99 f0       	breq	.+38     	; 0x1394 <__addsf3x+0x5c>
    136e:	59 3f       	cpi	r21, 0xF9	; 249
    1370:	50 f4       	brcc	.+20     	; 0x1386 <__addsf3x+0x4e>
    1372:	50 3e       	cpi	r21, 0xE0	; 224
    1374:	68 f1       	brcs	.+90     	; 0x13d0 <__addsf3x+0x98>
    1376:	1a 16       	cp	r1, r26
    1378:	f0 40       	sbci	r31, 0x00	; 0
    137a:	a2 2f       	mov	r26, r18
    137c:	23 2f       	mov	r18, r19
    137e:	34 2f       	mov	r19, r20
    1380:	44 27       	eor	r20, r20
    1382:	58 5f       	subi	r21, 0xF8	; 248
    1384:	f3 cf       	rjmp	.-26     	; 0x136c <__addsf3x+0x34>
    1386:	46 95       	lsr	r20
    1388:	37 95       	ror	r19
    138a:	27 95       	ror	r18
    138c:	a7 95       	ror	r26
    138e:	f0 40       	sbci	r31, 0x00	; 0
    1390:	53 95       	inc	r21
    1392:	c9 f7       	brne	.-14     	; 0x1386 <__addsf3x+0x4e>
    1394:	7e f4       	brtc	.+30     	; 0x13b4 <__addsf3x+0x7c>
    1396:	1f 16       	cp	r1, r31
    1398:	ba 0b       	sbc	r27, r26
    139a:	62 0b       	sbc	r22, r18
    139c:	73 0b       	sbc	r23, r19
    139e:	84 0b       	sbc	r24, r20
    13a0:	ba f0       	brmi	.+46     	; 0x13d0 <__addsf3x+0x98>
    13a2:	91 50       	subi	r25, 0x01	; 1
    13a4:	a1 f0       	breq	.+40     	; 0x13ce <__addsf3x+0x96>
    13a6:	ff 0f       	add	r31, r31
    13a8:	bb 1f       	adc	r27, r27
    13aa:	66 1f       	adc	r22, r22
    13ac:	77 1f       	adc	r23, r23
    13ae:	88 1f       	adc	r24, r24
    13b0:	c2 f7       	brpl	.-16     	; 0x13a2 <__addsf3x+0x6a>
    13b2:	0e c0       	rjmp	.+28     	; 0x13d0 <__addsf3x+0x98>
    13b4:	ba 0f       	add	r27, r26
    13b6:	62 1f       	adc	r22, r18
    13b8:	73 1f       	adc	r23, r19
    13ba:	84 1f       	adc	r24, r20
    13bc:	48 f4       	brcc	.+18     	; 0x13d0 <__addsf3x+0x98>
    13be:	87 95       	ror	r24
    13c0:	77 95       	ror	r23
    13c2:	67 95       	ror	r22
    13c4:	b7 95       	ror	r27
    13c6:	f7 95       	ror	r31
    13c8:	9e 3f       	cpi	r25, 0xFE	; 254
    13ca:	08 f0       	brcs	.+2      	; 0x13ce <__addsf3x+0x96>
    13cc:	b3 cf       	rjmp	.-154    	; 0x1334 <__addsf3+0x1e>
    13ce:	93 95       	inc	r25
    13d0:	88 0f       	add	r24, r24
    13d2:	08 f0       	brcs	.+2      	; 0x13d6 <__addsf3x+0x9e>
    13d4:	99 27       	eor	r25, r25
    13d6:	ee 0f       	add	r30, r30
    13d8:	97 95       	ror	r25
    13da:	87 95       	ror	r24
    13dc:	08 95       	ret

000013de <__divsf3>:
    13de:	0c d0       	rcall	.+24     	; 0x13f8 <__divsf3x>
    13e0:	ba c0       	rjmp	.+372    	; 0x1556 <__fp_round>
    13e2:	b2 d0       	rcall	.+356    	; 0x1548 <__fp_pscB>
    13e4:	40 f0       	brcs	.+16     	; 0x13f6 <__divsf3+0x18>
    13e6:	a9 d0       	rcall	.+338    	; 0x153a <__fp_pscA>
    13e8:	30 f0       	brcs	.+12     	; 0x13f6 <__divsf3+0x18>
    13ea:	21 f4       	brne	.+8      	; 0x13f4 <__divsf3+0x16>
    13ec:	5f 3f       	cpi	r21, 0xFF	; 255
    13ee:	19 f0       	breq	.+6      	; 0x13f6 <__divsf3+0x18>
    13f0:	9b c0       	rjmp	.+310    	; 0x1528 <__fp_inf>
    13f2:	51 11       	cpse	r21, r1
    13f4:	e4 c0       	rjmp	.+456    	; 0x15be <__fp_szero>
    13f6:	9e c0       	rjmp	.+316    	; 0x1534 <__fp_nan>

000013f8 <__divsf3x>:
    13f8:	bf d0       	rcall	.+382    	; 0x1578 <__fp_split3>
    13fa:	98 f3       	brcs	.-26     	; 0x13e2 <__divsf3+0x4>

000013fc <__divsf3_pse>:
    13fc:	99 23       	and	r25, r25
    13fe:	c9 f3       	breq	.-14     	; 0x13f2 <__divsf3+0x14>
    1400:	55 23       	and	r21, r21
    1402:	b1 f3       	breq	.-20     	; 0x13f0 <__divsf3+0x12>
    1404:	95 1b       	sub	r25, r21
    1406:	55 0b       	sbc	r21, r21
    1408:	bb 27       	eor	r27, r27
    140a:	aa 27       	eor	r26, r26
    140c:	62 17       	cp	r22, r18
    140e:	73 07       	cpc	r23, r19
    1410:	84 07       	cpc	r24, r20
    1412:	38 f0       	brcs	.+14     	; 0x1422 <__divsf3_pse+0x26>
    1414:	9f 5f       	subi	r25, 0xFF	; 255
    1416:	5f 4f       	sbci	r21, 0xFF	; 255
    1418:	22 0f       	add	r18, r18
    141a:	33 1f       	adc	r19, r19
    141c:	44 1f       	adc	r20, r20
    141e:	aa 1f       	adc	r26, r26
    1420:	a9 f3       	breq	.-22     	; 0x140c <__divsf3_pse+0x10>
    1422:	33 d0       	rcall	.+102    	; 0x148a <__divsf3_pse+0x8e>
    1424:	0e 2e       	mov	r0, r30
    1426:	3a f0       	brmi	.+14     	; 0x1436 <__divsf3_pse+0x3a>
    1428:	e0 e8       	ldi	r30, 0x80	; 128
    142a:	30 d0       	rcall	.+96     	; 0x148c <__divsf3_pse+0x90>
    142c:	91 50       	subi	r25, 0x01	; 1
    142e:	50 40       	sbci	r21, 0x00	; 0
    1430:	e6 95       	lsr	r30
    1432:	00 1c       	adc	r0, r0
    1434:	ca f7       	brpl	.-14     	; 0x1428 <__divsf3_pse+0x2c>
    1436:	29 d0       	rcall	.+82     	; 0x148a <__divsf3_pse+0x8e>
    1438:	fe 2f       	mov	r31, r30
    143a:	27 d0       	rcall	.+78     	; 0x148a <__divsf3_pse+0x8e>
    143c:	66 0f       	add	r22, r22
    143e:	77 1f       	adc	r23, r23
    1440:	88 1f       	adc	r24, r24
    1442:	bb 1f       	adc	r27, r27
    1444:	26 17       	cp	r18, r22
    1446:	37 07       	cpc	r19, r23
    1448:	48 07       	cpc	r20, r24
    144a:	ab 07       	cpc	r26, r27
    144c:	b0 e8       	ldi	r27, 0x80	; 128
    144e:	09 f0       	breq	.+2      	; 0x1452 <__divsf3_pse+0x56>
    1450:	bb 0b       	sbc	r27, r27
    1452:	80 2d       	mov	r24, r0
    1454:	bf 01       	movw	r22, r30
    1456:	ff 27       	eor	r31, r31
    1458:	93 58       	subi	r25, 0x83	; 131
    145a:	5f 4f       	sbci	r21, 0xFF	; 255
    145c:	2a f0       	brmi	.+10     	; 0x1468 <__divsf3_pse+0x6c>
    145e:	9e 3f       	cpi	r25, 0xFE	; 254
    1460:	51 05       	cpc	r21, r1
    1462:	68 f0       	brcs	.+26     	; 0x147e <__divsf3_pse+0x82>
    1464:	61 c0       	rjmp	.+194    	; 0x1528 <__fp_inf>
    1466:	ab c0       	rjmp	.+342    	; 0x15be <__fp_szero>
    1468:	5f 3f       	cpi	r21, 0xFF	; 255
    146a:	ec f3       	brlt	.-6      	; 0x1466 <__divsf3_pse+0x6a>
    146c:	98 3e       	cpi	r25, 0xE8	; 232
    146e:	dc f3       	brlt	.-10     	; 0x1466 <__divsf3_pse+0x6a>
    1470:	86 95       	lsr	r24
    1472:	77 95       	ror	r23
    1474:	67 95       	ror	r22
    1476:	b7 95       	ror	r27
    1478:	f7 95       	ror	r31
    147a:	9f 5f       	subi	r25, 0xFF	; 255
    147c:	c9 f7       	brne	.-14     	; 0x1470 <__divsf3_pse+0x74>
    147e:	88 0f       	add	r24, r24
    1480:	91 1d       	adc	r25, r1
    1482:	96 95       	lsr	r25
    1484:	87 95       	ror	r24
    1486:	97 f9       	bld	r25, 7
    1488:	08 95       	ret
    148a:	e1 e0       	ldi	r30, 0x01	; 1
    148c:	66 0f       	add	r22, r22
    148e:	77 1f       	adc	r23, r23
    1490:	88 1f       	adc	r24, r24
    1492:	bb 1f       	adc	r27, r27
    1494:	62 17       	cp	r22, r18
    1496:	73 07       	cpc	r23, r19
    1498:	84 07       	cpc	r24, r20
    149a:	ba 07       	cpc	r27, r26
    149c:	20 f0       	brcs	.+8      	; 0x14a6 <__divsf3_pse+0xaa>
    149e:	62 1b       	sub	r22, r18
    14a0:	73 0b       	sbc	r23, r19
    14a2:	84 0b       	sbc	r24, r20
    14a4:	ba 0b       	sbc	r27, r26
    14a6:	ee 1f       	adc	r30, r30
    14a8:	88 f7       	brcc	.-30     	; 0x148c <__divsf3_pse+0x90>
    14aa:	e0 95       	com	r30
    14ac:	08 95       	ret

000014ae <__floatunsisf>:
    14ae:	e8 94       	clt
    14b0:	09 c0       	rjmp	.+18     	; 0x14c4 <__floatsisf+0x12>

000014b2 <__floatsisf>:
    14b2:	97 fb       	bst	r25, 7
    14b4:	3e f4       	brtc	.+14     	; 0x14c4 <__floatsisf+0x12>
    14b6:	90 95       	com	r25
    14b8:	80 95       	com	r24
    14ba:	70 95       	com	r23
    14bc:	61 95       	neg	r22
    14be:	7f 4f       	sbci	r23, 0xFF	; 255
    14c0:	8f 4f       	sbci	r24, 0xFF	; 255
    14c2:	9f 4f       	sbci	r25, 0xFF	; 255
    14c4:	99 23       	and	r25, r25
    14c6:	a9 f0       	breq	.+42     	; 0x14f2 <__floatsisf+0x40>
    14c8:	f9 2f       	mov	r31, r25
    14ca:	96 e9       	ldi	r25, 0x96	; 150
    14cc:	bb 27       	eor	r27, r27
    14ce:	93 95       	inc	r25
    14d0:	f6 95       	lsr	r31
    14d2:	87 95       	ror	r24
    14d4:	77 95       	ror	r23
    14d6:	67 95       	ror	r22
    14d8:	b7 95       	ror	r27
    14da:	f1 11       	cpse	r31, r1
    14dc:	f8 cf       	rjmp	.-16     	; 0x14ce <__floatsisf+0x1c>
    14de:	fa f4       	brpl	.+62     	; 0x151e <__floatsisf+0x6c>
    14e0:	bb 0f       	add	r27, r27
    14e2:	11 f4       	brne	.+4      	; 0x14e8 <__floatsisf+0x36>
    14e4:	60 ff       	sbrs	r22, 0
    14e6:	1b c0       	rjmp	.+54     	; 0x151e <__floatsisf+0x6c>
    14e8:	6f 5f       	subi	r22, 0xFF	; 255
    14ea:	7f 4f       	sbci	r23, 0xFF	; 255
    14ec:	8f 4f       	sbci	r24, 0xFF	; 255
    14ee:	9f 4f       	sbci	r25, 0xFF	; 255
    14f0:	16 c0       	rjmp	.+44     	; 0x151e <__floatsisf+0x6c>
    14f2:	88 23       	and	r24, r24
    14f4:	11 f0       	breq	.+4      	; 0x14fa <__floatsisf+0x48>
    14f6:	96 e9       	ldi	r25, 0x96	; 150
    14f8:	11 c0       	rjmp	.+34     	; 0x151c <__floatsisf+0x6a>
    14fa:	77 23       	and	r23, r23
    14fc:	21 f0       	breq	.+8      	; 0x1506 <__floatsisf+0x54>
    14fe:	9e e8       	ldi	r25, 0x8E	; 142
    1500:	87 2f       	mov	r24, r23
    1502:	76 2f       	mov	r23, r22
    1504:	05 c0       	rjmp	.+10     	; 0x1510 <__floatsisf+0x5e>
    1506:	66 23       	and	r22, r22
    1508:	71 f0       	breq	.+28     	; 0x1526 <__floatsisf+0x74>
    150a:	96 e8       	ldi	r25, 0x86	; 134
    150c:	86 2f       	mov	r24, r22
    150e:	70 e0       	ldi	r23, 0x00	; 0
    1510:	60 e0       	ldi	r22, 0x00	; 0
    1512:	2a f0       	brmi	.+10     	; 0x151e <__floatsisf+0x6c>
    1514:	9a 95       	dec	r25
    1516:	66 0f       	add	r22, r22
    1518:	77 1f       	adc	r23, r23
    151a:	88 1f       	adc	r24, r24
    151c:	da f7       	brpl	.-10     	; 0x1514 <__floatsisf+0x62>
    151e:	88 0f       	add	r24, r24
    1520:	96 95       	lsr	r25
    1522:	87 95       	ror	r24
    1524:	97 f9       	bld	r25, 7
    1526:	08 95       	ret

00001528 <__fp_inf>:
    1528:	97 f9       	bld	r25, 7
    152a:	9f 67       	ori	r25, 0x7F	; 127
    152c:	80 e8       	ldi	r24, 0x80	; 128
    152e:	70 e0       	ldi	r23, 0x00	; 0
    1530:	60 e0       	ldi	r22, 0x00	; 0
    1532:	08 95       	ret

00001534 <__fp_nan>:
    1534:	9f ef       	ldi	r25, 0xFF	; 255
    1536:	80 ec       	ldi	r24, 0xC0	; 192
    1538:	08 95       	ret

0000153a <__fp_pscA>:
    153a:	00 24       	eor	r0, r0
    153c:	0a 94       	dec	r0
    153e:	16 16       	cp	r1, r22
    1540:	17 06       	cpc	r1, r23
    1542:	18 06       	cpc	r1, r24
    1544:	09 06       	cpc	r0, r25
    1546:	08 95       	ret

00001548 <__fp_pscB>:
    1548:	00 24       	eor	r0, r0
    154a:	0a 94       	dec	r0
    154c:	12 16       	cp	r1, r18
    154e:	13 06       	cpc	r1, r19
    1550:	14 06       	cpc	r1, r20
    1552:	05 06       	cpc	r0, r21
    1554:	08 95       	ret

00001556 <__fp_round>:
    1556:	09 2e       	mov	r0, r25
    1558:	03 94       	inc	r0
    155a:	00 0c       	add	r0, r0
    155c:	11 f4       	brne	.+4      	; 0x1562 <__fp_round+0xc>
    155e:	88 23       	and	r24, r24
    1560:	52 f0       	brmi	.+20     	; 0x1576 <__fp_round+0x20>
    1562:	bb 0f       	add	r27, r27
    1564:	40 f4       	brcc	.+16     	; 0x1576 <__fp_round+0x20>
    1566:	bf 2b       	or	r27, r31
    1568:	11 f4       	brne	.+4      	; 0x156e <__fp_round+0x18>
    156a:	60 ff       	sbrs	r22, 0
    156c:	04 c0       	rjmp	.+8      	; 0x1576 <__fp_round+0x20>
    156e:	6f 5f       	subi	r22, 0xFF	; 255
    1570:	7f 4f       	sbci	r23, 0xFF	; 255
    1572:	8f 4f       	sbci	r24, 0xFF	; 255
    1574:	9f 4f       	sbci	r25, 0xFF	; 255
    1576:	08 95       	ret

00001578 <__fp_split3>:
    1578:	57 fd       	sbrc	r21, 7
    157a:	90 58       	subi	r25, 0x80	; 128
    157c:	44 0f       	add	r20, r20
    157e:	55 1f       	adc	r21, r21
    1580:	59 f0       	breq	.+22     	; 0x1598 <__fp_splitA+0x10>
    1582:	5f 3f       	cpi	r21, 0xFF	; 255
    1584:	71 f0       	breq	.+28     	; 0x15a2 <__fp_splitA+0x1a>
    1586:	47 95       	ror	r20

00001588 <__fp_splitA>:
    1588:	88 0f       	add	r24, r24
    158a:	97 fb       	bst	r25, 7
    158c:	99 1f       	adc	r25, r25
    158e:	61 f0       	breq	.+24     	; 0x15a8 <__fp_splitA+0x20>
    1590:	9f 3f       	cpi	r25, 0xFF	; 255
    1592:	79 f0       	breq	.+30     	; 0x15b2 <__fp_splitA+0x2a>
    1594:	87 95       	ror	r24
    1596:	08 95       	ret
    1598:	12 16       	cp	r1, r18
    159a:	13 06       	cpc	r1, r19
    159c:	14 06       	cpc	r1, r20
    159e:	55 1f       	adc	r21, r21
    15a0:	f2 cf       	rjmp	.-28     	; 0x1586 <__fp_split3+0xe>
    15a2:	46 95       	lsr	r20
    15a4:	f1 df       	rcall	.-30     	; 0x1588 <__fp_splitA>
    15a6:	08 c0       	rjmp	.+16     	; 0x15b8 <__fp_splitA+0x30>
    15a8:	16 16       	cp	r1, r22
    15aa:	17 06       	cpc	r1, r23
    15ac:	18 06       	cpc	r1, r24
    15ae:	99 1f       	adc	r25, r25
    15b0:	f1 cf       	rjmp	.-30     	; 0x1594 <__fp_splitA+0xc>
    15b2:	86 95       	lsr	r24
    15b4:	71 05       	cpc	r23, r1
    15b6:	61 05       	cpc	r22, r1
    15b8:	08 94       	sec
    15ba:	08 95       	ret

000015bc <__fp_zero>:
    15bc:	e8 94       	clt

000015be <__fp_szero>:
    15be:	bb 27       	eor	r27, r27
    15c0:	66 27       	eor	r22, r22
    15c2:	77 27       	eor	r23, r23
    15c4:	cb 01       	movw	r24, r22
    15c6:	97 f9       	bld	r25, 7
    15c8:	08 95       	ret

000015ca <__mulsf3>:
    15ca:	0b d0       	rcall	.+22     	; 0x15e2 <__mulsf3x>
    15cc:	c4 cf       	rjmp	.-120    	; 0x1556 <__fp_round>
    15ce:	b5 df       	rcall	.-150    	; 0x153a <__fp_pscA>
    15d0:	28 f0       	brcs	.+10     	; 0x15dc <__mulsf3+0x12>
    15d2:	ba df       	rcall	.-140    	; 0x1548 <__fp_pscB>
    15d4:	18 f0       	brcs	.+6      	; 0x15dc <__mulsf3+0x12>
    15d6:	95 23       	and	r25, r21
    15d8:	09 f0       	breq	.+2      	; 0x15dc <__mulsf3+0x12>
    15da:	a6 cf       	rjmp	.-180    	; 0x1528 <__fp_inf>
    15dc:	ab cf       	rjmp	.-170    	; 0x1534 <__fp_nan>
    15de:	11 24       	eor	r1, r1
    15e0:	ee cf       	rjmp	.-36     	; 0x15be <__fp_szero>

000015e2 <__mulsf3x>:
    15e2:	ca df       	rcall	.-108    	; 0x1578 <__fp_split3>
    15e4:	a0 f3       	brcs	.-24     	; 0x15ce <__mulsf3+0x4>

000015e6 <__mulsf3_pse>:
    15e6:	95 9f       	mul	r25, r21
    15e8:	d1 f3       	breq	.-12     	; 0x15de <__mulsf3+0x14>
    15ea:	95 0f       	add	r25, r21
    15ec:	50 e0       	ldi	r21, 0x00	; 0
    15ee:	55 1f       	adc	r21, r21
    15f0:	62 9f       	mul	r22, r18
    15f2:	f0 01       	movw	r30, r0
    15f4:	72 9f       	mul	r23, r18
    15f6:	bb 27       	eor	r27, r27
    15f8:	f0 0d       	add	r31, r0
    15fa:	b1 1d       	adc	r27, r1
    15fc:	63 9f       	mul	r22, r19
    15fe:	aa 27       	eor	r26, r26
    1600:	f0 0d       	add	r31, r0
    1602:	b1 1d       	adc	r27, r1
    1604:	aa 1f       	adc	r26, r26
    1606:	64 9f       	mul	r22, r20
    1608:	66 27       	eor	r22, r22
    160a:	b0 0d       	add	r27, r0
    160c:	a1 1d       	adc	r26, r1
    160e:	66 1f       	adc	r22, r22
    1610:	82 9f       	mul	r24, r18
    1612:	22 27       	eor	r18, r18
    1614:	b0 0d       	add	r27, r0
    1616:	a1 1d       	adc	r26, r1
    1618:	62 1f       	adc	r22, r18
    161a:	73 9f       	mul	r23, r19
    161c:	b0 0d       	add	r27, r0
    161e:	a1 1d       	adc	r26, r1
    1620:	62 1f       	adc	r22, r18
    1622:	83 9f       	mul	r24, r19
    1624:	a0 0d       	add	r26, r0
    1626:	61 1d       	adc	r22, r1
    1628:	22 1f       	adc	r18, r18
    162a:	74 9f       	mul	r23, r20
    162c:	33 27       	eor	r19, r19
    162e:	a0 0d       	add	r26, r0
    1630:	61 1d       	adc	r22, r1
    1632:	23 1f       	adc	r18, r19
    1634:	84 9f       	mul	r24, r20
    1636:	60 0d       	add	r22, r0
    1638:	21 1d       	adc	r18, r1
    163a:	82 2f       	mov	r24, r18
    163c:	76 2f       	mov	r23, r22
    163e:	6a 2f       	mov	r22, r26
    1640:	11 24       	eor	r1, r1
    1642:	9f 57       	subi	r25, 0x7F	; 127
    1644:	50 40       	sbci	r21, 0x00	; 0
    1646:	8a f0       	brmi	.+34     	; 0x166a <__mulsf3_pse+0x84>
    1648:	e1 f0       	breq	.+56     	; 0x1682 <__mulsf3_pse+0x9c>
    164a:	88 23       	and	r24, r24
    164c:	4a f0       	brmi	.+18     	; 0x1660 <__mulsf3_pse+0x7a>
    164e:	ee 0f       	add	r30, r30
    1650:	ff 1f       	adc	r31, r31
    1652:	bb 1f       	adc	r27, r27
    1654:	66 1f       	adc	r22, r22
    1656:	77 1f       	adc	r23, r23
    1658:	88 1f       	adc	r24, r24
    165a:	91 50       	subi	r25, 0x01	; 1
    165c:	50 40       	sbci	r21, 0x00	; 0
    165e:	a9 f7       	brne	.-22     	; 0x164a <__mulsf3_pse+0x64>
    1660:	9e 3f       	cpi	r25, 0xFE	; 254
    1662:	51 05       	cpc	r21, r1
    1664:	70 f0       	brcs	.+28     	; 0x1682 <__mulsf3_pse+0x9c>
    1666:	60 cf       	rjmp	.-320    	; 0x1528 <__fp_inf>
    1668:	aa cf       	rjmp	.-172    	; 0x15be <__fp_szero>
    166a:	5f 3f       	cpi	r21, 0xFF	; 255
    166c:	ec f3       	brlt	.-6      	; 0x1668 <__mulsf3_pse+0x82>
    166e:	98 3e       	cpi	r25, 0xE8	; 232
    1670:	dc f3       	brlt	.-10     	; 0x1668 <__mulsf3_pse+0x82>
    1672:	86 95       	lsr	r24
    1674:	77 95       	ror	r23
    1676:	67 95       	ror	r22
    1678:	b7 95       	ror	r27
    167a:	f7 95       	ror	r31
    167c:	e7 95       	ror	r30
    167e:	9f 5f       	subi	r25, 0xFF	; 255
    1680:	c1 f7       	brne	.-16     	; 0x1672 <__mulsf3_pse+0x8c>
    1682:	fe 2b       	or	r31, r30
    1684:	88 0f       	add	r24, r24
    1686:	91 1d       	adc	r25, r1
    1688:	96 95       	lsr	r25
    168a:	87 95       	ror	r24
    168c:	97 f9       	bld	r25, 7
    168e:	08 95       	ret

00001690 <vfprintf>:
    1690:	a3 e1       	ldi	r26, 0x13	; 19
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	ed e4       	ldi	r30, 0x4D	; 77
    1696:	fb e0       	ldi	r31, 0x0B	; 11
    1698:	6b c3       	rjmp	.+1750   	; 0x1d70 <__prologue_saves__>
    169a:	7c 01       	movw	r14, r24
    169c:	1b 01       	movw	r2, r22
    169e:	6a 01       	movw	r12, r20
    16a0:	fc 01       	movw	r30, r24
    16a2:	17 82       	std	Z+7, r1	; 0x07
    16a4:	16 82       	std	Z+6, r1	; 0x06
    16a6:	83 81       	ldd	r24, Z+3	; 0x03
    16a8:	81 ff       	sbrs	r24, 1
    16aa:	49 c3       	rjmp	.+1682   	; 0x1d3e <vfprintf+0x6ae>
    16ac:	be 01       	movw	r22, r28
    16ae:	6f 5f       	subi	r22, 0xFF	; 255
    16b0:	7f 4f       	sbci	r23, 0xFF	; 255
    16b2:	4b 01       	movw	r8, r22
    16b4:	f7 01       	movw	r30, r14
    16b6:	93 81       	ldd	r25, Z+3	; 0x03
    16b8:	f1 01       	movw	r30, r2
    16ba:	93 fd       	sbrc	r25, 3
    16bc:	85 91       	lpm	r24, Z+
    16be:	93 ff       	sbrs	r25, 3
    16c0:	81 91       	ld	r24, Z+
    16c2:	1f 01       	movw	r2, r30
    16c4:	88 23       	and	r24, r24
    16c6:	09 f4       	brne	.+2      	; 0x16ca <vfprintf+0x3a>
    16c8:	36 c3       	rjmp	.+1644   	; 0x1d36 <vfprintf+0x6a6>
    16ca:	85 32       	cpi	r24, 0x25	; 37
    16cc:	39 f4       	brne	.+14     	; 0x16dc <vfprintf+0x4c>
    16ce:	93 fd       	sbrc	r25, 3
    16d0:	85 91       	lpm	r24, Z+
    16d2:	93 ff       	sbrs	r25, 3
    16d4:	81 91       	ld	r24, Z+
    16d6:	1f 01       	movw	r2, r30
    16d8:	85 32       	cpi	r24, 0x25	; 37
    16da:	31 f4       	brne	.+12     	; 0x16e8 <vfprintf+0x58>
    16dc:	b7 01       	movw	r22, r14
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	ba d5       	rcall	.+2932   	; 0x2256 <fputc>
    16e2:	56 01       	movw	r10, r12
    16e4:	65 01       	movw	r12, r10
    16e6:	e6 cf       	rjmp	.-52     	; 0x16b4 <vfprintf+0x24>
    16e8:	10 e0       	ldi	r17, 0x00	; 0
    16ea:	51 2c       	mov	r5, r1
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	20 32       	cpi	r18, 0x20	; 32
    16f0:	a0 f4       	brcc	.+40     	; 0x171a <vfprintf+0x8a>
    16f2:	8b 32       	cpi	r24, 0x2B	; 43
    16f4:	69 f0       	breq	.+26     	; 0x1710 <vfprintf+0x80>
    16f6:	30 f4       	brcc	.+12     	; 0x1704 <vfprintf+0x74>
    16f8:	80 32       	cpi	r24, 0x20	; 32
    16fa:	59 f0       	breq	.+22     	; 0x1712 <vfprintf+0x82>
    16fc:	83 32       	cpi	r24, 0x23	; 35
    16fe:	69 f4       	brne	.+26     	; 0x171a <vfprintf+0x8a>
    1700:	20 61       	ori	r18, 0x10	; 16
    1702:	2c c0       	rjmp	.+88     	; 0x175c <vfprintf+0xcc>
    1704:	8d 32       	cpi	r24, 0x2D	; 45
    1706:	39 f0       	breq	.+14     	; 0x1716 <vfprintf+0x86>
    1708:	80 33       	cpi	r24, 0x30	; 48
    170a:	39 f4       	brne	.+14     	; 0x171a <vfprintf+0x8a>
    170c:	21 60       	ori	r18, 0x01	; 1
    170e:	26 c0       	rjmp	.+76     	; 0x175c <vfprintf+0xcc>
    1710:	22 60       	ori	r18, 0x02	; 2
    1712:	24 60       	ori	r18, 0x04	; 4
    1714:	23 c0       	rjmp	.+70     	; 0x175c <vfprintf+0xcc>
    1716:	28 60       	ori	r18, 0x08	; 8
    1718:	21 c0       	rjmp	.+66     	; 0x175c <vfprintf+0xcc>
    171a:	27 fd       	sbrc	r18, 7
    171c:	27 c0       	rjmp	.+78     	; 0x176c <vfprintf+0xdc>
    171e:	30 ed       	ldi	r19, 0xD0	; 208
    1720:	38 0f       	add	r19, r24
    1722:	3a 30       	cpi	r19, 0x0A	; 10
    1724:	78 f4       	brcc	.+30     	; 0x1744 <vfprintf+0xb4>
    1726:	26 ff       	sbrs	r18, 6
    1728:	06 c0       	rjmp	.+12     	; 0x1736 <vfprintf+0xa6>
    172a:	fa e0       	ldi	r31, 0x0A	; 10
    172c:	1f 9f       	mul	r17, r31
    172e:	30 0d       	add	r19, r0
    1730:	11 24       	eor	r1, r1
    1732:	13 2f       	mov	r17, r19
    1734:	13 c0       	rjmp	.+38     	; 0x175c <vfprintf+0xcc>
    1736:	6a e0       	ldi	r22, 0x0A	; 10
    1738:	56 9e       	mul	r5, r22
    173a:	30 0d       	add	r19, r0
    173c:	11 24       	eor	r1, r1
    173e:	53 2e       	mov	r5, r19
    1740:	20 62       	ori	r18, 0x20	; 32
    1742:	0c c0       	rjmp	.+24     	; 0x175c <vfprintf+0xcc>
    1744:	8e 32       	cpi	r24, 0x2E	; 46
    1746:	21 f4       	brne	.+8      	; 0x1750 <vfprintf+0xc0>
    1748:	26 fd       	sbrc	r18, 6
    174a:	f5 c2       	rjmp	.+1514   	; 0x1d36 <vfprintf+0x6a6>
    174c:	20 64       	ori	r18, 0x40	; 64
    174e:	06 c0       	rjmp	.+12     	; 0x175c <vfprintf+0xcc>
    1750:	8c 36       	cpi	r24, 0x6C	; 108
    1752:	11 f4       	brne	.+4      	; 0x1758 <vfprintf+0xc8>
    1754:	20 68       	ori	r18, 0x80	; 128
    1756:	02 c0       	rjmp	.+4      	; 0x175c <vfprintf+0xcc>
    1758:	88 36       	cpi	r24, 0x68	; 104
    175a:	41 f4       	brne	.+16     	; 0x176c <vfprintf+0xdc>
    175c:	f1 01       	movw	r30, r2
    175e:	93 fd       	sbrc	r25, 3
    1760:	85 91       	lpm	r24, Z+
    1762:	93 ff       	sbrs	r25, 3
    1764:	81 91       	ld	r24, Z+
    1766:	1f 01       	movw	r2, r30
    1768:	81 11       	cpse	r24, r1
    176a:	c1 cf       	rjmp	.-126    	; 0x16ee <vfprintf+0x5e>
    176c:	9b eb       	ldi	r25, 0xBB	; 187
    176e:	98 0f       	add	r25, r24
    1770:	93 30       	cpi	r25, 0x03	; 3
    1772:	18 f4       	brcc	.+6      	; 0x177a <vfprintf+0xea>
    1774:	20 61       	ori	r18, 0x10	; 16
    1776:	80 5e       	subi	r24, 0xE0	; 224
    1778:	06 c0       	rjmp	.+12     	; 0x1786 <vfprintf+0xf6>
    177a:	9b e9       	ldi	r25, 0x9B	; 155
    177c:	98 0f       	add	r25, r24
    177e:	93 30       	cpi	r25, 0x03	; 3
    1780:	08 f0       	brcs	.+2      	; 0x1784 <vfprintf+0xf4>
    1782:	9a c1       	rjmp	.+820    	; 0x1ab8 <vfprintf+0x428>
    1784:	2f 7e       	andi	r18, 0xEF	; 239
    1786:	26 ff       	sbrs	r18, 6
    1788:	16 e0       	ldi	r17, 0x06	; 6
    178a:	2f 73       	andi	r18, 0x3F	; 63
    178c:	72 2e       	mov	r7, r18
    178e:	85 36       	cpi	r24, 0x65	; 101
    1790:	21 f4       	brne	.+8      	; 0x179a <vfprintf+0x10a>
    1792:	f2 2f       	mov	r31, r18
    1794:	f0 64       	ori	r31, 0x40	; 64
    1796:	7f 2e       	mov	r7, r31
    1798:	08 c0       	rjmp	.+16     	; 0x17aa <vfprintf+0x11a>
    179a:	86 36       	cpi	r24, 0x66	; 102
    179c:	21 f4       	brne	.+8      	; 0x17a6 <vfprintf+0x116>
    179e:	62 2f       	mov	r22, r18
    17a0:	60 68       	ori	r22, 0x80	; 128
    17a2:	76 2e       	mov	r7, r22
    17a4:	02 c0       	rjmp	.+4      	; 0x17aa <vfprintf+0x11a>
    17a6:	11 11       	cpse	r17, r1
    17a8:	11 50       	subi	r17, 0x01	; 1
    17aa:	77 fe       	sbrs	r7, 7
    17ac:	07 c0       	rjmp	.+14     	; 0x17bc <vfprintf+0x12c>
    17ae:	1c 33       	cpi	r17, 0x3C	; 60
    17b0:	48 f4       	brcc	.+18     	; 0x17c4 <vfprintf+0x134>
    17b2:	44 24       	eor	r4, r4
    17b4:	43 94       	inc	r4
    17b6:	41 0e       	add	r4, r17
    17b8:	27 e0       	ldi	r18, 0x07	; 7
    17ba:	0b c0       	rjmp	.+22     	; 0x17d2 <vfprintf+0x142>
    17bc:	18 30       	cpi	r17, 0x08	; 8
    17be:	30 f4       	brcc	.+12     	; 0x17cc <vfprintf+0x13c>
    17c0:	21 2f       	mov	r18, r17
    17c2:	06 c0       	rjmp	.+12     	; 0x17d0 <vfprintf+0x140>
    17c4:	27 e0       	ldi	r18, 0x07	; 7
    17c6:	4c e3       	ldi	r20, 0x3C	; 60
    17c8:	44 2e       	mov	r4, r20
    17ca:	03 c0       	rjmp	.+6      	; 0x17d2 <vfprintf+0x142>
    17cc:	27 e0       	ldi	r18, 0x07	; 7
    17ce:	17 e0       	ldi	r17, 0x07	; 7
    17d0:	41 2c       	mov	r4, r1
    17d2:	56 01       	movw	r10, r12
    17d4:	74 e0       	ldi	r23, 0x04	; 4
    17d6:	a7 0e       	add	r10, r23
    17d8:	b1 1c       	adc	r11, r1
    17da:	f6 01       	movw	r30, r12
    17dc:	60 81       	ld	r22, Z
    17de:	71 81       	ldd	r23, Z+1	; 0x01
    17e0:	82 81       	ldd	r24, Z+2	; 0x02
    17e2:	93 81       	ldd	r25, Z+3	; 0x03
    17e4:	04 2d       	mov	r16, r4
    17e6:	a4 01       	movw	r20, r8
    17e8:	21 d4       	rcall	.+2114   	; 0x202c <__ftoa_engine>
    17ea:	6c 01       	movw	r12, r24
    17ec:	09 81       	ldd	r16, Y+1	; 0x01
    17ee:	00 ff       	sbrs	r16, 0
    17f0:	02 c0       	rjmp	.+4      	; 0x17f6 <vfprintf+0x166>
    17f2:	03 ff       	sbrs	r16, 3
    17f4:	06 c0       	rjmp	.+12     	; 0x1802 <vfprintf+0x172>
    17f6:	71 fc       	sbrc	r7, 1
    17f8:	07 c0       	rjmp	.+14     	; 0x1808 <vfprintf+0x178>
    17fa:	72 fc       	sbrc	r7, 2
    17fc:	08 c0       	rjmp	.+16     	; 0x180e <vfprintf+0x17e>
    17fe:	61 2c       	mov	r6, r1
    1800:	08 c0       	rjmp	.+16     	; 0x1812 <vfprintf+0x182>
    1802:	3d e2       	ldi	r19, 0x2D	; 45
    1804:	63 2e       	mov	r6, r19
    1806:	05 c0       	rjmp	.+10     	; 0x1812 <vfprintf+0x182>
    1808:	2b e2       	ldi	r18, 0x2B	; 43
    180a:	62 2e       	mov	r6, r18
    180c:	02 c0       	rjmp	.+4      	; 0x1812 <vfprintf+0x182>
    180e:	90 e2       	ldi	r25, 0x20	; 32
    1810:	69 2e       	mov	r6, r25
    1812:	80 2f       	mov	r24, r16
    1814:	8c 70       	andi	r24, 0x0C	; 12
    1816:	81 f1       	breq	.+96     	; 0x1878 <vfprintf+0x1e8>
    1818:	66 20       	and	r6, r6
    181a:	11 f0       	breq	.+4      	; 0x1820 <vfprintf+0x190>
    181c:	84 e0       	ldi	r24, 0x04	; 4
    181e:	01 c0       	rjmp	.+2      	; 0x1822 <vfprintf+0x192>
    1820:	83 e0       	ldi	r24, 0x03	; 3
    1822:	85 15       	cp	r24, r5
    1824:	10 f0       	brcs	.+4      	; 0x182a <vfprintf+0x19a>
    1826:	51 2c       	mov	r5, r1
    1828:	0a c0       	rjmp	.+20     	; 0x183e <vfprintf+0x1ae>
    182a:	58 1a       	sub	r5, r24
    182c:	73 fc       	sbrc	r7, 3
    182e:	07 c0       	rjmp	.+14     	; 0x183e <vfprintf+0x1ae>
    1830:	b7 01       	movw	r22, r14
    1832:	80 e2       	ldi	r24, 0x20	; 32
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	0f d5       	rcall	.+2590   	; 0x2256 <fputc>
    1838:	5a 94       	dec	r5
    183a:	d1 f7       	brne	.-12     	; 0x1830 <vfprintf+0x1a0>
    183c:	f4 cf       	rjmp	.-24     	; 0x1826 <vfprintf+0x196>
    183e:	66 20       	and	r6, r6
    1840:	21 f0       	breq	.+8      	; 0x184a <vfprintf+0x1ba>
    1842:	b7 01       	movw	r22, r14
    1844:	86 2d       	mov	r24, r6
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	06 d5       	rcall	.+2572   	; 0x2256 <fputc>
    184a:	03 fd       	sbrc	r16, 3
    184c:	03 c0       	rjmp	.+6      	; 0x1854 <vfprintf+0x1c4>
    184e:	02 ec       	ldi	r16, 0xC2	; 194
    1850:	11 e0       	ldi	r17, 0x01	; 1
    1852:	02 c0       	rjmp	.+4      	; 0x1858 <vfprintf+0x1c8>
    1854:	0e eb       	ldi	r16, 0xBE	; 190
    1856:	11 e0       	ldi	r17, 0x01	; 1
    1858:	f7 2d       	mov	r31, r7
    185a:	f0 71       	andi	r31, 0x10	; 16
    185c:	7f 2e       	mov	r7, r31
    185e:	f8 01       	movw	r30, r16
    1860:	84 91       	lpm	r24, Z
    1862:	88 23       	and	r24, r24
    1864:	09 f4       	brne	.+2      	; 0x1868 <vfprintf+0x1d8>
    1866:	5e c2       	rjmp	.+1212   	; 0x1d24 <vfprintf+0x694>
    1868:	71 10       	cpse	r7, r1
    186a:	80 52       	subi	r24, 0x20	; 32
    186c:	b7 01       	movw	r22, r14
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	f2 d4       	rcall	.+2532   	; 0x2256 <fputc>
    1872:	0f 5f       	subi	r16, 0xFF	; 255
    1874:	1f 4f       	sbci	r17, 0xFF	; 255
    1876:	f3 cf       	rjmp	.-26     	; 0x185e <vfprintf+0x1ce>
    1878:	77 fe       	sbrs	r7, 7
    187a:	0f c0       	rjmp	.+30     	; 0x189a <vfprintf+0x20a>
    187c:	4c 0c       	add	r4, r12
    187e:	04 ff       	sbrs	r16, 4
    1880:	04 c0       	rjmp	.+8      	; 0x188a <vfprintf+0x1fa>
    1882:	8a 81       	ldd	r24, Y+2	; 0x02
    1884:	81 33       	cpi	r24, 0x31	; 49
    1886:	09 f4       	brne	.+2      	; 0x188a <vfprintf+0x1fa>
    1888:	4a 94       	dec	r4
    188a:	14 14       	cp	r1, r4
    188c:	74 f5       	brge	.+92     	; 0x18ea <vfprintf+0x25a>
    188e:	f8 e0       	ldi	r31, 0x08	; 8
    1890:	f4 15       	cp	r31, r4
    1892:	78 f5       	brcc	.+94     	; 0x18f2 <vfprintf+0x262>
    1894:	88 e0       	ldi	r24, 0x08	; 8
    1896:	48 2e       	mov	r4, r24
    1898:	2c c0       	rjmp	.+88     	; 0x18f2 <vfprintf+0x262>
    189a:	76 fc       	sbrc	r7, 6
    189c:	2a c0       	rjmp	.+84     	; 0x18f2 <vfprintf+0x262>
    189e:	81 2f       	mov	r24, r17
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	8c 15       	cp	r24, r12
    18a4:	9d 05       	cpc	r25, r13
    18a6:	9c f0       	brlt	.+38     	; 0x18ce <vfprintf+0x23e>
    18a8:	6c ef       	ldi	r22, 0xFC	; 252
    18aa:	c6 16       	cp	r12, r22
    18ac:	6f ef       	ldi	r22, 0xFF	; 255
    18ae:	d6 06       	cpc	r13, r22
    18b0:	74 f0       	brlt	.+28     	; 0x18ce <vfprintf+0x23e>
    18b2:	77 2d       	mov	r23, r7
    18b4:	70 68       	ori	r23, 0x80	; 128
    18b6:	77 2e       	mov	r7, r23
    18b8:	0a c0       	rjmp	.+20     	; 0x18ce <vfprintf+0x23e>
    18ba:	e2 e0       	ldi	r30, 0x02	; 2
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	ec 0f       	add	r30, r28
    18c0:	fd 1f       	adc	r31, r29
    18c2:	e1 0f       	add	r30, r17
    18c4:	f1 1d       	adc	r31, r1
    18c6:	80 81       	ld	r24, Z
    18c8:	80 33       	cpi	r24, 0x30	; 48
    18ca:	19 f4       	brne	.+6      	; 0x18d2 <vfprintf+0x242>
    18cc:	11 50       	subi	r17, 0x01	; 1
    18ce:	11 11       	cpse	r17, r1
    18d0:	f4 cf       	rjmp	.-24     	; 0x18ba <vfprintf+0x22a>
    18d2:	77 fe       	sbrs	r7, 7
    18d4:	0e c0       	rjmp	.+28     	; 0x18f2 <vfprintf+0x262>
    18d6:	44 24       	eor	r4, r4
    18d8:	43 94       	inc	r4
    18da:	41 0e       	add	r4, r17
    18dc:	81 2f       	mov	r24, r17
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	c8 16       	cp	r12, r24
    18e2:	d9 06       	cpc	r13, r25
    18e4:	2c f4       	brge	.+10     	; 0x18f0 <vfprintf+0x260>
    18e6:	1c 19       	sub	r17, r12
    18e8:	04 c0       	rjmp	.+8      	; 0x18f2 <vfprintf+0x262>
    18ea:	44 24       	eor	r4, r4
    18ec:	43 94       	inc	r4
    18ee:	01 c0       	rjmp	.+2      	; 0x18f2 <vfprintf+0x262>
    18f0:	10 e0       	ldi	r17, 0x00	; 0
    18f2:	77 fe       	sbrs	r7, 7
    18f4:	07 c0       	rjmp	.+14     	; 0x1904 <vfprintf+0x274>
    18f6:	1c 14       	cp	r1, r12
    18f8:	1d 04       	cpc	r1, r13
    18fa:	3c f4       	brge	.+14     	; 0x190a <vfprintf+0x27a>
    18fc:	96 01       	movw	r18, r12
    18fe:	2f 5f       	subi	r18, 0xFF	; 255
    1900:	3f 4f       	sbci	r19, 0xFF	; 255
    1902:	05 c0       	rjmp	.+10     	; 0x190e <vfprintf+0x27e>
    1904:	25 e0       	ldi	r18, 0x05	; 5
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	02 c0       	rjmp	.+4      	; 0x190e <vfprintf+0x27e>
    190a:	21 e0       	ldi	r18, 0x01	; 1
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	66 20       	and	r6, r6
    1910:	11 f0       	breq	.+4      	; 0x1916 <vfprintf+0x286>
    1912:	2f 5f       	subi	r18, 0xFF	; 255
    1914:	3f 4f       	sbci	r19, 0xFF	; 255
    1916:	11 23       	and	r17, r17
    1918:	31 f0       	breq	.+12     	; 0x1926 <vfprintf+0x296>
    191a:	41 2f       	mov	r20, r17
    191c:	50 e0       	ldi	r21, 0x00	; 0
    191e:	4f 5f       	subi	r20, 0xFF	; 255
    1920:	5f 4f       	sbci	r21, 0xFF	; 255
    1922:	24 0f       	add	r18, r20
    1924:	35 1f       	adc	r19, r21
    1926:	45 2d       	mov	r20, r5
    1928:	50 e0       	ldi	r21, 0x00	; 0
    192a:	24 17       	cp	r18, r20
    192c:	35 07       	cpc	r19, r21
    192e:	14 f4       	brge	.+4      	; 0x1934 <vfprintf+0x2a4>
    1930:	52 1a       	sub	r5, r18
    1932:	01 c0       	rjmp	.+2      	; 0x1936 <vfprintf+0x2a6>
    1934:	51 2c       	mov	r5, r1
    1936:	87 2d       	mov	r24, r7
    1938:	89 70       	andi	r24, 0x09	; 9
    193a:	41 f4       	brne	.+16     	; 0x194c <vfprintf+0x2bc>
    193c:	55 20       	and	r5, r5
    193e:	31 f0       	breq	.+12     	; 0x194c <vfprintf+0x2bc>
    1940:	b7 01       	movw	r22, r14
    1942:	80 e2       	ldi	r24, 0x20	; 32
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	87 d4       	rcall	.+2318   	; 0x2256 <fputc>
    1948:	5a 94       	dec	r5
    194a:	f8 cf       	rjmp	.-16     	; 0x193c <vfprintf+0x2ac>
    194c:	66 20       	and	r6, r6
    194e:	21 f0       	breq	.+8      	; 0x1958 <vfprintf+0x2c8>
    1950:	b7 01       	movw	r22, r14
    1952:	86 2d       	mov	r24, r6
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	7f d4       	rcall	.+2302   	; 0x2256 <fputc>
    1958:	73 fc       	sbrc	r7, 3
    195a:	08 c0       	rjmp	.+16     	; 0x196c <vfprintf+0x2dc>
    195c:	55 20       	and	r5, r5
    195e:	31 f0       	breq	.+12     	; 0x196c <vfprintf+0x2dc>
    1960:	b7 01       	movw	r22, r14
    1962:	80 e3       	ldi	r24, 0x30	; 48
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	77 d4       	rcall	.+2286   	; 0x2256 <fputc>
    1968:	5a 94       	dec	r5
    196a:	f8 cf       	rjmp	.-16     	; 0x195c <vfprintf+0x2cc>
    196c:	77 fe       	sbrs	r7, 7
    196e:	5d c0       	rjmp	.+186    	; 0x1a2a <vfprintf+0x39a>
    1970:	9c 2d       	mov	r25, r12
    1972:	8d 2d       	mov	r24, r13
    1974:	d7 fe       	sbrs	r13, 7
    1976:	02 c0       	rjmp	.+4      	; 0x197c <vfprintf+0x2ec>
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	80 e0       	ldi	r24, 0x00	; 0
    197c:	69 2e       	mov	r6, r25
    197e:	78 2e       	mov	r7, r24
    1980:	40 e0       	ldi	r20, 0x00	; 0
    1982:	50 e0       	ldi	r21, 0x00	; 0
    1984:	c6 01       	movw	r24, r12
    1986:	84 19       	sub	r24, r4
    1988:	91 09       	sbc	r25, r1
    198a:	9d 87       	std	Y+13, r25	; 0x0d
    198c:	8c 87       	std	Y+12, r24	; 0x0c
    198e:	96 01       	movw	r18, r12
    1990:	26 19       	sub	r18, r6
    1992:	37 09       	sbc	r19, r7
    1994:	28 0d       	add	r18, r8
    1996:	39 1d       	adc	r19, r9
    1998:	81 2f       	mov	r24, r17
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	ee 27       	eor	r30, r30
    199e:	ff 27       	eor	r31, r31
    19a0:	e8 1b       	sub	r30, r24
    19a2:	f9 0b       	sbc	r31, r25
    19a4:	ff 87       	std	Y+15, r31	; 0x0f
    19a6:	ee 87       	std	Y+14, r30	; 0x0e
    19a8:	ff ef       	ldi	r31, 0xFF	; 255
    19aa:	6f 16       	cp	r6, r31
    19ac:	7f 06       	cpc	r7, r31
    19ae:	61 f4       	brne	.+24     	; 0x19c8 <vfprintf+0x338>
    19b0:	b7 01       	movw	r22, r14
    19b2:	8e e2       	ldi	r24, 0x2E	; 46
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	2b 8b       	std	Y+19, r18	; 0x13
    19b8:	3a 8b       	std	Y+18, r19	; 0x12
    19ba:	48 8b       	std	Y+16, r20	; 0x10
    19bc:	59 8b       	std	Y+17, r21	; 0x11
    19be:	4b d4       	rcall	.+2198   	; 0x2256 <fputc>
    19c0:	59 89       	ldd	r21, Y+17	; 0x11
    19c2:	48 89       	ldd	r20, Y+16	; 0x10
    19c4:	3a 89       	ldd	r19, Y+18	; 0x12
    19c6:	2b 89       	ldd	r18, Y+19	; 0x13
    19c8:	c6 14       	cp	r12, r6
    19ca:	d7 04       	cpc	r13, r7
    19cc:	54 f0       	brlt	.+20     	; 0x19e2 <vfprintf+0x352>
    19ce:	6c 85       	ldd	r22, Y+12	; 0x0c
    19d0:	7d 85       	ldd	r23, Y+13	; 0x0d
    19d2:	66 15       	cp	r22, r6
    19d4:	77 05       	cpc	r23, r7
    19d6:	2c f4       	brge	.+10     	; 0x19e2 <vfprintf+0x352>
    19d8:	f9 01       	movw	r30, r18
    19da:	e4 0f       	add	r30, r20
    19dc:	f5 1f       	adc	r31, r21
    19de:	81 81       	ldd	r24, Z+1	; 0x01
    19e0:	01 c0       	rjmp	.+2      	; 0x19e4 <vfprintf+0x354>
    19e2:	80 e3       	ldi	r24, 0x30	; 48
    19e4:	71 e0       	ldi	r23, 0x01	; 1
    19e6:	67 1a       	sub	r6, r23
    19e8:	71 08       	sbc	r7, r1
    19ea:	4f 5f       	subi	r20, 0xFF	; 255
    19ec:	5f 4f       	sbci	r21, 0xFF	; 255
    19ee:	ee 85       	ldd	r30, Y+14	; 0x0e
    19f0:	ff 85       	ldd	r31, Y+15	; 0x0f
    19f2:	6e 16       	cp	r6, r30
    19f4:	7f 06       	cpc	r7, r31
    19f6:	64 f0       	brlt	.+24     	; 0x1a10 <vfprintf+0x380>
    19f8:	b7 01       	movw	r22, r14
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	2b 8b       	std	Y+19, r18	; 0x13
    19fe:	3a 8b       	std	Y+18, r19	; 0x12
    1a00:	48 8b       	std	Y+16, r20	; 0x10
    1a02:	59 8b       	std	Y+17, r21	; 0x11
    1a04:	28 d4       	rcall	.+2128   	; 0x2256 <fputc>
    1a06:	2b 89       	ldd	r18, Y+19	; 0x13
    1a08:	3a 89       	ldd	r19, Y+18	; 0x12
    1a0a:	48 89       	ldd	r20, Y+16	; 0x10
    1a0c:	59 89       	ldd	r21, Y+17	; 0x11
    1a0e:	cc cf       	rjmp	.-104    	; 0x19a8 <vfprintf+0x318>
    1a10:	6c 14       	cp	r6, r12
    1a12:	7d 04       	cpc	r7, r13
    1a14:	39 f4       	brne	.+14     	; 0x1a24 <vfprintf+0x394>
    1a16:	9a 81       	ldd	r25, Y+2	; 0x02
    1a18:	96 33       	cpi	r25, 0x36	; 54
    1a1a:	18 f4       	brcc	.+6      	; 0x1a22 <vfprintf+0x392>
    1a1c:	95 33       	cpi	r25, 0x35	; 53
    1a1e:	11 f4       	brne	.+4      	; 0x1a24 <vfprintf+0x394>
    1a20:	04 ff       	sbrs	r16, 4
    1a22:	81 e3       	ldi	r24, 0x31	; 49
    1a24:	b7 01       	movw	r22, r14
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	45 c0       	rjmp	.+138    	; 0x1ab4 <vfprintf+0x424>
    1a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2c:	81 33       	cpi	r24, 0x31	; 49
    1a2e:	09 f0       	breq	.+2      	; 0x1a32 <vfprintf+0x3a2>
    1a30:	0f 7e       	andi	r16, 0xEF	; 239
    1a32:	b7 01       	movw	r22, r14
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	0f d4       	rcall	.+2078   	; 0x2256 <fputc>
    1a38:	11 11       	cpse	r17, r1
    1a3a:	05 c0       	rjmp	.+10     	; 0x1a46 <vfprintf+0x3b6>
    1a3c:	74 fe       	sbrs	r7, 4
    1a3e:	16 c0       	rjmp	.+44     	; 0x1a6c <vfprintf+0x3dc>
    1a40:	85 e4       	ldi	r24, 0x45	; 69
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	15 c0       	rjmp	.+42     	; 0x1a70 <vfprintf+0x3e0>
    1a46:	b7 01       	movw	r22, r14
    1a48:	8e e2       	ldi	r24, 0x2E	; 46
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	04 d4       	rcall	.+2056   	; 0x2256 <fputc>
    1a4e:	82 e0       	ldi	r24, 0x02	; 2
    1a50:	66 24       	eor	r6, r6
    1a52:	63 94       	inc	r6
    1a54:	68 0e       	add	r6, r24
    1a56:	f4 01       	movw	r30, r8
    1a58:	e8 0f       	add	r30, r24
    1a5a:	f1 1d       	adc	r31, r1
    1a5c:	80 81       	ld	r24, Z
    1a5e:	b7 01       	movw	r22, r14
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	f9 d3       	rcall	.+2034   	; 0x2256 <fputc>
    1a64:	11 50       	subi	r17, 0x01	; 1
    1a66:	51 f3       	breq	.-44     	; 0x1a3c <vfprintf+0x3ac>
    1a68:	86 2d       	mov	r24, r6
    1a6a:	f2 cf       	rjmp	.-28     	; 0x1a50 <vfprintf+0x3c0>
    1a6c:	85 e6       	ldi	r24, 0x65	; 101
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	b7 01       	movw	r22, r14
    1a72:	f1 d3       	rcall	.+2018   	; 0x2256 <fputc>
    1a74:	d7 fc       	sbrc	r13, 7
    1a76:	05 c0       	rjmp	.+10     	; 0x1a82 <vfprintf+0x3f2>
    1a78:	c1 14       	cp	r12, r1
    1a7a:	d1 04       	cpc	r13, r1
    1a7c:	39 f4       	brne	.+14     	; 0x1a8c <vfprintf+0x3fc>
    1a7e:	04 ff       	sbrs	r16, 4
    1a80:	05 c0       	rjmp	.+10     	; 0x1a8c <vfprintf+0x3fc>
    1a82:	d1 94       	neg	r13
    1a84:	c1 94       	neg	r12
    1a86:	d1 08       	sbc	r13, r1
    1a88:	8d e2       	ldi	r24, 0x2D	; 45
    1a8a:	01 c0       	rjmp	.+2      	; 0x1a8e <vfprintf+0x3fe>
    1a8c:	8b e2       	ldi	r24, 0x2B	; 43
    1a8e:	b7 01       	movw	r22, r14
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	e1 d3       	rcall	.+1986   	; 0x2256 <fputc>
    1a94:	80 e3       	ldi	r24, 0x30	; 48
    1a96:	6a e0       	ldi	r22, 0x0A	; 10
    1a98:	c6 16       	cp	r12, r22
    1a9a:	d1 04       	cpc	r13, r1
    1a9c:	2c f0       	brlt	.+10     	; 0x1aa8 <vfprintf+0x418>
    1a9e:	8f 5f       	subi	r24, 0xFF	; 255
    1aa0:	fa e0       	ldi	r31, 0x0A	; 10
    1aa2:	cf 1a       	sub	r12, r31
    1aa4:	d1 08       	sbc	r13, r1
    1aa6:	f7 cf       	rjmp	.-18     	; 0x1a96 <vfprintf+0x406>
    1aa8:	b7 01       	movw	r22, r14
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	d4 d3       	rcall	.+1960   	; 0x2256 <fputc>
    1aae:	b7 01       	movw	r22, r14
    1ab0:	c6 01       	movw	r24, r12
    1ab2:	c0 96       	adiw	r24, 0x30	; 48
    1ab4:	d0 d3       	rcall	.+1952   	; 0x2256 <fputc>
    1ab6:	36 c1       	rjmp	.+620    	; 0x1d24 <vfprintf+0x694>
    1ab8:	83 36       	cpi	r24, 0x63	; 99
    1aba:	31 f0       	breq	.+12     	; 0x1ac8 <vfprintf+0x438>
    1abc:	83 37       	cpi	r24, 0x73	; 115
    1abe:	79 f0       	breq	.+30     	; 0x1ade <vfprintf+0x44e>
    1ac0:	83 35       	cpi	r24, 0x53	; 83
    1ac2:	09 f0       	breq	.+2      	; 0x1ac6 <vfprintf+0x436>
    1ac4:	54 c0       	rjmp	.+168    	; 0x1b6e <vfprintf+0x4de>
    1ac6:	20 c0       	rjmp	.+64     	; 0x1b08 <vfprintf+0x478>
    1ac8:	56 01       	movw	r10, r12
    1aca:	72 e0       	ldi	r23, 0x02	; 2
    1acc:	a7 0e       	add	r10, r23
    1ace:	b1 1c       	adc	r11, r1
    1ad0:	f6 01       	movw	r30, r12
    1ad2:	80 81       	ld	r24, Z
    1ad4:	89 83       	std	Y+1, r24	; 0x01
    1ad6:	01 e0       	ldi	r16, 0x01	; 1
    1ad8:	10 e0       	ldi	r17, 0x00	; 0
    1ada:	64 01       	movw	r12, r8
    1adc:	13 c0       	rjmp	.+38     	; 0x1b04 <vfprintf+0x474>
    1ade:	56 01       	movw	r10, r12
    1ae0:	f2 e0       	ldi	r31, 0x02	; 2
    1ae2:	af 0e       	add	r10, r31
    1ae4:	b1 1c       	adc	r11, r1
    1ae6:	f6 01       	movw	r30, r12
    1ae8:	c0 80       	ld	r12, Z
    1aea:	d1 80       	ldd	r13, Z+1	; 0x01
    1aec:	26 ff       	sbrs	r18, 6
    1aee:	03 c0       	rjmp	.+6      	; 0x1af6 <vfprintf+0x466>
    1af0:	61 2f       	mov	r22, r17
    1af2:	70 e0       	ldi	r23, 0x00	; 0
    1af4:	02 c0       	rjmp	.+4      	; 0x1afa <vfprintf+0x46a>
    1af6:	6f ef       	ldi	r22, 0xFF	; 255
    1af8:	7f ef       	ldi	r23, 0xFF	; 255
    1afa:	c6 01       	movw	r24, r12
    1afc:	2b 8b       	std	Y+19, r18	; 0x13
    1afe:	91 d3       	rcall	.+1826   	; 0x2222 <strnlen>
    1b00:	8c 01       	movw	r16, r24
    1b02:	2b 89       	ldd	r18, Y+19	; 0x13
    1b04:	2f 77       	andi	r18, 0x7F	; 127
    1b06:	14 c0       	rjmp	.+40     	; 0x1b30 <vfprintf+0x4a0>
    1b08:	56 01       	movw	r10, r12
    1b0a:	f2 e0       	ldi	r31, 0x02	; 2
    1b0c:	af 0e       	add	r10, r31
    1b0e:	b1 1c       	adc	r11, r1
    1b10:	f6 01       	movw	r30, r12
    1b12:	c0 80       	ld	r12, Z
    1b14:	d1 80       	ldd	r13, Z+1	; 0x01
    1b16:	26 ff       	sbrs	r18, 6
    1b18:	03 c0       	rjmp	.+6      	; 0x1b20 <vfprintf+0x490>
    1b1a:	61 2f       	mov	r22, r17
    1b1c:	70 e0       	ldi	r23, 0x00	; 0
    1b1e:	02 c0       	rjmp	.+4      	; 0x1b24 <vfprintf+0x494>
    1b20:	6f ef       	ldi	r22, 0xFF	; 255
    1b22:	7f ef       	ldi	r23, 0xFF	; 255
    1b24:	c6 01       	movw	r24, r12
    1b26:	2b 8b       	std	Y+19, r18	; 0x13
    1b28:	71 d3       	rcall	.+1762   	; 0x220c <strnlen_P>
    1b2a:	8c 01       	movw	r16, r24
    1b2c:	2b 89       	ldd	r18, Y+19	; 0x13
    1b2e:	20 68       	ori	r18, 0x80	; 128
    1b30:	72 2e       	mov	r7, r18
    1b32:	23 fd       	sbrc	r18, 3
    1b34:	18 c0       	rjmp	.+48     	; 0x1b66 <vfprintf+0x4d6>
    1b36:	85 2d       	mov	r24, r5
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	08 17       	cp	r16, r24
    1b3c:	19 07       	cpc	r17, r25
    1b3e:	98 f4       	brcc	.+38     	; 0x1b66 <vfprintf+0x4d6>
    1b40:	b7 01       	movw	r22, r14
    1b42:	80 e2       	ldi	r24, 0x20	; 32
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	87 d3       	rcall	.+1806   	; 0x2256 <fputc>
    1b48:	5a 94       	dec	r5
    1b4a:	f5 cf       	rjmp	.-22     	; 0x1b36 <vfprintf+0x4a6>
    1b4c:	f6 01       	movw	r30, r12
    1b4e:	77 fc       	sbrc	r7, 7
    1b50:	85 91       	lpm	r24, Z+
    1b52:	77 fe       	sbrs	r7, 7
    1b54:	81 91       	ld	r24, Z+
    1b56:	6f 01       	movw	r12, r30
    1b58:	b7 01       	movw	r22, r14
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	7c d3       	rcall	.+1784   	; 0x2256 <fputc>
    1b5e:	51 10       	cpse	r5, r1
    1b60:	5a 94       	dec	r5
    1b62:	01 50       	subi	r16, 0x01	; 1
    1b64:	11 09       	sbc	r17, r1
    1b66:	01 15       	cp	r16, r1
    1b68:	11 05       	cpc	r17, r1
    1b6a:	81 f7       	brne	.-32     	; 0x1b4c <vfprintf+0x4bc>
    1b6c:	db c0       	rjmp	.+438    	; 0x1d24 <vfprintf+0x694>
    1b6e:	84 36       	cpi	r24, 0x64	; 100
    1b70:	11 f0       	breq	.+4      	; 0x1b76 <vfprintf+0x4e6>
    1b72:	89 36       	cpi	r24, 0x69	; 105
    1b74:	49 f5       	brne	.+82     	; 0x1bc8 <vfprintf+0x538>
    1b76:	56 01       	movw	r10, r12
    1b78:	27 ff       	sbrs	r18, 7
    1b7a:	09 c0       	rjmp	.+18     	; 0x1b8e <vfprintf+0x4fe>
    1b7c:	f4 e0       	ldi	r31, 0x04	; 4
    1b7e:	af 0e       	add	r10, r31
    1b80:	b1 1c       	adc	r11, r1
    1b82:	f6 01       	movw	r30, r12
    1b84:	60 81       	ld	r22, Z
    1b86:	71 81       	ldd	r23, Z+1	; 0x01
    1b88:	82 81       	ldd	r24, Z+2	; 0x02
    1b8a:	93 81       	ldd	r25, Z+3	; 0x03
    1b8c:	0a c0       	rjmp	.+20     	; 0x1ba2 <vfprintf+0x512>
    1b8e:	f2 e0       	ldi	r31, 0x02	; 2
    1b90:	af 0e       	add	r10, r31
    1b92:	b1 1c       	adc	r11, r1
    1b94:	f6 01       	movw	r30, r12
    1b96:	60 81       	ld	r22, Z
    1b98:	71 81       	ldd	r23, Z+1	; 0x01
    1b9a:	88 27       	eor	r24, r24
    1b9c:	77 fd       	sbrc	r23, 7
    1b9e:	80 95       	com	r24
    1ba0:	98 2f       	mov	r25, r24
    1ba2:	02 2f       	mov	r16, r18
    1ba4:	0f 76       	andi	r16, 0x6F	; 111
    1ba6:	97 ff       	sbrs	r25, 7
    1ba8:	08 c0       	rjmp	.+16     	; 0x1bba <vfprintf+0x52a>
    1baa:	90 95       	com	r25
    1bac:	80 95       	com	r24
    1bae:	70 95       	com	r23
    1bb0:	61 95       	neg	r22
    1bb2:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb4:	8f 4f       	sbci	r24, 0xFF	; 255
    1bb6:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb8:	00 68       	ori	r16, 0x80	; 128
    1bba:	2a e0       	ldi	r18, 0x0A	; 10
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	a4 01       	movw	r20, r8
    1bc0:	a4 d3       	rcall	.+1864   	; 0x230a <__ultoa_invert>
    1bc2:	c8 2e       	mov	r12, r24
    1bc4:	c8 18       	sub	r12, r8
    1bc6:	3d c0       	rjmp	.+122    	; 0x1c42 <vfprintf+0x5b2>
    1bc8:	02 2f       	mov	r16, r18
    1bca:	85 37       	cpi	r24, 0x75	; 117
    1bcc:	21 f4       	brne	.+8      	; 0x1bd6 <vfprintf+0x546>
    1bce:	0f 7e       	andi	r16, 0xEF	; 239
    1bd0:	2a e0       	ldi	r18, 0x0A	; 10
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	1d c0       	rjmp	.+58     	; 0x1c10 <vfprintf+0x580>
    1bd6:	09 7f       	andi	r16, 0xF9	; 249
    1bd8:	8f 36       	cpi	r24, 0x6F	; 111
    1bda:	91 f0       	breq	.+36     	; 0x1c00 <vfprintf+0x570>
    1bdc:	18 f4       	brcc	.+6      	; 0x1be4 <vfprintf+0x554>
    1bde:	88 35       	cpi	r24, 0x58	; 88
    1be0:	59 f0       	breq	.+22     	; 0x1bf8 <vfprintf+0x568>
    1be2:	a9 c0       	rjmp	.+338    	; 0x1d36 <vfprintf+0x6a6>
    1be4:	80 37       	cpi	r24, 0x70	; 112
    1be6:	19 f0       	breq	.+6      	; 0x1bee <vfprintf+0x55e>
    1be8:	88 37       	cpi	r24, 0x78	; 120
    1bea:	11 f0       	breq	.+4      	; 0x1bf0 <vfprintf+0x560>
    1bec:	a4 c0       	rjmp	.+328    	; 0x1d36 <vfprintf+0x6a6>
    1bee:	00 61       	ori	r16, 0x10	; 16
    1bf0:	04 ff       	sbrs	r16, 4
    1bf2:	09 c0       	rjmp	.+18     	; 0x1c06 <vfprintf+0x576>
    1bf4:	04 60       	ori	r16, 0x04	; 4
    1bf6:	07 c0       	rjmp	.+14     	; 0x1c06 <vfprintf+0x576>
    1bf8:	24 ff       	sbrs	r18, 4
    1bfa:	08 c0       	rjmp	.+16     	; 0x1c0c <vfprintf+0x57c>
    1bfc:	06 60       	ori	r16, 0x06	; 6
    1bfe:	06 c0       	rjmp	.+12     	; 0x1c0c <vfprintf+0x57c>
    1c00:	28 e0       	ldi	r18, 0x08	; 8
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	05 c0       	rjmp	.+10     	; 0x1c10 <vfprintf+0x580>
    1c06:	20 e1       	ldi	r18, 0x10	; 16
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	02 c0       	rjmp	.+4      	; 0x1c10 <vfprintf+0x580>
    1c0c:	20 e1       	ldi	r18, 0x10	; 16
    1c0e:	32 e0       	ldi	r19, 0x02	; 2
    1c10:	56 01       	movw	r10, r12
    1c12:	07 ff       	sbrs	r16, 7
    1c14:	09 c0       	rjmp	.+18     	; 0x1c28 <vfprintf+0x598>
    1c16:	f4 e0       	ldi	r31, 0x04	; 4
    1c18:	af 0e       	add	r10, r31
    1c1a:	b1 1c       	adc	r11, r1
    1c1c:	f6 01       	movw	r30, r12
    1c1e:	60 81       	ld	r22, Z
    1c20:	71 81       	ldd	r23, Z+1	; 0x01
    1c22:	82 81       	ldd	r24, Z+2	; 0x02
    1c24:	93 81       	ldd	r25, Z+3	; 0x03
    1c26:	08 c0       	rjmp	.+16     	; 0x1c38 <vfprintf+0x5a8>
    1c28:	f2 e0       	ldi	r31, 0x02	; 2
    1c2a:	af 0e       	add	r10, r31
    1c2c:	b1 1c       	adc	r11, r1
    1c2e:	f6 01       	movw	r30, r12
    1c30:	60 81       	ld	r22, Z
    1c32:	71 81       	ldd	r23, Z+1	; 0x01
    1c34:	80 e0       	ldi	r24, 0x00	; 0
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	a4 01       	movw	r20, r8
    1c3a:	67 d3       	rcall	.+1742   	; 0x230a <__ultoa_invert>
    1c3c:	c8 2e       	mov	r12, r24
    1c3e:	c8 18       	sub	r12, r8
    1c40:	0f 77       	andi	r16, 0x7F	; 127
    1c42:	06 ff       	sbrs	r16, 6
    1c44:	0b c0       	rjmp	.+22     	; 0x1c5c <vfprintf+0x5cc>
    1c46:	20 2f       	mov	r18, r16
    1c48:	2e 7f       	andi	r18, 0xFE	; 254
    1c4a:	c1 16       	cp	r12, r17
    1c4c:	50 f4       	brcc	.+20     	; 0x1c62 <vfprintf+0x5d2>
    1c4e:	04 ff       	sbrs	r16, 4
    1c50:	0a c0       	rjmp	.+20     	; 0x1c66 <vfprintf+0x5d6>
    1c52:	02 fd       	sbrc	r16, 2
    1c54:	08 c0       	rjmp	.+16     	; 0x1c66 <vfprintf+0x5d6>
    1c56:	20 2f       	mov	r18, r16
    1c58:	2e 7e       	andi	r18, 0xEE	; 238
    1c5a:	05 c0       	rjmp	.+10     	; 0x1c66 <vfprintf+0x5d6>
    1c5c:	dc 2c       	mov	r13, r12
    1c5e:	20 2f       	mov	r18, r16
    1c60:	03 c0       	rjmp	.+6      	; 0x1c68 <vfprintf+0x5d8>
    1c62:	dc 2c       	mov	r13, r12
    1c64:	01 c0       	rjmp	.+2      	; 0x1c68 <vfprintf+0x5d8>
    1c66:	d1 2e       	mov	r13, r17
    1c68:	24 ff       	sbrs	r18, 4
    1c6a:	0d c0       	rjmp	.+26     	; 0x1c86 <vfprintf+0x5f6>
    1c6c:	fe 01       	movw	r30, r28
    1c6e:	ec 0d       	add	r30, r12
    1c70:	f1 1d       	adc	r31, r1
    1c72:	80 81       	ld	r24, Z
    1c74:	80 33       	cpi	r24, 0x30	; 48
    1c76:	11 f4       	brne	.+4      	; 0x1c7c <vfprintf+0x5ec>
    1c78:	29 7e       	andi	r18, 0xE9	; 233
    1c7a:	09 c0       	rjmp	.+18     	; 0x1c8e <vfprintf+0x5fe>
    1c7c:	22 ff       	sbrs	r18, 2
    1c7e:	06 c0       	rjmp	.+12     	; 0x1c8c <vfprintf+0x5fc>
    1c80:	d3 94       	inc	r13
    1c82:	d3 94       	inc	r13
    1c84:	04 c0       	rjmp	.+8      	; 0x1c8e <vfprintf+0x5fe>
    1c86:	82 2f       	mov	r24, r18
    1c88:	86 78       	andi	r24, 0x86	; 134
    1c8a:	09 f0       	breq	.+2      	; 0x1c8e <vfprintf+0x5fe>
    1c8c:	d3 94       	inc	r13
    1c8e:	23 fd       	sbrc	r18, 3
    1c90:	12 c0       	rjmp	.+36     	; 0x1cb6 <vfprintf+0x626>
    1c92:	20 ff       	sbrs	r18, 0
    1c94:	06 c0       	rjmp	.+12     	; 0x1ca2 <vfprintf+0x612>
    1c96:	1c 2d       	mov	r17, r12
    1c98:	d5 14       	cp	r13, r5
    1c9a:	18 f4       	brcc	.+6      	; 0x1ca2 <vfprintf+0x612>
    1c9c:	15 0d       	add	r17, r5
    1c9e:	1d 19       	sub	r17, r13
    1ca0:	d5 2c       	mov	r13, r5
    1ca2:	d5 14       	cp	r13, r5
    1ca4:	60 f4       	brcc	.+24     	; 0x1cbe <vfprintf+0x62e>
    1ca6:	b7 01       	movw	r22, r14
    1ca8:	80 e2       	ldi	r24, 0x20	; 32
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	2b 8b       	std	Y+19, r18	; 0x13
    1cae:	d3 d2       	rcall	.+1446   	; 0x2256 <fputc>
    1cb0:	d3 94       	inc	r13
    1cb2:	2b 89       	ldd	r18, Y+19	; 0x13
    1cb4:	f6 cf       	rjmp	.-20     	; 0x1ca2 <vfprintf+0x612>
    1cb6:	d5 14       	cp	r13, r5
    1cb8:	10 f4       	brcc	.+4      	; 0x1cbe <vfprintf+0x62e>
    1cba:	5d 18       	sub	r5, r13
    1cbc:	01 c0       	rjmp	.+2      	; 0x1cc0 <vfprintf+0x630>
    1cbe:	51 2c       	mov	r5, r1
    1cc0:	24 ff       	sbrs	r18, 4
    1cc2:	11 c0       	rjmp	.+34     	; 0x1ce6 <vfprintf+0x656>
    1cc4:	b7 01       	movw	r22, r14
    1cc6:	80 e3       	ldi	r24, 0x30	; 48
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	2b 8b       	std	Y+19, r18	; 0x13
    1ccc:	c4 d2       	rcall	.+1416   	; 0x2256 <fputc>
    1cce:	2b 89       	ldd	r18, Y+19	; 0x13
    1cd0:	22 ff       	sbrs	r18, 2
    1cd2:	16 c0       	rjmp	.+44     	; 0x1d00 <vfprintf+0x670>
    1cd4:	21 ff       	sbrs	r18, 1
    1cd6:	03 c0       	rjmp	.+6      	; 0x1cde <vfprintf+0x64e>
    1cd8:	88 e5       	ldi	r24, 0x58	; 88
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	02 c0       	rjmp	.+4      	; 0x1ce2 <vfprintf+0x652>
    1cde:	88 e7       	ldi	r24, 0x78	; 120
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	b7 01       	movw	r22, r14
    1ce4:	0c c0       	rjmp	.+24     	; 0x1cfe <vfprintf+0x66e>
    1ce6:	82 2f       	mov	r24, r18
    1ce8:	86 78       	andi	r24, 0x86	; 134
    1cea:	51 f0       	breq	.+20     	; 0x1d00 <vfprintf+0x670>
    1cec:	21 fd       	sbrc	r18, 1
    1cee:	02 c0       	rjmp	.+4      	; 0x1cf4 <vfprintf+0x664>
    1cf0:	80 e2       	ldi	r24, 0x20	; 32
    1cf2:	01 c0       	rjmp	.+2      	; 0x1cf6 <vfprintf+0x666>
    1cf4:	8b e2       	ldi	r24, 0x2B	; 43
    1cf6:	27 fd       	sbrc	r18, 7
    1cf8:	8d e2       	ldi	r24, 0x2D	; 45
    1cfa:	b7 01       	movw	r22, r14
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	ab d2       	rcall	.+1366   	; 0x2256 <fputc>
    1d00:	c1 16       	cp	r12, r17
    1d02:	30 f4       	brcc	.+12     	; 0x1d10 <vfprintf+0x680>
    1d04:	b7 01       	movw	r22, r14
    1d06:	80 e3       	ldi	r24, 0x30	; 48
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	a5 d2       	rcall	.+1354   	; 0x2256 <fputc>
    1d0c:	11 50       	subi	r17, 0x01	; 1
    1d0e:	f8 cf       	rjmp	.-16     	; 0x1d00 <vfprintf+0x670>
    1d10:	ca 94       	dec	r12
    1d12:	f4 01       	movw	r30, r8
    1d14:	ec 0d       	add	r30, r12
    1d16:	f1 1d       	adc	r31, r1
    1d18:	80 81       	ld	r24, Z
    1d1a:	b7 01       	movw	r22, r14
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	9b d2       	rcall	.+1334   	; 0x2256 <fputc>
    1d20:	c1 10       	cpse	r12, r1
    1d22:	f6 cf       	rjmp	.-20     	; 0x1d10 <vfprintf+0x680>
    1d24:	55 20       	and	r5, r5
    1d26:	09 f4       	brne	.+2      	; 0x1d2a <vfprintf+0x69a>
    1d28:	dd cc       	rjmp	.-1606   	; 0x16e4 <vfprintf+0x54>
    1d2a:	b7 01       	movw	r22, r14
    1d2c:	80 e2       	ldi	r24, 0x20	; 32
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	92 d2       	rcall	.+1316   	; 0x2256 <fputc>
    1d32:	5a 94       	dec	r5
    1d34:	f7 cf       	rjmp	.-18     	; 0x1d24 <vfprintf+0x694>
    1d36:	f7 01       	movw	r30, r14
    1d38:	86 81       	ldd	r24, Z+6	; 0x06
    1d3a:	97 81       	ldd	r25, Z+7	; 0x07
    1d3c:	02 c0       	rjmp	.+4      	; 0x1d42 <vfprintf+0x6b2>
    1d3e:	8f ef       	ldi	r24, 0xFF	; 255
    1d40:	9f ef       	ldi	r25, 0xFF	; 255
    1d42:	63 96       	adiw	r28, 0x13	; 19
    1d44:	e2 e1       	ldi	r30, 0x12	; 18
    1d46:	30 c0       	rjmp	.+96     	; 0x1da8 <__epilogue_restores__>

00001d48 <__udivmodhi4>:
    1d48:	aa 1b       	sub	r26, r26
    1d4a:	bb 1b       	sub	r27, r27
    1d4c:	51 e1       	ldi	r21, 0x11	; 17
    1d4e:	07 c0       	rjmp	.+14     	; 0x1d5e <__udivmodhi4_ep>

00001d50 <__udivmodhi4_loop>:
    1d50:	aa 1f       	adc	r26, r26
    1d52:	bb 1f       	adc	r27, r27
    1d54:	a6 17       	cp	r26, r22
    1d56:	b7 07       	cpc	r27, r23
    1d58:	10 f0       	brcs	.+4      	; 0x1d5e <__udivmodhi4_ep>
    1d5a:	a6 1b       	sub	r26, r22
    1d5c:	b7 0b       	sbc	r27, r23

00001d5e <__udivmodhi4_ep>:
    1d5e:	88 1f       	adc	r24, r24
    1d60:	99 1f       	adc	r25, r25
    1d62:	5a 95       	dec	r21
    1d64:	a9 f7       	brne	.-22     	; 0x1d50 <__udivmodhi4_loop>
    1d66:	80 95       	com	r24
    1d68:	90 95       	com	r25
    1d6a:	bc 01       	movw	r22, r24
    1d6c:	cd 01       	movw	r24, r26
    1d6e:	08 95       	ret

00001d70 <__prologue_saves__>:
    1d70:	2f 92       	push	r2
    1d72:	3f 92       	push	r3
    1d74:	4f 92       	push	r4
    1d76:	5f 92       	push	r5
    1d78:	6f 92       	push	r6
    1d7a:	7f 92       	push	r7
    1d7c:	8f 92       	push	r8
    1d7e:	9f 92       	push	r9
    1d80:	af 92       	push	r10
    1d82:	bf 92       	push	r11
    1d84:	cf 92       	push	r12
    1d86:	df 92       	push	r13
    1d88:	ef 92       	push	r14
    1d8a:	ff 92       	push	r15
    1d8c:	0f 93       	push	r16
    1d8e:	1f 93       	push	r17
    1d90:	cf 93       	push	r28
    1d92:	df 93       	push	r29
    1d94:	cd b7       	in	r28, 0x3d	; 61
    1d96:	de b7       	in	r29, 0x3e	; 62
    1d98:	ca 1b       	sub	r28, r26
    1d9a:	db 0b       	sbc	r29, r27
    1d9c:	0f b6       	in	r0, 0x3f	; 63
    1d9e:	f8 94       	cli
    1da0:	de bf       	out	0x3e, r29	; 62
    1da2:	0f be       	out	0x3f, r0	; 63
    1da4:	cd bf       	out	0x3d, r28	; 61
    1da6:	09 94       	ijmp

00001da8 <__epilogue_restores__>:
    1da8:	2a 88       	ldd	r2, Y+18	; 0x12
    1daa:	39 88       	ldd	r3, Y+17	; 0x11
    1dac:	48 88       	ldd	r4, Y+16	; 0x10
    1dae:	5f 84       	ldd	r5, Y+15	; 0x0f
    1db0:	6e 84       	ldd	r6, Y+14	; 0x0e
    1db2:	7d 84       	ldd	r7, Y+13	; 0x0d
    1db4:	8c 84       	ldd	r8, Y+12	; 0x0c
    1db6:	9b 84       	ldd	r9, Y+11	; 0x0b
    1db8:	aa 84       	ldd	r10, Y+10	; 0x0a
    1dba:	b9 84       	ldd	r11, Y+9	; 0x09
    1dbc:	c8 84       	ldd	r12, Y+8	; 0x08
    1dbe:	df 80       	ldd	r13, Y+7	; 0x07
    1dc0:	ee 80       	ldd	r14, Y+6	; 0x06
    1dc2:	fd 80       	ldd	r15, Y+5	; 0x05
    1dc4:	0c 81       	ldd	r16, Y+4	; 0x04
    1dc6:	1b 81       	ldd	r17, Y+3	; 0x03
    1dc8:	aa 81       	ldd	r26, Y+2	; 0x02
    1dca:	b9 81       	ldd	r27, Y+1	; 0x01
    1dcc:	ce 0f       	add	r28, r30
    1dce:	d1 1d       	adc	r29, r1
    1dd0:	0f b6       	in	r0, 0x3f	; 63
    1dd2:	f8 94       	cli
    1dd4:	de bf       	out	0x3e, r29	; 62
    1dd6:	0f be       	out	0x3f, r0	; 63
    1dd8:	cd bf       	out	0x3d, r28	; 61
    1dda:	ed 01       	movw	r28, r26
    1ddc:	08 95       	ret

00001dde <malloc>:
    1dde:	cf 93       	push	r28
    1de0:	df 93       	push	r29
    1de2:	82 30       	cpi	r24, 0x02	; 2
    1de4:	91 05       	cpc	r25, r1
    1de6:	10 f4       	brcc	.+4      	; 0x1dec <malloc+0xe>
    1de8:	82 e0       	ldi	r24, 0x02	; 2
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	e0 91 7c 01 	lds	r30, 0x017C
    1df0:	f0 91 7d 01 	lds	r31, 0x017D
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	a0 e0       	ldi	r26, 0x00	; 0
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	30 97       	sbiw	r30, 0x00	; 0
    1dfe:	39 f1       	breq	.+78     	; 0x1e4e <malloc+0x70>
    1e00:	40 81       	ld	r20, Z
    1e02:	51 81       	ldd	r21, Z+1	; 0x01
    1e04:	48 17       	cp	r20, r24
    1e06:	59 07       	cpc	r21, r25
    1e08:	b8 f0       	brcs	.+46     	; 0x1e38 <malloc+0x5a>
    1e0a:	48 17       	cp	r20, r24
    1e0c:	59 07       	cpc	r21, r25
    1e0e:	71 f4       	brne	.+28     	; 0x1e2c <malloc+0x4e>
    1e10:	82 81       	ldd	r24, Z+2	; 0x02
    1e12:	93 81       	ldd	r25, Z+3	; 0x03
    1e14:	10 97       	sbiw	r26, 0x00	; 0
    1e16:	29 f0       	breq	.+10     	; 0x1e22 <malloc+0x44>
    1e18:	13 96       	adiw	r26, 0x03	; 3
    1e1a:	9c 93       	st	X, r25
    1e1c:	8e 93       	st	-X, r24
    1e1e:	12 97       	sbiw	r26, 0x02	; 2
    1e20:	2c c0       	rjmp	.+88     	; 0x1e7a <malloc+0x9c>
    1e22:	90 93 7d 01 	sts	0x017D, r25
    1e26:	80 93 7c 01 	sts	0x017C, r24
    1e2a:	27 c0       	rjmp	.+78     	; 0x1e7a <malloc+0x9c>
    1e2c:	21 15       	cp	r18, r1
    1e2e:	31 05       	cpc	r19, r1
    1e30:	31 f0       	breq	.+12     	; 0x1e3e <malloc+0x60>
    1e32:	42 17       	cp	r20, r18
    1e34:	53 07       	cpc	r21, r19
    1e36:	18 f0       	brcs	.+6      	; 0x1e3e <malloc+0x60>
    1e38:	a9 01       	movw	r20, r18
    1e3a:	db 01       	movw	r26, r22
    1e3c:	01 c0       	rjmp	.+2      	; 0x1e40 <malloc+0x62>
    1e3e:	ef 01       	movw	r28, r30
    1e40:	9a 01       	movw	r18, r20
    1e42:	bd 01       	movw	r22, r26
    1e44:	df 01       	movw	r26, r30
    1e46:	02 80       	ldd	r0, Z+2	; 0x02
    1e48:	f3 81       	ldd	r31, Z+3	; 0x03
    1e4a:	e0 2d       	mov	r30, r0
    1e4c:	d7 cf       	rjmp	.-82     	; 0x1dfc <malloc+0x1e>
    1e4e:	21 15       	cp	r18, r1
    1e50:	31 05       	cpc	r19, r1
    1e52:	f9 f0       	breq	.+62     	; 0x1e92 <malloc+0xb4>
    1e54:	28 1b       	sub	r18, r24
    1e56:	39 0b       	sbc	r19, r25
    1e58:	24 30       	cpi	r18, 0x04	; 4
    1e5a:	31 05       	cpc	r19, r1
    1e5c:	80 f4       	brcc	.+32     	; 0x1e7e <malloc+0xa0>
    1e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e60:	9b 81       	ldd	r25, Y+3	; 0x03
    1e62:	61 15       	cp	r22, r1
    1e64:	71 05       	cpc	r23, r1
    1e66:	21 f0       	breq	.+8      	; 0x1e70 <malloc+0x92>
    1e68:	fb 01       	movw	r30, r22
    1e6a:	93 83       	std	Z+3, r25	; 0x03
    1e6c:	82 83       	std	Z+2, r24	; 0x02
    1e6e:	04 c0       	rjmp	.+8      	; 0x1e78 <malloc+0x9a>
    1e70:	90 93 7d 01 	sts	0x017D, r25
    1e74:	80 93 7c 01 	sts	0x017C, r24
    1e78:	fe 01       	movw	r30, r28
    1e7a:	32 96       	adiw	r30, 0x02	; 2
    1e7c:	44 c0       	rjmp	.+136    	; 0x1f06 <malloc+0x128>
    1e7e:	fe 01       	movw	r30, r28
    1e80:	e2 0f       	add	r30, r18
    1e82:	f3 1f       	adc	r31, r19
    1e84:	81 93       	st	Z+, r24
    1e86:	91 93       	st	Z+, r25
    1e88:	22 50       	subi	r18, 0x02	; 2
    1e8a:	31 09       	sbc	r19, r1
    1e8c:	39 83       	std	Y+1, r19	; 0x01
    1e8e:	28 83       	st	Y, r18
    1e90:	3a c0       	rjmp	.+116    	; 0x1f06 <malloc+0x128>
    1e92:	20 91 7a 01 	lds	r18, 0x017A
    1e96:	30 91 7b 01 	lds	r19, 0x017B
    1e9a:	23 2b       	or	r18, r19
    1e9c:	41 f4       	brne	.+16     	; 0x1eae <malloc+0xd0>
    1e9e:	20 91 1f 01 	lds	r18, 0x011F
    1ea2:	30 91 20 01 	lds	r19, 0x0120
    1ea6:	30 93 7b 01 	sts	0x017B, r19
    1eaa:	20 93 7a 01 	sts	0x017A, r18
    1eae:	20 91 1d 01 	lds	r18, 0x011D
    1eb2:	30 91 1e 01 	lds	r19, 0x011E
    1eb6:	21 15       	cp	r18, r1
    1eb8:	31 05       	cpc	r19, r1
    1eba:	41 f4       	brne	.+16     	; 0x1ecc <malloc+0xee>
    1ebc:	2d b7       	in	r18, 0x3d	; 61
    1ebe:	3e b7       	in	r19, 0x3e	; 62
    1ec0:	40 91 21 01 	lds	r20, 0x0121
    1ec4:	50 91 22 01 	lds	r21, 0x0122
    1ec8:	24 1b       	sub	r18, r20
    1eca:	35 0b       	sbc	r19, r21
    1ecc:	e0 91 7a 01 	lds	r30, 0x017A
    1ed0:	f0 91 7b 01 	lds	r31, 0x017B
    1ed4:	e2 17       	cp	r30, r18
    1ed6:	f3 07       	cpc	r31, r19
    1ed8:	a0 f4       	brcc	.+40     	; 0x1f02 <malloc+0x124>
    1eda:	2e 1b       	sub	r18, r30
    1edc:	3f 0b       	sbc	r19, r31
    1ede:	28 17       	cp	r18, r24
    1ee0:	39 07       	cpc	r19, r25
    1ee2:	78 f0       	brcs	.+30     	; 0x1f02 <malloc+0x124>
    1ee4:	ac 01       	movw	r20, r24
    1ee6:	4e 5f       	subi	r20, 0xFE	; 254
    1ee8:	5f 4f       	sbci	r21, 0xFF	; 255
    1eea:	24 17       	cp	r18, r20
    1eec:	35 07       	cpc	r19, r21
    1eee:	48 f0       	brcs	.+18     	; 0x1f02 <malloc+0x124>
    1ef0:	4e 0f       	add	r20, r30
    1ef2:	5f 1f       	adc	r21, r31
    1ef4:	50 93 7b 01 	sts	0x017B, r21
    1ef8:	40 93 7a 01 	sts	0x017A, r20
    1efc:	81 93       	st	Z+, r24
    1efe:	91 93       	st	Z+, r25
    1f00:	02 c0       	rjmp	.+4      	; 0x1f06 <malloc+0x128>
    1f02:	e0 e0       	ldi	r30, 0x00	; 0
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	cf 01       	movw	r24, r30
    1f08:	df 91       	pop	r29
    1f0a:	cf 91       	pop	r28
    1f0c:	08 95       	ret

00001f0e <free>:
    1f0e:	cf 93       	push	r28
    1f10:	df 93       	push	r29
    1f12:	00 97       	sbiw	r24, 0x00	; 0
    1f14:	09 f4       	brne	.+2      	; 0x1f18 <free+0xa>
    1f16:	87 c0       	rjmp	.+270    	; 0x2026 <free+0x118>
    1f18:	fc 01       	movw	r30, r24
    1f1a:	32 97       	sbiw	r30, 0x02	; 2
    1f1c:	13 82       	std	Z+3, r1	; 0x03
    1f1e:	12 82       	std	Z+2, r1	; 0x02
    1f20:	c0 91 7c 01 	lds	r28, 0x017C
    1f24:	d0 91 7d 01 	lds	r29, 0x017D
    1f28:	20 97       	sbiw	r28, 0x00	; 0
    1f2a:	81 f4       	brne	.+32     	; 0x1f4c <free+0x3e>
    1f2c:	20 81       	ld	r18, Z
    1f2e:	31 81       	ldd	r19, Z+1	; 0x01
    1f30:	28 0f       	add	r18, r24
    1f32:	39 1f       	adc	r19, r25
    1f34:	80 91 7a 01 	lds	r24, 0x017A
    1f38:	90 91 7b 01 	lds	r25, 0x017B
    1f3c:	82 17       	cp	r24, r18
    1f3e:	93 07       	cpc	r25, r19
    1f40:	79 f5       	brne	.+94     	; 0x1fa0 <free+0x92>
    1f42:	f0 93 7b 01 	sts	0x017B, r31
    1f46:	e0 93 7a 01 	sts	0x017A, r30
    1f4a:	6d c0       	rjmp	.+218    	; 0x2026 <free+0x118>
    1f4c:	de 01       	movw	r26, r28
    1f4e:	20 e0       	ldi	r18, 0x00	; 0
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	ae 17       	cp	r26, r30
    1f54:	bf 07       	cpc	r27, r31
    1f56:	50 f4       	brcc	.+20     	; 0x1f6c <free+0x5e>
    1f58:	12 96       	adiw	r26, 0x02	; 2
    1f5a:	4d 91       	ld	r20, X+
    1f5c:	5c 91       	ld	r21, X
    1f5e:	13 97       	sbiw	r26, 0x03	; 3
    1f60:	9d 01       	movw	r18, r26
    1f62:	41 15       	cp	r20, r1
    1f64:	51 05       	cpc	r21, r1
    1f66:	09 f1       	breq	.+66     	; 0x1faa <free+0x9c>
    1f68:	da 01       	movw	r26, r20
    1f6a:	f3 cf       	rjmp	.-26     	; 0x1f52 <free+0x44>
    1f6c:	b3 83       	std	Z+3, r27	; 0x03
    1f6e:	a2 83       	std	Z+2, r26	; 0x02
    1f70:	40 81       	ld	r20, Z
    1f72:	51 81       	ldd	r21, Z+1	; 0x01
    1f74:	84 0f       	add	r24, r20
    1f76:	95 1f       	adc	r25, r21
    1f78:	8a 17       	cp	r24, r26
    1f7a:	9b 07       	cpc	r25, r27
    1f7c:	71 f4       	brne	.+28     	; 0x1f9a <free+0x8c>
    1f7e:	8d 91       	ld	r24, X+
    1f80:	9c 91       	ld	r25, X
    1f82:	11 97       	sbiw	r26, 0x01	; 1
    1f84:	84 0f       	add	r24, r20
    1f86:	95 1f       	adc	r25, r21
    1f88:	02 96       	adiw	r24, 0x02	; 2
    1f8a:	91 83       	std	Z+1, r25	; 0x01
    1f8c:	80 83       	st	Z, r24
    1f8e:	12 96       	adiw	r26, 0x02	; 2
    1f90:	8d 91       	ld	r24, X+
    1f92:	9c 91       	ld	r25, X
    1f94:	13 97       	sbiw	r26, 0x03	; 3
    1f96:	93 83       	std	Z+3, r25	; 0x03
    1f98:	82 83       	std	Z+2, r24	; 0x02
    1f9a:	21 15       	cp	r18, r1
    1f9c:	31 05       	cpc	r19, r1
    1f9e:	29 f4       	brne	.+10     	; 0x1faa <free+0x9c>
    1fa0:	f0 93 7d 01 	sts	0x017D, r31
    1fa4:	e0 93 7c 01 	sts	0x017C, r30
    1fa8:	3e c0       	rjmp	.+124    	; 0x2026 <free+0x118>
    1faa:	d9 01       	movw	r26, r18
    1fac:	13 96       	adiw	r26, 0x03	; 3
    1fae:	fc 93       	st	X, r31
    1fb0:	ee 93       	st	-X, r30
    1fb2:	12 97       	sbiw	r26, 0x02	; 2
    1fb4:	4d 91       	ld	r20, X+
    1fb6:	5d 91       	ld	r21, X+
    1fb8:	a4 0f       	add	r26, r20
    1fba:	b5 1f       	adc	r27, r21
    1fbc:	ea 17       	cp	r30, r26
    1fbe:	fb 07       	cpc	r31, r27
    1fc0:	79 f4       	brne	.+30     	; 0x1fe0 <free+0xd2>
    1fc2:	80 81       	ld	r24, Z
    1fc4:	91 81       	ldd	r25, Z+1	; 0x01
    1fc6:	84 0f       	add	r24, r20
    1fc8:	95 1f       	adc	r25, r21
    1fca:	02 96       	adiw	r24, 0x02	; 2
    1fcc:	d9 01       	movw	r26, r18
    1fce:	11 96       	adiw	r26, 0x01	; 1
    1fd0:	9c 93       	st	X, r25
    1fd2:	8e 93       	st	-X, r24
    1fd4:	82 81       	ldd	r24, Z+2	; 0x02
    1fd6:	93 81       	ldd	r25, Z+3	; 0x03
    1fd8:	13 96       	adiw	r26, 0x03	; 3
    1fda:	9c 93       	st	X, r25
    1fdc:	8e 93       	st	-X, r24
    1fde:	12 97       	sbiw	r26, 0x02	; 2
    1fe0:	e0 e0       	ldi	r30, 0x00	; 0
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe6:	9b 81       	ldd	r25, Y+3	; 0x03
    1fe8:	00 97       	sbiw	r24, 0x00	; 0
    1fea:	19 f0       	breq	.+6      	; 0x1ff2 <free+0xe4>
    1fec:	fe 01       	movw	r30, r28
    1fee:	ec 01       	movw	r28, r24
    1ff0:	f9 cf       	rjmp	.-14     	; 0x1fe4 <free+0xd6>
    1ff2:	ce 01       	movw	r24, r28
    1ff4:	02 96       	adiw	r24, 0x02	; 2
    1ff6:	28 81       	ld	r18, Y
    1ff8:	39 81       	ldd	r19, Y+1	; 0x01
    1ffa:	82 0f       	add	r24, r18
    1ffc:	93 1f       	adc	r25, r19
    1ffe:	20 91 7a 01 	lds	r18, 0x017A
    2002:	30 91 7b 01 	lds	r19, 0x017B
    2006:	28 17       	cp	r18, r24
    2008:	39 07       	cpc	r19, r25
    200a:	69 f4       	brne	.+26     	; 0x2026 <free+0x118>
    200c:	30 97       	sbiw	r30, 0x00	; 0
    200e:	29 f4       	brne	.+10     	; 0x201a <free+0x10c>
    2010:	10 92 7d 01 	sts	0x017D, r1
    2014:	10 92 7c 01 	sts	0x017C, r1
    2018:	02 c0       	rjmp	.+4      	; 0x201e <free+0x110>
    201a:	13 82       	std	Z+3, r1	; 0x03
    201c:	12 82       	std	Z+2, r1	; 0x02
    201e:	d0 93 7b 01 	sts	0x017B, r29
    2022:	c0 93 7a 01 	sts	0x017A, r28
    2026:	df 91       	pop	r29
    2028:	cf 91       	pop	r28
    202a:	08 95       	ret

0000202c <__ftoa_engine>:
    202c:	28 30       	cpi	r18, 0x08	; 8
    202e:	08 f0       	brcs	.+2      	; 0x2032 <__ftoa_engine+0x6>
    2030:	27 e0       	ldi	r18, 0x07	; 7
    2032:	33 27       	eor	r19, r19
    2034:	da 01       	movw	r26, r20
    2036:	99 0f       	add	r25, r25
    2038:	31 1d       	adc	r19, r1
    203a:	87 fd       	sbrc	r24, 7
    203c:	91 60       	ori	r25, 0x01	; 1
    203e:	00 96       	adiw	r24, 0x00	; 0
    2040:	61 05       	cpc	r22, r1
    2042:	71 05       	cpc	r23, r1
    2044:	39 f4       	brne	.+14     	; 0x2054 <__ftoa_engine+0x28>
    2046:	32 60       	ori	r19, 0x02	; 2
    2048:	2e 5f       	subi	r18, 0xFE	; 254
    204a:	3d 93       	st	X+, r19
    204c:	30 e3       	ldi	r19, 0x30	; 48
    204e:	2a 95       	dec	r18
    2050:	e1 f7       	brne	.-8      	; 0x204a <__ftoa_engine+0x1e>
    2052:	08 95       	ret
    2054:	9f 3f       	cpi	r25, 0xFF	; 255
    2056:	30 f0       	brcs	.+12     	; 0x2064 <__ftoa_engine+0x38>
    2058:	80 38       	cpi	r24, 0x80	; 128
    205a:	71 05       	cpc	r23, r1
    205c:	61 05       	cpc	r22, r1
    205e:	09 f0       	breq	.+2      	; 0x2062 <__ftoa_engine+0x36>
    2060:	3c 5f       	subi	r19, 0xFC	; 252
    2062:	3c 5f       	subi	r19, 0xFC	; 252
    2064:	3d 93       	st	X+, r19
    2066:	91 30       	cpi	r25, 0x01	; 1
    2068:	08 f0       	brcs	.+2      	; 0x206c <__ftoa_engine+0x40>
    206a:	80 68       	ori	r24, 0x80	; 128
    206c:	91 1d       	adc	r25, r1
    206e:	df 93       	push	r29
    2070:	cf 93       	push	r28
    2072:	1f 93       	push	r17
    2074:	0f 93       	push	r16
    2076:	ff 92       	push	r15
    2078:	ef 92       	push	r14
    207a:	19 2f       	mov	r17, r25
    207c:	98 7f       	andi	r25, 0xF8	; 248
    207e:	96 95       	lsr	r25
    2080:	e9 2f       	mov	r30, r25
    2082:	96 95       	lsr	r25
    2084:	96 95       	lsr	r25
    2086:	e9 0f       	add	r30, r25
    2088:	ff 27       	eor	r31, r31
    208a:	e0 5e       	subi	r30, 0xE0	; 224
    208c:	fd 4f       	sbci	r31, 0xFD	; 253
    208e:	99 27       	eor	r25, r25
    2090:	33 27       	eor	r19, r19
    2092:	ee 24       	eor	r14, r14
    2094:	ff 24       	eor	r15, r15
    2096:	a7 01       	movw	r20, r14
    2098:	e7 01       	movw	r28, r14
    209a:	05 90       	lpm	r0, Z+
    209c:	08 94       	sec
    209e:	07 94       	ror	r0
    20a0:	28 f4       	brcc	.+10     	; 0x20ac <__ftoa_engine+0x80>
    20a2:	36 0f       	add	r19, r22
    20a4:	e7 1e       	adc	r14, r23
    20a6:	f8 1e       	adc	r15, r24
    20a8:	49 1f       	adc	r20, r25
    20aa:	51 1d       	adc	r21, r1
    20ac:	66 0f       	add	r22, r22
    20ae:	77 1f       	adc	r23, r23
    20b0:	88 1f       	adc	r24, r24
    20b2:	99 1f       	adc	r25, r25
    20b4:	06 94       	lsr	r0
    20b6:	a1 f7       	brne	.-24     	; 0x20a0 <__ftoa_engine+0x74>
    20b8:	05 90       	lpm	r0, Z+
    20ba:	07 94       	ror	r0
    20bc:	28 f4       	brcc	.+10     	; 0x20c8 <__ftoa_engine+0x9c>
    20be:	e7 0e       	add	r14, r23
    20c0:	f8 1e       	adc	r15, r24
    20c2:	49 1f       	adc	r20, r25
    20c4:	56 1f       	adc	r21, r22
    20c6:	c1 1d       	adc	r28, r1
    20c8:	77 0f       	add	r23, r23
    20ca:	88 1f       	adc	r24, r24
    20cc:	99 1f       	adc	r25, r25
    20ce:	66 1f       	adc	r22, r22
    20d0:	06 94       	lsr	r0
    20d2:	a1 f7       	brne	.-24     	; 0x20bc <__ftoa_engine+0x90>
    20d4:	05 90       	lpm	r0, Z+
    20d6:	07 94       	ror	r0
    20d8:	28 f4       	brcc	.+10     	; 0x20e4 <__ftoa_engine+0xb8>
    20da:	f8 0e       	add	r15, r24
    20dc:	49 1f       	adc	r20, r25
    20de:	56 1f       	adc	r21, r22
    20e0:	c7 1f       	adc	r28, r23
    20e2:	d1 1d       	adc	r29, r1
    20e4:	88 0f       	add	r24, r24
    20e6:	99 1f       	adc	r25, r25
    20e8:	66 1f       	adc	r22, r22
    20ea:	77 1f       	adc	r23, r23
    20ec:	06 94       	lsr	r0
    20ee:	a1 f7       	brne	.-24     	; 0x20d8 <__ftoa_engine+0xac>
    20f0:	05 90       	lpm	r0, Z+
    20f2:	07 94       	ror	r0
    20f4:	20 f4       	brcc	.+8      	; 0x20fe <__ftoa_engine+0xd2>
    20f6:	49 0f       	add	r20, r25
    20f8:	56 1f       	adc	r21, r22
    20fa:	c7 1f       	adc	r28, r23
    20fc:	d8 1f       	adc	r29, r24
    20fe:	99 0f       	add	r25, r25
    2100:	66 1f       	adc	r22, r22
    2102:	77 1f       	adc	r23, r23
    2104:	88 1f       	adc	r24, r24
    2106:	06 94       	lsr	r0
    2108:	a9 f7       	brne	.-22     	; 0x20f4 <__ftoa_engine+0xc8>
    210a:	84 91       	lpm	r24, Z
    210c:	10 95       	com	r17
    210e:	17 70       	andi	r17, 0x07	; 7
    2110:	41 f0       	breq	.+16     	; 0x2122 <__ftoa_engine+0xf6>
    2112:	d6 95       	lsr	r29
    2114:	c7 95       	ror	r28
    2116:	57 95       	ror	r21
    2118:	47 95       	ror	r20
    211a:	f7 94       	ror	r15
    211c:	e7 94       	ror	r14
    211e:	1a 95       	dec	r17
    2120:	c1 f7       	brne	.-16     	; 0x2112 <__ftoa_engine+0xe6>
    2122:	e6 ec       	ldi	r30, 0xC6	; 198
    2124:	f1 e0       	ldi	r31, 0x01	; 1
    2126:	68 94       	set
    2128:	15 90       	lpm	r1, Z+
    212a:	15 91       	lpm	r17, Z+
    212c:	35 91       	lpm	r19, Z+
    212e:	65 91       	lpm	r22, Z+
    2130:	95 91       	lpm	r25, Z+
    2132:	05 90       	lpm	r0, Z+
    2134:	7f e2       	ldi	r23, 0x2F	; 47
    2136:	73 95       	inc	r23
    2138:	e1 18       	sub	r14, r1
    213a:	f1 0a       	sbc	r15, r17
    213c:	43 0b       	sbc	r20, r19
    213e:	56 0b       	sbc	r21, r22
    2140:	c9 0b       	sbc	r28, r25
    2142:	d0 09       	sbc	r29, r0
    2144:	c0 f7       	brcc	.-16     	; 0x2136 <__ftoa_engine+0x10a>
    2146:	e1 0c       	add	r14, r1
    2148:	f1 1e       	adc	r15, r17
    214a:	43 1f       	adc	r20, r19
    214c:	56 1f       	adc	r21, r22
    214e:	c9 1f       	adc	r28, r25
    2150:	d0 1d       	adc	r29, r0
    2152:	7e f4       	brtc	.+30     	; 0x2172 <__ftoa_engine+0x146>
    2154:	70 33       	cpi	r23, 0x30	; 48
    2156:	11 f4       	brne	.+4      	; 0x215c <__ftoa_engine+0x130>
    2158:	8a 95       	dec	r24
    215a:	e6 cf       	rjmp	.-52     	; 0x2128 <__ftoa_engine+0xfc>
    215c:	e8 94       	clt
    215e:	01 50       	subi	r16, 0x01	; 1
    2160:	30 f0       	brcs	.+12     	; 0x216e <__ftoa_engine+0x142>
    2162:	08 0f       	add	r16, r24
    2164:	0a f4       	brpl	.+2      	; 0x2168 <__ftoa_engine+0x13c>
    2166:	00 27       	eor	r16, r16
    2168:	02 17       	cp	r16, r18
    216a:	08 f4       	brcc	.+2      	; 0x216e <__ftoa_engine+0x142>
    216c:	20 2f       	mov	r18, r16
    216e:	23 95       	inc	r18
    2170:	02 2f       	mov	r16, r18
    2172:	7a 33       	cpi	r23, 0x3A	; 58
    2174:	28 f0       	brcs	.+10     	; 0x2180 <__ftoa_engine+0x154>
    2176:	79 e3       	ldi	r23, 0x39	; 57
    2178:	7d 93       	st	X+, r23
    217a:	2a 95       	dec	r18
    217c:	e9 f7       	brne	.-6      	; 0x2178 <__ftoa_engine+0x14c>
    217e:	10 c0       	rjmp	.+32     	; 0x21a0 <__ftoa_engine+0x174>
    2180:	7d 93       	st	X+, r23
    2182:	2a 95       	dec	r18
    2184:	89 f6       	brne	.-94     	; 0x2128 <__ftoa_engine+0xfc>
    2186:	06 94       	lsr	r0
    2188:	97 95       	ror	r25
    218a:	67 95       	ror	r22
    218c:	37 95       	ror	r19
    218e:	17 95       	ror	r17
    2190:	17 94       	ror	r1
    2192:	e1 18       	sub	r14, r1
    2194:	f1 0a       	sbc	r15, r17
    2196:	43 0b       	sbc	r20, r19
    2198:	56 0b       	sbc	r21, r22
    219a:	c9 0b       	sbc	r28, r25
    219c:	d0 09       	sbc	r29, r0
    219e:	98 f0       	brcs	.+38     	; 0x21c6 <__ftoa_engine+0x19a>
    21a0:	23 95       	inc	r18
    21a2:	7e 91       	ld	r23, -X
    21a4:	73 95       	inc	r23
    21a6:	7a 33       	cpi	r23, 0x3A	; 58
    21a8:	08 f0       	brcs	.+2      	; 0x21ac <__ftoa_engine+0x180>
    21aa:	70 e3       	ldi	r23, 0x30	; 48
    21ac:	7c 93       	st	X, r23
    21ae:	20 13       	cpse	r18, r16
    21b0:	b8 f7       	brcc	.-18     	; 0x21a0 <__ftoa_engine+0x174>
    21b2:	7e 91       	ld	r23, -X
    21b4:	70 61       	ori	r23, 0x10	; 16
    21b6:	7d 93       	st	X+, r23
    21b8:	30 f0       	brcs	.+12     	; 0x21c6 <__ftoa_engine+0x19a>
    21ba:	83 95       	inc	r24
    21bc:	71 e3       	ldi	r23, 0x31	; 49
    21be:	7d 93       	st	X+, r23
    21c0:	70 e3       	ldi	r23, 0x30	; 48
    21c2:	2a 95       	dec	r18
    21c4:	e1 f7       	brne	.-8      	; 0x21be <__ftoa_engine+0x192>
    21c6:	11 24       	eor	r1, r1
    21c8:	ef 90       	pop	r14
    21ca:	ff 90       	pop	r15
    21cc:	0f 91       	pop	r16
    21ce:	1f 91       	pop	r17
    21d0:	cf 91       	pop	r28
    21d2:	df 91       	pop	r29
    21d4:	99 27       	eor	r25, r25
    21d6:	87 fd       	sbrc	r24, 7
    21d8:	90 95       	com	r25
    21da:	08 95       	ret

000021dc <strncasecmp_P>:
    21dc:	fb 01       	movw	r30, r22
    21de:	dc 01       	movw	r26, r24
    21e0:	41 50       	subi	r20, 0x01	; 1
    21e2:	50 40       	sbci	r21, 0x00	; 0
    21e4:	88 f0       	brcs	.+34     	; 0x2208 <strncasecmp_P+0x2c>
    21e6:	8d 91       	ld	r24, X+
    21e8:	81 34       	cpi	r24, 0x41	; 65
    21ea:	1c f0       	brlt	.+6      	; 0x21f2 <strncasecmp_P+0x16>
    21ec:	8b 35       	cpi	r24, 0x5B	; 91
    21ee:	0c f4       	brge	.+2      	; 0x21f2 <strncasecmp_P+0x16>
    21f0:	80 5e       	subi	r24, 0xE0	; 224
    21f2:	65 91       	lpm	r22, Z+
    21f4:	61 34       	cpi	r22, 0x41	; 65
    21f6:	1c f0       	brlt	.+6      	; 0x21fe <strncasecmp_P+0x22>
    21f8:	6b 35       	cpi	r22, 0x5B	; 91
    21fa:	0c f4       	brge	.+2      	; 0x21fe <strncasecmp_P+0x22>
    21fc:	60 5e       	subi	r22, 0xE0	; 224
    21fe:	86 1b       	sub	r24, r22
    2200:	61 11       	cpse	r22, r1
    2202:	71 f3       	breq	.-36     	; 0x21e0 <strncasecmp_P+0x4>
    2204:	99 0b       	sbc	r25, r25
    2206:	08 95       	ret
    2208:	88 1b       	sub	r24, r24
    220a:	fc cf       	rjmp	.-8      	; 0x2204 <strncasecmp_P+0x28>

0000220c <strnlen_P>:
    220c:	fc 01       	movw	r30, r24
    220e:	05 90       	lpm	r0, Z+
    2210:	61 50       	subi	r22, 0x01	; 1
    2212:	70 40       	sbci	r23, 0x00	; 0
    2214:	01 10       	cpse	r0, r1
    2216:	d8 f7       	brcc	.-10     	; 0x220e <strnlen_P+0x2>
    2218:	80 95       	com	r24
    221a:	90 95       	com	r25
    221c:	8e 0f       	add	r24, r30
    221e:	9f 1f       	adc	r25, r31
    2220:	08 95       	ret

00002222 <strnlen>:
    2222:	fc 01       	movw	r30, r24
    2224:	61 50       	subi	r22, 0x01	; 1
    2226:	70 40       	sbci	r23, 0x00	; 0
    2228:	01 90       	ld	r0, Z+
    222a:	01 10       	cpse	r0, r1
    222c:	d8 f7       	brcc	.-10     	; 0x2224 <strnlen+0x2>
    222e:	80 95       	com	r24
    2230:	90 95       	com	r25
    2232:	8e 0f       	add	r24, r30
    2234:	9f 1f       	adc	r25, r31
    2236:	08 95       	ret

00002238 <fprintf>:
    2238:	a0 e0       	ldi	r26, 0x00	; 0
    223a:	b0 e0       	ldi	r27, 0x00	; 0
    223c:	e1 e2       	ldi	r30, 0x21	; 33
    223e:	f1 e1       	ldi	r31, 0x11	; 17
    2240:	a7 cd       	rjmp	.-1202   	; 0x1d90 <__prologue_saves__+0x20>
    2242:	ae 01       	movw	r20, r28
    2244:	47 5f       	subi	r20, 0xF7	; 247
    2246:	5f 4f       	sbci	r21, 0xFF	; 255
    2248:	6f 81       	ldd	r22, Y+7	; 0x07
    224a:	78 85       	ldd	r23, Y+8	; 0x08
    224c:	8d 81       	ldd	r24, Y+5	; 0x05
    224e:	9e 81       	ldd	r25, Y+6	; 0x06
    2250:	1f da       	rcall	.-3010   	; 0x1690 <vfprintf>
    2252:	e2 e0       	ldi	r30, 0x02	; 2
    2254:	b9 cd       	rjmp	.-1166   	; 0x1dc8 <__epilogue_restores__+0x20>

00002256 <fputc>:
    2256:	0f 93       	push	r16
    2258:	1f 93       	push	r17
    225a:	cf 93       	push	r28
    225c:	df 93       	push	r29
    225e:	18 2f       	mov	r17, r24
    2260:	09 2f       	mov	r16, r25
    2262:	eb 01       	movw	r28, r22
    2264:	8b 81       	ldd	r24, Y+3	; 0x03
    2266:	81 fd       	sbrc	r24, 1
    2268:	03 c0       	rjmp	.+6      	; 0x2270 <fputc+0x1a>
    226a:	8f ef       	ldi	r24, 0xFF	; 255
    226c:	9f ef       	ldi	r25, 0xFF	; 255
    226e:	20 c0       	rjmp	.+64     	; 0x22b0 <fputc+0x5a>
    2270:	82 ff       	sbrs	r24, 2
    2272:	10 c0       	rjmp	.+32     	; 0x2294 <fputc+0x3e>
    2274:	4e 81       	ldd	r20, Y+6	; 0x06
    2276:	5f 81       	ldd	r21, Y+7	; 0x07
    2278:	2c 81       	ldd	r18, Y+4	; 0x04
    227a:	3d 81       	ldd	r19, Y+5	; 0x05
    227c:	42 17       	cp	r20, r18
    227e:	53 07       	cpc	r21, r19
    2280:	7c f4       	brge	.+30     	; 0x22a0 <fputc+0x4a>
    2282:	e8 81       	ld	r30, Y
    2284:	f9 81       	ldd	r31, Y+1	; 0x01
    2286:	9f 01       	movw	r18, r30
    2288:	2f 5f       	subi	r18, 0xFF	; 255
    228a:	3f 4f       	sbci	r19, 0xFF	; 255
    228c:	39 83       	std	Y+1, r19	; 0x01
    228e:	28 83       	st	Y, r18
    2290:	10 83       	st	Z, r17
    2292:	06 c0       	rjmp	.+12     	; 0x22a0 <fputc+0x4a>
    2294:	e8 85       	ldd	r30, Y+8	; 0x08
    2296:	f9 85       	ldd	r31, Y+9	; 0x09
    2298:	81 2f       	mov	r24, r17
    229a:	09 95       	icall
    229c:	89 2b       	or	r24, r25
    229e:	29 f7       	brne	.-54     	; 0x226a <fputc+0x14>
    22a0:	2e 81       	ldd	r18, Y+6	; 0x06
    22a2:	3f 81       	ldd	r19, Y+7	; 0x07
    22a4:	2f 5f       	subi	r18, 0xFF	; 255
    22a6:	3f 4f       	sbci	r19, 0xFF	; 255
    22a8:	3f 83       	std	Y+7, r19	; 0x07
    22aa:	2e 83       	std	Y+6, r18	; 0x06
    22ac:	81 2f       	mov	r24, r17
    22ae:	90 2f       	mov	r25, r16
    22b0:	df 91       	pop	r29
    22b2:	cf 91       	pop	r28
    22b4:	1f 91       	pop	r17
    22b6:	0f 91       	pop	r16
    22b8:	08 95       	ret

000022ba <fputs>:
    22ba:	ef 92       	push	r14
    22bc:	ff 92       	push	r15
    22be:	0f 93       	push	r16
    22c0:	1f 93       	push	r17
    22c2:	cf 93       	push	r28
    22c4:	df 93       	push	r29
    22c6:	8b 01       	movw	r16, r22
    22c8:	db 01       	movw	r26, r22
    22ca:	13 96       	adiw	r26, 0x03	; 3
    22cc:	2c 91       	ld	r18, X
    22ce:	21 ff       	sbrs	r18, 1
    22d0:	16 c0       	rjmp	.+44     	; 0x22fe <fputs+0x44>
    22d2:	ec 01       	movw	r28, r24
    22d4:	e1 2c       	mov	r14, r1
    22d6:	f1 2c       	mov	r15, r1
    22d8:	89 91       	ld	r24, Y+
    22da:	88 23       	and	r24, r24
    22dc:	71 f0       	breq	.+28     	; 0x22fa <fputs+0x40>
    22de:	d8 01       	movw	r26, r16
    22e0:	18 96       	adiw	r26, 0x08	; 8
    22e2:	ed 91       	ld	r30, X+
    22e4:	fc 91       	ld	r31, X
    22e6:	19 97       	sbiw	r26, 0x09	; 9
    22e8:	b8 01       	movw	r22, r16
    22ea:	09 95       	icall
    22ec:	89 2b       	or	r24, r25
    22ee:	a1 f3       	breq	.-24     	; 0x22d8 <fputs+0x1e>
    22f0:	ee 24       	eor	r14, r14
    22f2:	ea 94       	dec	r14
    22f4:	ff 24       	eor	r15, r15
    22f6:	fa 94       	dec	r15
    22f8:	ef cf       	rjmp	.-34     	; 0x22d8 <fputs+0x1e>
    22fa:	c7 01       	movw	r24, r14
    22fc:	02 c0       	rjmp	.+4      	; 0x2302 <fputs+0x48>
    22fe:	8f ef       	ldi	r24, 0xFF	; 255
    2300:	9f ef       	ldi	r25, 0xFF	; 255
    2302:	cd b7       	in	r28, 0x3d	; 61
    2304:	de b7       	in	r29, 0x3e	; 62
    2306:	e6 e0       	ldi	r30, 0x06	; 6
    2308:	5b cd       	rjmp	.-1354   	; 0x1dc0 <__epilogue_restores__+0x18>

0000230a <__ultoa_invert>:
    230a:	fa 01       	movw	r30, r20
    230c:	aa 27       	eor	r26, r26
    230e:	28 30       	cpi	r18, 0x08	; 8
    2310:	51 f1       	breq	.+84     	; 0x2366 <__ultoa_invert+0x5c>
    2312:	20 31       	cpi	r18, 0x10	; 16
    2314:	81 f1       	breq	.+96     	; 0x2376 <__ultoa_invert+0x6c>
    2316:	e8 94       	clt
    2318:	6f 93       	push	r22
    231a:	6e 7f       	andi	r22, 0xFE	; 254
    231c:	6e 5f       	subi	r22, 0xFE	; 254
    231e:	7f 4f       	sbci	r23, 0xFF	; 255
    2320:	8f 4f       	sbci	r24, 0xFF	; 255
    2322:	9f 4f       	sbci	r25, 0xFF	; 255
    2324:	af 4f       	sbci	r26, 0xFF	; 255
    2326:	b1 e0       	ldi	r27, 0x01	; 1
    2328:	3e d0       	rcall	.+124    	; 0x23a6 <__ultoa_invert+0x9c>
    232a:	b4 e0       	ldi	r27, 0x04	; 4
    232c:	3c d0       	rcall	.+120    	; 0x23a6 <__ultoa_invert+0x9c>
    232e:	67 0f       	add	r22, r23
    2330:	78 1f       	adc	r23, r24
    2332:	89 1f       	adc	r24, r25
    2334:	9a 1f       	adc	r25, r26
    2336:	a1 1d       	adc	r26, r1
    2338:	68 0f       	add	r22, r24
    233a:	79 1f       	adc	r23, r25
    233c:	8a 1f       	adc	r24, r26
    233e:	91 1d       	adc	r25, r1
    2340:	a1 1d       	adc	r26, r1
    2342:	6a 0f       	add	r22, r26
    2344:	71 1d       	adc	r23, r1
    2346:	81 1d       	adc	r24, r1
    2348:	91 1d       	adc	r25, r1
    234a:	a1 1d       	adc	r26, r1
    234c:	20 d0       	rcall	.+64     	; 0x238e <__ultoa_invert+0x84>
    234e:	09 f4       	brne	.+2      	; 0x2352 <__ultoa_invert+0x48>
    2350:	68 94       	set
    2352:	3f 91       	pop	r19
    2354:	2a e0       	ldi	r18, 0x0A	; 10
    2356:	26 9f       	mul	r18, r22
    2358:	11 24       	eor	r1, r1
    235a:	30 19       	sub	r19, r0
    235c:	30 5d       	subi	r19, 0xD0	; 208
    235e:	31 93       	st	Z+, r19
    2360:	de f6       	brtc	.-74     	; 0x2318 <__ultoa_invert+0xe>
    2362:	cf 01       	movw	r24, r30
    2364:	08 95       	ret
    2366:	46 2f       	mov	r20, r22
    2368:	47 70       	andi	r20, 0x07	; 7
    236a:	40 5d       	subi	r20, 0xD0	; 208
    236c:	41 93       	st	Z+, r20
    236e:	b3 e0       	ldi	r27, 0x03	; 3
    2370:	0f d0       	rcall	.+30     	; 0x2390 <__ultoa_invert+0x86>
    2372:	c9 f7       	brne	.-14     	; 0x2366 <__ultoa_invert+0x5c>
    2374:	f6 cf       	rjmp	.-20     	; 0x2362 <__ultoa_invert+0x58>
    2376:	46 2f       	mov	r20, r22
    2378:	4f 70       	andi	r20, 0x0F	; 15
    237a:	40 5d       	subi	r20, 0xD0	; 208
    237c:	4a 33       	cpi	r20, 0x3A	; 58
    237e:	18 f0       	brcs	.+6      	; 0x2386 <__ultoa_invert+0x7c>
    2380:	49 5d       	subi	r20, 0xD9	; 217
    2382:	31 fd       	sbrc	r19, 1
    2384:	40 52       	subi	r20, 0x20	; 32
    2386:	41 93       	st	Z+, r20
    2388:	02 d0       	rcall	.+4      	; 0x238e <__ultoa_invert+0x84>
    238a:	a9 f7       	brne	.-22     	; 0x2376 <__ultoa_invert+0x6c>
    238c:	ea cf       	rjmp	.-44     	; 0x2362 <__ultoa_invert+0x58>
    238e:	b4 e0       	ldi	r27, 0x04	; 4
    2390:	a6 95       	lsr	r26
    2392:	97 95       	ror	r25
    2394:	87 95       	ror	r24
    2396:	77 95       	ror	r23
    2398:	67 95       	ror	r22
    239a:	ba 95       	dec	r27
    239c:	c9 f7       	brne	.-14     	; 0x2390 <__ultoa_invert+0x86>
    239e:	00 97       	sbiw	r24, 0x00	; 0
    23a0:	61 05       	cpc	r22, r1
    23a2:	71 05       	cpc	r23, r1
    23a4:	08 95       	ret
    23a6:	9b 01       	movw	r18, r22
    23a8:	ac 01       	movw	r20, r24
    23aa:	0a 2e       	mov	r0, r26
    23ac:	06 94       	lsr	r0
    23ae:	57 95       	ror	r21
    23b0:	47 95       	ror	r20
    23b2:	37 95       	ror	r19
    23b4:	27 95       	ror	r18
    23b6:	ba 95       	dec	r27
    23b8:	c9 f7       	brne	.-14     	; 0x23ac <__ultoa_invert+0xa2>
    23ba:	62 0f       	add	r22, r18
    23bc:	73 1f       	adc	r23, r19
    23be:	84 1f       	adc	r24, r20
    23c0:	95 1f       	adc	r25, r21
    23c2:	a0 1d       	adc	r26, r0
    23c4:	08 95       	ret

000023c6 <__eeupd_byte_m32u4>:
    23c6:	26 2f       	mov	r18, r22

000023c8 <__eeupd_r18_m32u4>:
    23c8:	f9 99       	sbic	0x1f, 1	; 31
    23ca:	fe cf       	rjmp	.-4      	; 0x23c8 <__eeupd_r18_m32u4>
    23cc:	92 bd       	out	0x22, r25	; 34
    23ce:	81 bd       	out	0x21, r24	; 33
    23d0:	f8 9a       	sbi	0x1f, 0	; 31
    23d2:	01 97       	sbiw	r24, 0x01	; 1
    23d4:	00 b4       	in	r0, 0x20	; 32
    23d6:	02 16       	cp	r0, r18
    23d8:	39 f0       	breq	.+14     	; 0x23e8 <__eeupd_r18_m32u4+0x20>
    23da:	1f ba       	out	0x1f, r1	; 31
    23dc:	20 bd       	out	0x20, r18	; 32
    23de:	0f b6       	in	r0, 0x3f	; 63
    23e0:	f8 94       	cli
    23e2:	fa 9a       	sbi	0x1f, 2	; 31
    23e4:	f9 9a       	sbi	0x1f, 1	; 31
    23e6:	0f be       	out	0x3f, r0	; 63
    23e8:	08 95       	ret

000023ea <_exit>:
    23ea:	f8 94       	cli

000023ec <__stop_program>:
    23ec:	ff cf       	rjmp	.-2      	; 0x23ec <__stop_program>
